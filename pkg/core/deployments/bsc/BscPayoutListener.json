{
  "address": "0xa772b0BA6042b9416a619f6638dcfEaC4a8B31fF",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "AddItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "DisabledUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PayoutDoneDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "dexName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "operation",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "poolName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "PoolOperation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "RemoveItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "poolName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "bribe",
              "type": "address"
            },
            {
              "internalType": "enum GlobalPayoutListener.Operation",
              "name": "operation",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "dexName",
              "type": "string"
            },
            {
              "internalType": "uint24",
              "name": "feePercent",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "feeReceiver",
              "type": "address"
            },
            {
              "internalType": "uint256[10]",
              "name": "__gap",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct GlobalPayoutListener.Item",
          "name": "item",
          "type": "tuple"
        }
      ],
      "name": "addItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "poolName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "bribe",
              "type": "address"
            },
            {
              "internalType": "enum GlobalPayoutListener.Operation",
              "name": "operation",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "dexName",
              "type": "string"
            },
            {
              "internalType": "uint24",
              "name": "feePercent",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "feeReceiver",
              "type": "address"
            },
            {
              "internalType": "uint256[10]",
              "name": "__gap",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct GlobalPayoutListener.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "addItems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bsc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "items",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "poolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "bribe",
          "type": "address"
        },
        {
          "internalType": "enum GlobalPayoutListener.Operation",
          "name": "operation",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "dexName",
          "type": "string"
        },
        {
          "internalType": "uint24",
          "name": "feePercent",
          "type": "uint24"
        },
        {
          "internalType": "address",
          "name": "feeReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "payoutDone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "removeItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeItems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_value",
          "type": "bool"
        }
      ],
      "name": "setDisabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "34de66a80c75e8af058325c77d25d7b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"AddItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"DisabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PayoutDoneDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"PoolOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"RemoveItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"internalType\":\"enum GlobalPayoutListener.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"feePercent\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct GlobalPayoutListener.Item\",\"name\":\"item\",\"type\":\"tuple\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"internalType\":\"enum GlobalPayoutListener.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"feePercent\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct GlobalPayoutListener.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"addItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bsc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"internalType\":\"enum GlobalPayoutListener.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"feePercent\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"payoutDone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"removeItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addItem((address,address,string,address,uint8,address,string,uint24,address,uint256[10]))\":{\"notice\":\"Add new item to list or update exist item\"},\"payoutDone(address)\":{\"notice\":\"This function executing in payout after increase/decrease liquidity index for USD+|DAI+|ETS tokens see details: Exchange.sol | HedgeExchanger.sol\"},\"removeItem(address,address)\":{\"notice\":\"Remove item from items\"},\"removeItems()\":{\"notice\":\"Remove items\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/payoutlisteners/BscPayoutListener.sol\":\"BscPayoutListener\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/GlobalPayoutListener.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IGlobalPayoutListener.sol\\\";\\n\\nabstract contract GlobalPayoutListener is IGlobalPayoutListener, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant EXCHANGER = keccak256(\\\"EXCHANGER\\\");\\n\\n    struct Item {\\n        // Unique ID = pool + token\\n        address pool;\\n        address token;\\n        string poolName;\\n        address bribe;\\n        Operation operation;\\n        address to;\\n        string dexName;\\n        uint24 feePercent;\\n        address feeReceiver;\\n        uint256[10] __gap;\\n    }\\n\\n    enum Operation {\\n        SKIM,\\n        SYNC,\\n        BRIBE,\\n        CUSTOM\\n    }\\n\\n    Item[] public items;\\n    bool public disabled; // Admin can disable to executing PayoutDone\\n\\n    function __PayoutListener_init() internal initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        disabled = false;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(DEFAULT_ADMIN_ROLE)\\n    override\\n    {}\\n\\n    // ---  events\\n\\n    event AddItem(address token, address pool);\\n    event DisabledUpdated(bool value);\\n    event PayoutDoneDisabled();\\n    event RemoveItem(address token, address pool);\\n    event PoolOperation(string dexName, string operation, string poolName, address pool, address token, uint256 amount, address to);\\n\\n    // ---  modifiers\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyExchanger() {\\n        require(hasRole(EXCHANGER, msg.sender), \\\"Caller is not the EXCHANGER\\\");\\n        _;\\n    }\\n\\n    // --- setters\\n\\n    function setDisabled(bool _value) external onlyAdmin {\\n        disabled = _value;\\n        emit DisabledUpdated(disabled);\\n    }\\n\\n    /**\\n     * Add new item to list or update exist item\\n     *\\n     */\\n\\n    function addItem(Item memory item) public onlyAdmin {\\n        require(item.token != address(0), 'token is zero');\\n        require(item.pool != address(0), 'pool is zero');\\n\\n        if (item.operation == Operation.SKIM) {\\n            require(item.to != address(0), 'to is zero');\\n        } else if (item.operation == Operation.BRIBE) {\\n            require(item.bribe != address(0), 'bribe is zero');\\n        }\\n\\n        bool isNew = true;\\n        for (uint256 x = 0; x < items.length; x++) {\\n            Item memory exitItem = items[x];\\n\\n            if (exitItem.token == item.token && exitItem.pool == item.pool) {\\n                items[x] = item;\\n                isNew = false;\\n            }\\n        }\\n\\n        if (isNew) {\\n            items.push(item);\\n        }\\n\\n        emit AddItem(item.token, item.pool);\\n    }\\n\\n    function addItems(Item[] memory items) external onlyAdmin {\\n        for (uint256 x = 0; x < items.length; x++) {\\n            Item memory item = items[x];\\n            addItem(item);\\n        }\\n    }\\n\\n    /**\\n      * Remove item from items\\n      */\\n\\n    function removeItem(address token, address pool) public onlyAdmin {\\n        require(token != address(0), 'token is zero');\\n        require(pool != address(0), 'pool is zero');\\n\\n        for (uint256 x = 0; x < items.length; x++) {\\n            Item memory exitItem = items[x];\\n\\n            if (exitItem.token == token && exitItem.pool == pool) {\\n                delete items[x];\\n                emit RemoveItem(token, pool);\\n                return;\\n            }\\n        }\\n\\n        revert('item not found');\\n    }\\n\\n    /**\\n      * Remove items\\n      */\\n    function removeItems() public onlyAdmin {\\n        for (uint256 x = 0; x < items.length; x++) {\\n            delete items[x];\\n        }\\n    }\\n\\n    // --- logic\\n\\n    /**\\n      * Skim tokens from pool and transfer profit to address (to)\\n      */\\n\\n    function _skim(Item memory item) internal {\\n\\n        IERC20 token = IERC20(item.token);\\n        uint256 tokenBalanceBeforeSkim = token.balanceOf(address(this));\\n        IPool(item.pool).skim(address(this));\\n        uint256 amountToken = token.balanceOf(address(this)) - tokenBalanceBeforeSkim;\\n        uint256 feeAmount;\\n        if (amountToken > 0) {\\n            if (item.feePercent > 0) {\\n                feeAmount = amountToken * item.feePercent / 100;\\n                amountToken -= feeAmount;\\n                if (feeAmount > 0) {\\n                    token.transfer(item.feeReceiver, feeAmount);\\n                    emit PoolOperation(item.dexName, 'Skim', item.poolName, item.pool, item.token, feeAmount, item.feeReceiver);\\n                }\\n            }\\n            if (amountToken > 0) {\\n                token.transfer(item.to, amountToken);\\n                emit PoolOperation(item.dexName, 'Skim', item.poolName, item.pool, item.token, amountToken, item.to);\\n            }\\n        }\\n    }\\n\\n    /**\\n      * Skim tokens from pool and transfer profit as bribes\\n      */\\n\\n    function _bribe(Item memory item) internal {\\n\\n        IERC20 token = IERC20(item.token);\\n        uint256 tokenBalanceBeforeSkim = token.balanceOf(address(this));\\n        IPool(item.pool).skim(address(this));\\n        uint256 amountToken = token.balanceOf(address(this)) - tokenBalanceBeforeSkim;\\n        if (amountToken > 0) {\\n            token.approve(item.bribe, amountToken);\\n            IBribe(item.bribe).notifyRewardAmount(item.token, amountToken);\\n            emit PoolOperation(item.dexName, 'Bribe', item.poolName, item.pool, item.token, amountToken, item.bribe);\\n        }\\n    }\\n\\n    /**\\n     * Override this method for unique behavior smart-contracts.\\n     * If standard skim/sync/bribe not allow use.\\n     */\\n\\n    function _custom(Item memory item) internal virtual {\\n        revert(\\\"Custom not implemented\\\");\\n    }\\n\\n    /**\\n      * After execute sync on pool:\\n      * - balance LP tokens == balance USD+ tokens\\n      */\\n\\n    function _sync(Item memory item) internal {\\n        IPool(item.pool).sync();\\n        emit PoolOperation(item.dexName, 'Sync', item.poolName, item.pool, item.token, 0, address(0));\\n    }\\n\\n    /**\\n      * This function executing in payout after increase/decrease liquidity index for USD+|DAI+|ETS tokens\\n      * see details: Exchange.sol | HedgeExchanger.sol\\n      */\\n\\n    function payoutDone(address token) external override onlyExchanger {\\n\\n        if(disabled){\\n            emit PayoutDoneDisabled();\\n            return;\\n        }\\n\\n        for (uint256 x = 0; x < items.length; x++) {\\n\\n            Item memory item = items[x];\\n\\n            // Items contains all tokens then need filter by token\\n            if (item.token != token) {\\n                continue;\\n            }\\n\\n            if (item.operation == Operation.SKIM) {\\n                _skim(item);\\n            } else if (item.operation == Operation.SYNC) {\\n                _sync(item);\\n            } else if (item.operation == Operation.BRIBE) {\\n                _bribe(item);\\n            } else {\\n                _custom(item);\\n            }\\n        }\\n    }\\n\\n\\n    uint256[50] private __gap;\\n\\n}\\n\\ninterface IPool {\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n}\\n\\ninterface IBribe {\\n    function notifyRewardAmount(address token, uint amount) external;\\n}\\n\",\"keccak256\":\"0x796251c48f1dc63bd3103eb9c0bf64fa077934a7abbc9eb6aa774b9cf58f8d30\",\"license\":\"MIT\"},\"contracts/interfaces/IGlobalPayoutListener.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\ninterface IGlobalPayoutListener {\\n\\n    function payoutDone(address _token) external;\\n\\n}\\n\",\"keccak256\":\"0x6eb4d3d1683afa13852629a5f50dbff7c50ea282b79e74c57cb76cfaeea218c8\",\"license\":\"MIT\"},\"contracts/payoutlisteners/BscPayoutListener.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../GlobalPayoutListener.sol\\\";\\n\\ncontract BscPayoutListener is GlobalPayoutListener {\\n\\n    // ---  constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __PayoutListener_init();\\n    }\\n\\n\\n    function bsc() external {\\n\\n    }\\n}\\n\\n\\n\",\"keccak256\":\"0x6403249bd5cec9aa592ee24676b54f43394098e3e08b2d89c207e2501262fb7e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16158080156200003a5750600054600160ff909116105b806200006a575062000057306200014460201b62001b5c1760201c565b1580156200006a575060005460ff166001145b620000d25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f6576000805461ff0019166101001790555b80156200013d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000153565b6001600160a01b03163b151590565b60805160601c6135ce6200018e600039600081816104cc0152818161050c015281816105ac015281816105ec015261067b01526135ce6000f3fe60806040526004361061012a5760003560e01c80636e28e3d5116100ab578063bd0f10531161006f578063bd0f1053146102fa578063bfb231d21461032e578063c53963e614610363578063d0b11c1e14610383578063d547741f146103a3578063ee070805146103c357600080fd5b80636e28e3d5146102705780638129fc1c1461029057806391d14854146102a55780639d433fb5146102c5578063a217fddf146102e557600080fd5b80634f1ef286116100f25780634f1ef2861461020457806352d1902d146102175780636408af7a1461022c5780636bc828391461023b5780636c5a7d1e1461025057600080fd5b806301ffc9a71461012f578063248a9ca3146101645780632f2ff15d146101a257806336568abe146101c45780633659cfe6146101e4575b600080fd5b34801561013b57600080fd5b5061014f61014a366004612f73565b6103dd565b60405190151581526020015b60405180910390f35b34801561017057600080fd5b5061019461017f366004612f1e565b60009081526065602052604090206001015490565b60405190815260200161015b565b3480156101ae57600080fd5b506101c26101bd366004612f50565b610414565b005b3480156101d057600080fd5b506101c26101df366004612f50565b61043e565b3480156101f057600080fd5b506101c26101ff366004612d6c565b6104c1565b6101c2610212366004612dba565b6105a1565b34801561022357600080fd5b5061019461066e565b34801561023857600080fd5b50005b34801561024757600080fd5b506101c2610723565b34801561025c57600080fd5b506101c261026b366004612ee4565b610809565b34801561027c57600080fd5b506101c261028b366004612d6c565b61087e565b34801561029c57600080fd5b506101c2610c2d565b3480156102b157600080fd5b5061014f6102c0366004612f50565b610cf0565b3480156102d157600080fd5b506101c26102e0366004612e1c565b610d1b565b3480156102f157600080fd5b50610194600081565b34801561030657600080fd5b506101947f3eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2d81565b34801561033a57600080fd5b5061034e610349366004612f1e565b610d88565b60405161015b99989796959493929190613097565b34801561036f57600080fd5b506101c261037e366004612d87565b610f27565b34801561038f57600080fd5b506101c261039e366004612f9d565b611396565b3480156103af57600080fd5b506101c26103be366004612f50565b611b37565b3480156103cf57600080fd5b5060fc5461014f9060ff1681565b60006001600160e01b03198216637965db0b60e01b148061040e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526065602052604090206001015461042f81611b6b565b6104398383611b75565b505050565b6001600160a01b03811633146104b35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104bd8282611bfb565b5050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561050a5760405162461bcd60e51b81526004016104aa90613253565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610553600080516020613532833981519152546001600160a01b031690565b6001600160a01b0316146105795760405162461bcd60e51b81526004016104aa9061329f565b61058281611c62565b6040805160008082526020820190925261059e91839190611c6d565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156105ea5760405162461bcd60e51b81526004016104aa90613253565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610633600080516020613532833981519152546001600160a01b031690565b6001600160a01b0316146106595760405162461bcd60e51b81526004016104aa9061329f565b61066282611c62565b6104bd82826001611c6d565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461070e5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016104aa565b5060008051602061353283398151915290565b565b61072e600033610cf0565b61074a5760405162461bcd60e51b81526004016104aa90613339565b60005b60fb5481101561059e5760fb818154811061076a5761076a6134f7565b60009182526020822060119091020180546001600160a01b031990811682556001820180549091169055906107a26002830182612a32565b6003820180546001600160a81b03191690556004820180546001600160a01b03191690556107d4600583016000612a32565b6006820180546001600160b81b03191690556107f4600783016000612a6c565b50508080610801906134b0565b91505061074d565b610814600033610cf0565b6108305760405162461bcd60e51b81526004016104aa90613339565b60fc805460ff191682151590811790915560405160ff909116151581527f0e836a283085867e84aa4dfd94164de8ce61ee6d9e57dfae5e0fcf1eff8f268c906020015b60405180910390a150565b6108a87f3eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2d33610cf0565b6108f45760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f74207468652045584348414e474552000000000060448201526064016104aa565b60fc5460ff161561092b576040517f2db5145a2d675741edae5a00c79aee42925aec079cd653aaa2745197e860b98e90600090a150565b60005b60fb548110156104bd57600060fb828154811061094d5761094d6134f7565b60009182526020918290206040805161014081018252601190930290910180546001600160a01b039081168452600182015416938301939093526002830180549293929184019161099d90613475565b80601f01602080910402602001604051908101604052809291908181526020018280546109c990613475565b8015610a165780601f106109eb57610100808354040283529160200191610a16565b820191906000526020600020905b8154815290600101906020018083116109f957829003601f168201915b50505091835250506003828101546001600160a01b0381166020840152604090920191600160a01b900460ff1690811115610a5357610a536134e1565b6003811115610a6457610a646134e1565b815260048201546001600160a01b03166020820152600582018054604090920191610a8e90613475565b80601f0160208091040260200160405190810160405280929190818152602001828054610aba90613475565b8015610b075780601f10610adc57610100808354040283529160200191610b07565b820191906000526020600020905b815481529060010190602001808311610aea57829003601f168201915b5050509183525050600682015462ffffff81166020830152630100000090046001600160a01b03166040808301919091528051610140810191829052606090920191906007840190600a9082845b815481526020019060010190808311610b55575050505050815250509050826001600160a01b031681602001516001600160a01b031614610b965750610c1b565b600081608001516003811115610bae57610bae6134e1565b1415610bc257610bbd81611de7565b610c19565b600181608001516003811115610bda57610bda6134e1565b1415610be957610bbd81612140565b600281608001516003811115610c0157610c016134e1565b1415610c1057610bbd816121cb565b610c1981612465565b505b80610c25816134b0565b91505061092e565b600054610100900460ff1615808015610c4d5750600054600160ff909116105b80610c675750303b158015610c67575060005460ff166001145b610c835760405162461bcd60e51b81526004016104aa906132eb565b6000805460ff191660011790558015610ca6576000805461ff0019166101001790555b610cae6124a6565b801561059e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610873565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610d26600033610cf0565b610d425760405162461bcd60e51b81526004016104aa90613339565b60005b81518110156104bd576000828281518110610d6257610d626134f7565b60200260200101519050610d7581611396565b5080610d80816134b0565b915050610d45565b60fb8181548110610d9857600080fd5b60009182526020909120601190910201805460018201546002830180546001600160a01b039384169550929091169291610dd190613475565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfd90613475565b8015610e4a5780601f10610e1f57610100808354040283529160200191610e4a565b820191906000526020600020905b815481529060010190602001808311610e2d57829003601f168201915b505050506003830154600484015460058501805494956001600160a01b0380851696600160a01b90950460ff16955090921692610e8690613475565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb290613475565b8015610eff5780601f10610ed457610100808354040283529160200191610eff565b820191906000526020600020905b815481529060010190602001808311610ee257829003601f168201915b5050506006909301549192505062ffffff8116906001600160a01b0363010000009091041689565b610f32600033610cf0565b610f4e5760405162461bcd60e51b81526004016104aa90613339565b6001600160a01b038216610f945760405162461bcd60e51b815260206004820152600d60248201526c746f6b656e206973207a65726f60981b60448201526064016104aa565b6001600160a01b038116610fd95760405162461bcd60e51b815260206004820152600c60248201526b706f6f6c206973207a65726f60a01b60448201526064016104aa565b60005b60fb5481101561135c57600060fb8281548110610ffb57610ffb6134f7565b60009182526020918290206040805161014081018252601190930290910180546001600160a01b039081168452600182015416938301939093526002830180549293929184019161104b90613475565b80601f016020809104026020016040519081016040528092919081815260200182805461107790613475565b80156110c45780601f10611099576101008083540402835291602001916110c4565b820191906000526020600020905b8154815290600101906020018083116110a757829003601f168201915b50505091835250506003828101546001600160a01b0381166020840152604090920191600160a01b900460ff1690811115611101576111016134e1565b6003811115611112576111126134e1565b815260048201546001600160a01b0316602082015260058201805460409092019161113c90613475565b80601f016020809104026020016040519081016040528092919081815260200182805461116890613475565b80156111b55780601f1061118a576101008083540402835291602001916111b5565b820191906000526020600020905b81548152906001019060200180831161119857829003601f168201915b5050509183525050600682015462ffffff81166020830152630100000090046001600160a01b03166040808301919091528051610140810191829052606090920191906007840190600a9082845b815481526020019060010190808311611203575050505050815250509050836001600160a01b031681602001516001600160a01b031614801561125b5750826001600160a01b031681600001516001600160a01b0316145b156113495760fb8281548110611273576112736134f7565b60009182526020822060119091020180546001600160a01b031990811682556001820180549091169055906112ab6002830182612a32565b6003820180546001600160a81b03191690556004820180546001600160a01b03191690556112dd600583016000612a32565b6006820180546001600160b81b03191690556112fd600783016000612a6c565b5050604080516001600160a01b038087168252851660208201527f68e2e4dc27ec3ffea1ce098b4fe6d29f6a1e663455d9a77a3bc859cc67027a2191015b60405180910390a150505050565b5080611354816134b0565b915050610fdc565b5060405162461bcd60e51b815260206004820152600e60248201526d1a5d195b481b9bdd08199bdd5b9960921b60448201526064016104aa565b6113a1600033610cf0565b6113bd5760405162461bcd60e51b81526004016104aa90613339565b60208101516001600160a01b03166114075760405162461bcd60e51b815260206004820152600d60248201526c746f6b656e206973207a65726f60981b60448201526064016104aa565b80516001600160a01b031661144d5760405162461bcd60e51b815260206004820152600c60248201526b706f6f6c206973207a65726f60a01b60448201526064016104aa565b600081608001516003811115611465576114656134e1565b14156114b75760a08101516001600160a01b03166114b25760405162461bcd60e51b815260206004820152600a602482015269746f206973207a65726f60b01b60448201526064016104aa565b61151f565b6002816080015160038111156114cf576114cf6134e1565b141561151f5760608101516001600160a01b031661151f5760405162461bcd60e51b815260206004820152600d60248201526c6272696265206973207a65726f60981b60448201526064016104aa565b600160005b60fb5481101561192057600060fb8281548110611543576115436134f7565b60009182526020918290206040805161014081018252601190930290910180546001600160a01b039081168452600182015416938301939093526002830180549293929184019161159390613475565b80601f01602080910402602001604051908101604052809291908181526020018280546115bf90613475565b801561160c5780601f106115e15761010080835404028352916020019161160c565b820191906000526020600020905b8154815290600101906020018083116115ef57829003601f168201915b50505091835250506003828101546001600160a01b0381166020840152604090920191600160a01b900460ff1690811115611649576116496134e1565b600381111561165a5761165a6134e1565b815260048201546001600160a01b0316602082015260058201805460409092019161168490613475565b80601f01602080910402602001604051908101604052809291908181526020018280546116b090613475565b80156116fd5780601f106116d2576101008083540402835291602001916116fd565b820191906000526020600020905b8154815290600101906020018083116116e057829003601f168201915b5050509183525050600682015462ffffff81166020830152630100000090046001600160a01b03166040808301919091528051610140810191829052606090920191906007840190600a9082845b81548152602001906001019080831161174b57505050505081525050905083602001516001600160a01b031681602001516001600160a01b03161480156117a05750835181516001600160a01b039081169116145b1561190d578360fb83815481106117b9576117b96134f7565b6000918252602091829020835160119092020180546001600160a01b039283166001600160a01b0319918216178255848401516001830180549190941691161790915560408301518051919261181792600285019290910190612a7b565b506060820151600380830180546001600160a01b039093166001600160a01b031984168117825560808601519391926001600160a81b03199092161790600160a01b90849081111561186b5761186b6134e1565b021790555060a08201516004820180546001600160a01b0319166001600160a01b0390921691909117905560c082015180516118b1916005840191602090910190612a7b565b5060e08201516006820180546101008501516001600160a01b03166301000000026001600160b81b031990911662ffffff90931692909217919091179055610120820151611905906007830190600a612aff565b506000945050505b5080611918816134b0565b915050611524565b508015611adf5760fb805460018101825560009190915282517f3e7257b7272bb46d49cd6019b04ddee20da7c0cb13f7c1ec3391291b2ccebabc601190920291820180546001600160a01b03199081166001600160a01b039384161782556020808701517f3e7257b7272bb46d49cd6019b04ddee20da7c0cb13f7c1ec3391291b2ccebabd86018054909316941693909317905560408501518051869492936119ed937f3e7257b7272bb46d49cd6019b04ddee20da7c0cb13f7c1ec3391291b2ccebabe01920190612a7b565b506060820151600380830180546001600160a01b039093166001600160a01b031984168117825560808601519391926001600160a81b03199092161790600160a01b908490811115611a4157611a416134e1565b021790555060a08201516004820180546001600160a01b0319166001600160a01b0390921691909117905560c08201518051611a87916005840191602090910190612a7b565b5060e08201516006820180546101008501516001600160a01b03166301000000026001600160b81b031990911662ffffff90931692909217919091179055610120820151611adb906007830190600a612aff565b5050505b602082015182516040517f2ab4ebfadf1dbb6985345a1d09dabe17cafc9f765b05fc738368c0ab2886ab0392611b2b9290916001600160a01b0392831681529116602082015260400190565b60405180910390a15050565b600082815260656020526040902060010154611b5281611b6b565b6104398383611bfb565b6001600160a01b03163b151590565b61059e8133612586565b611b7f8282610cf0565b6104bd5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611bb73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611c058282610cf0565b156104bd5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006104bd81611b6b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611ca057610439836125df565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cd957600080fd5b505afa925050508015611d09575060408051601f3d908101601f19168201909252611d0691810190612f37565b60015b611d6c5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016104aa565b6000805160206135328339815191528114611ddb5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016104aa565b5061043983838361267b565b60208101516040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611e2e57600080fd5b505afa158015611e42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e669190612f37565b835160405163bc25cf7760e01b81523060048201529192506001600160a01b03169063bc25cf7790602401600060405180830381600087803b158015611eab57600080fd5b505af1158015611ebf573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508391506001600160a01b038516906370a082319060240160206040518083038186803b158015611f0757600080fd5b505afa158015611f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3f9190612f37565b611f49919061341b565b9050600081156121395760e085015162ffffff16156120665760648560e0015162ffffff1683611f7991906133fc565b611f8391906133da565b9050611f8f818361341b565b915080156120665761010085015160405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529085169063a9059cbb90604401602060405180830381600087803b158015611fe857600080fd5b505af1158015611ffc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120209190612f01565b506000805160206135528339815191528560c00151866040015187600001518860200151858a610100015160405161205d969594939291906131cb565b60405180910390a15b81156121395760a085015160405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490529085169063a9059cbb90604401602060405180830381600087803b1580156120bc57600080fd5b505af11580156120d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f49190612f01565b506000805160206135528339815191528560c00151866040015187600001518860200151868a60a00151604051612130969594939291906131cb565b60405180910390a15b5050505050565b80600001516001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561217f57600080fd5b505af1158015612193573d6000803e3d6000fd5b50505060c08201516040808401518451602086015192516000805160206135528339815191529550610873949390600090819061320f565b60208101516040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561221257600080fd5b505afa158015612226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224a9190612f37565b835160405163bc25cf7760e01b81523060048201529192506001600160a01b03169063bc25cf7790602401600060405180830381600087803b15801561228f57600080fd5b505af11580156122a3573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508391506001600160a01b038516906370a082319060240160206040518083038186803b1580156122eb57600080fd5b505afa1580156122ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123239190612f37565b61232d919061341b565b9050801561245f57606084015160405163095ea7b360e01b81526001600160a01b039182166004820152602481018390529084169063095ea7b390604401602060405180830381600087803b15801561238557600080fd5b505af1158015612399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bd9190612f01565b506060840151602085015160405163b66503cf60e01b81526001600160a01b0391821660048201526024810184905291169063b66503cf90604401600060405180830381600087803b15801561241257600080fd5b505af1158015612426573d6000803e3d6000fd5b50505060c08501516040808701518751602089015160608a01519351600080516020613552833981519152965061133b95948891613152565b50505050565b60405162461bcd60e51b815260206004820152601660248201527510dd5cdd1bdb481b9bdd081a5b5c1b195b595b9d195960521b60448201526064016104aa565b600054610100900460ff16158080156124c65750600054600160ff909116105b806124e05750303b1580156124e0575060005460ff166001145b6124fc5760405162461bcd60e51b81526004016104aa906132eb565b6000805460ff19166001179055801561251f576000805461ff0019166101001790555b6125276126a0565b61252f6126a0565b61253a600033611b75565b60fc805460ff19169055801561059e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610873565b6125908282610cf0565b6104bd5761259d8161270b565b6125a883602061271d565b6040516020016125b9929190613022565b60408051601f198184030181529082905262461bcd60e51b82526104aa9160040161313f565b6001600160a01b0381163b61264c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016104aa565b60008051602061353283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612684836128c0565b6000825111806126915750805b156104395761245f8383612900565b600054610100900460ff166107215760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104aa565b606061040e6001600160a01b03831660145b6060600061272c8360026133fc565b6127379060026133c2565b67ffffffffffffffff81111561274f5761274f61350d565b6040519080825280601f01601f191660200182016040528015612779576020820181803683370190505b509050600360fc1b81600081518110612794576127946134f7565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106127c3576127c36134f7565b60200101906001600160f81b031916908160001a90535060006127e78460026133fc565b6127f29060016133c2565b90505b600181111561286a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612826576128266134f7565b1a60f81b82828151811061283c5761283c6134f7565b60200101906001600160f81b031916908160001a90535060049490941c936128638161345e565b90506127f5565b5083156128b95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104aa565b9392505050565b6128c9816125df565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6129685760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016104aa565b600080846001600160a01b0316846040516129839190613006565b600060405180830381855af49150503d80600081146129be576040519150601f19603f3d011682016040523d82523d6000602084013e6129c3565b606091505b50915091506129eb8282604051806060016040528060278152602001613572602791396129f4565b95945050505050565b60608315612a035750816128b9565b6128b98383815115612a185781518083602001fd5b8060405162461bcd60e51b81526004016104aa919061313f565b508054612a3e90613475565b6000825580601f10612a4e575050565b601f01602090049060005260206000209081019061059e9190612b2c565b5061059e90600a810190612b2c565b828054612a8790613475565b90600052602060002090601f016020900481019282612aa95760008555612aef565b82601f10612ac257805160ff1916838001178555612aef565b82800160010185558215612aef579182015b82811115612aef578251825591602001919060010190612ad4565b50612afb929150612b2c565b5090565b82600a8101928215612aef5791602002820182811115612aef578251825591602001919060010190612ad4565b5b80821115612afb5760008155600101612b2d565b600067ffffffffffffffff831115612b5b57612b5b61350d565b612b6e601f8401601f1916602001613391565b9050828152838383011115612b8257600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b0381168114612bb057600080fd5b919050565b600082601f830112612bc657600080fd5b60405161014080820182811067ffffffffffffffff82111715612beb57612beb61350d565b6040528184828101871015612bff57600080fd5b600092505b600a831015612c2457803582526001929092019160209182019101612c04565b509195945050505050565b803560048110612bb057600080fd5b600082601f830112612c4f57600080fd5b6128b983833560208501612b41565b60006102608284031215612c7157600080fd5b612c79613367565b9050612c8482612b99565b8152612c9260208301612b99565b6020820152604082013567ffffffffffffffff80821115612cb257600080fd5b612cbe85838601612c3e565b6040840152612ccf60608501612b99565b6060840152612ce060808501612c2f565b6080840152612cf160a08501612b99565b60a084015260c0840135915080821115612d0a57600080fd5b50612d1784828501612c3e565b60c083015250612d2960e08301612d59565b60e0820152610100612d3c818401612b99565b90820152610120612d4f84848301612bb5565b9082015292915050565b803562ffffff81168114612bb057600080fd5b600060208284031215612d7e57600080fd5b6128b982612b99565b60008060408385031215612d9a57600080fd5b612da383612b99565b9150612db160208401612b99565b90509250929050565b60008060408385031215612dcd57600080fd5b612dd683612b99565b9150602083013567ffffffffffffffff811115612df257600080fd5b8301601f81018513612e0357600080fd5b612e1285823560208401612b41565b9150509250929050565b60006020808385031215612e2f57600080fd5b823567ffffffffffffffff80821115612e4757600080fd5b818501915085601f830112612e5b57600080fd5b813581811115612e6d57612e6d61350d565b8060051b612e7c858201613391565b8281528581019085870183870188018b1015612e9757600080fd5b60009350835b85811015612ed457813587811115612eb3578586fd5b612ec18d8b838c0101612c5e565b8552509288019290880190600101612e9d565b50909a9950505050505050505050565b600060208284031215612ef657600080fd5b81356128b981613523565b600060208284031215612f1357600080fd5b81516128b981613523565b600060208284031215612f3057600080fd5b5035919050565b600060208284031215612f4957600080fd5b5051919050565b60008060408385031215612f6357600080fd5b82359150612db160208401612b99565b600060208284031215612f8557600080fd5b81356001600160e01b0319811681146128b957600080fd5b600060208284031215612faf57600080fd5b813567ffffffffffffffff811115612fc657600080fd5b612fd284828501612c5e565b949350505050565b60008151808452612ff2816020860160208601613432565b601f01601f19169290920160200192915050565b60008251613018818460208701613432565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161305a816017850160208801613432565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161308b816028840160208801613432565b01602801949350505050565b6001600160a01b038a811682528981166020830152610120604083018190526000916130c58483018c612fda565b9150808a166060850152600489106130ed57634e487b7160e01b600052602160045260246000fd5b60808401899052871660a084015282810360c084015261310d8187612fda565b91505061312160e083018562ffffff169052565b6001600160a01b0383166101008301529a9950505050505050505050565b6020815260006128b96020830184612fda565b60e08152600061316560e0830189612fda565b8281038060208501526005825264427269626560d81b6020830152604081016040850152506131976040820189612fda565b6001600160a01b0397881660608501529587166080840152505060a081019290925290921660c09092019190915292915050565b60e0815260006131de60e0830189612fda565b8281038060208501526004825263536b696d60e01b6020830152604081016040850152506131976040820189612fda565b60e08152600061322260e0830189612fda565b828103806020850152600482526353796e6360e01b6020830152604081016040850152506131976040820189612fda565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b604051610140810167ffffffffffffffff8111828210171561338b5761338b61350d565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156133ba576133ba61350d565b604052919050565b600082198211156133d5576133d56134cb565b500190565b6000826133f757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613416576134166134cb565b500290565b60008282101561342d5761342d6134cb565b500390565b60005b8381101561344d578181015183820152602001613435565b8381111561245f5750506000910152565b60008161346d5761346d6134cb565b506000190190565b600181811c9082168061348957607f821691505b602082108114156134aa57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156134c4576134c46134cb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461059e57600080fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbccb414e813f34d59db194a1937a70c199f2a691ccd6ee32704df2b38170acb6ed416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fb23cd905bb7c8301b9e429d1758edec0820032bcc3630f8e1a2c4fbeecf40ca64736f6c63430008060033",
  "deployedBytecode": "0x60806040526004361061012a5760003560e01c80636e28e3d5116100ab578063bd0f10531161006f578063bd0f1053146102fa578063bfb231d21461032e578063c53963e614610363578063d0b11c1e14610383578063d547741f146103a3578063ee070805146103c357600080fd5b80636e28e3d5146102705780638129fc1c1461029057806391d14854146102a55780639d433fb5146102c5578063a217fddf146102e557600080fd5b80634f1ef286116100f25780634f1ef2861461020457806352d1902d146102175780636408af7a1461022c5780636bc828391461023b5780636c5a7d1e1461025057600080fd5b806301ffc9a71461012f578063248a9ca3146101645780632f2ff15d146101a257806336568abe146101c45780633659cfe6146101e4575b600080fd5b34801561013b57600080fd5b5061014f61014a366004612f73565b6103dd565b60405190151581526020015b60405180910390f35b34801561017057600080fd5b5061019461017f366004612f1e565b60009081526065602052604090206001015490565b60405190815260200161015b565b3480156101ae57600080fd5b506101c26101bd366004612f50565b610414565b005b3480156101d057600080fd5b506101c26101df366004612f50565b61043e565b3480156101f057600080fd5b506101c26101ff366004612d6c565b6104c1565b6101c2610212366004612dba565b6105a1565b34801561022357600080fd5b5061019461066e565b34801561023857600080fd5b50005b34801561024757600080fd5b506101c2610723565b34801561025c57600080fd5b506101c261026b366004612ee4565b610809565b34801561027c57600080fd5b506101c261028b366004612d6c565b61087e565b34801561029c57600080fd5b506101c2610c2d565b3480156102b157600080fd5b5061014f6102c0366004612f50565b610cf0565b3480156102d157600080fd5b506101c26102e0366004612e1c565b610d1b565b3480156102f157600080fd5b50610194600081565b34801561030657600080fd5b506101947f3eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2d81565b34801561033a57600080fd5b5061034e610349366004612f1e565b610d88565b60405161015b99989796959493929190613097565b34801561036f57600080fd5b506101c261037e366004612d87565b610f27565b34801561038f57600080fd5b506101c261039e366004612f9d565b611396565b3480156103af57600080fd5b506101c26103be366004612f50565b611b37565b3480156103cf57600080fd5b5060fc5461014f9060ff1681565b60006001600160e01b03198216637965db0b60e01b148061040e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526065602052604090206001015461042f81611b6b565b6104398383611b75565b505050565b6001600160a01b03811633146104b35760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104bd8282611bfb565b5050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561050a5760405162461bcd60e51b81526004016104aa90613253565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610553600080516020613532833981519152546001600160a01b031690565b6001600160a01b0316146105795760405162461bcd60e51b81526004016104aa9061329f565b61058281611c62565b6040805160008082526020820190925261059e91839190611c6d565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156105ea5760405162461bcd60e51b81526004016104aa90613253565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610633600080516020613532833981519152546001600160a01b031690565b6001600160a01b0316146106595760405162461bcd60e51b81526004016104aa9061329f565b61066282611c62565b6104bd82826001611c6d565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461070e5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016104aa565b5060008051602061353283398151915290565b565b61072e600033610cf0565b61074a5760405162461bcd60e51b81526004016104aa90613339565b60005b60fb5481101561059e5760fb818154811061076a5761076a6134f7565b60009182526020822060119091020180546001600160a01b031990811682556001820180549091169055906107a26002830182612a32565b6003820180546001600160a81b03191690556004820180546001600160a01b03191690556107d4600583016000612a32565b6006820180546001600160b81b03191690556107f4600783016000612a6c565b50508080610801906134b0565b91505061074d565b610814600033610cf0565b6108305760405162461bcd60e51b81526004016104aa90613339565b60fc805460ff191682151590811790915560405160ff909116151581527f0e836a283085867e84aa4dfd94164de8ce61ee6d9e57dfae5e0fcf1eff8f268c906020015b60405180910390a150565b6108a87f3eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2d33610cf0565b6108f45760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f74207468652045584348414e474552000000000060448201526064016104aa565b60fc5460ff161561092b576040517f2db5145a2d675741edae5a00c79aee42925aec079cd653aaa2745197e860b98e90600090a150565b60005b60fb548110156104bd57600060fb828154811061094d5761094d6134f7565b60009182526020918290206040805161014081018252601190930290910180546001600160a01b039081168452600182015416938301939093526002830180549293929184019161099d90613475565b80601f01602080910402602001604051908101604052809291908181526020018280546109c990613475565b8015610a165780601f106109eb57610100808354040283529160200191610a16565b820191906000526020600020905b8154815290600101906020018083116109f957829003601f168201915b50505091835250506003828101546001600160a01b0381166020840152604090920191600160a01b900460ff1690811115610a5357610a536134e1565b6003811115610a6457610a646134e1565b815260048201546001600160a01b03166020820152600582018054604090920191610a8e90613475565b80601f0160208091040260200160405190810160405280929190818152602001828054610aba90613475565b8015610b075780601f10610adc57610100808354040283529160200191610b07565b820191906000526020600020905b815481529060010190602001808311610aea57829003601f168201915b5050509183525050600682015462ffffff81166020830152630100000090046001600160a01b03166040808301919091528051610140810191829052606090920191906007840190600a9082845b815481526020019060010190808311610b55575050505050815250509050826001600160a01b031681602001516001600160a01b031614610b965750610c1b565b600081608001516003811115610bae57610bae6134e1565b1415610bc257610bbd81611de7565b610c19565b600181608001516003811115610bda57610bda6134e1565b1415610be957610bbd81612140565b600281608001516003811115610c0157610c016134e1565b1415610c1057610bbd816121cb565b610c1981612465565b505b80610c25816134b0565b91505061092e565b600054610100900460ff1615808015610c4d5750600054600160ff909116105b80610c675750303b158015610c67575060005460ff166001145b610c835760405162461bcd60e51b81526004016104aa906132eb565b6000805460ff191660011790558015610ca6576000805461ff0019166101001790555b610cae6124a6565b801561059e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610873565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610d26600033610cf0565b610d425760405162461bcd60e51b81526004016104aa90613339565b60005b81518110156104bd576000828281518110610d6257610d626134f7565b60200260200101519050610d7581611396565b5080610d80816134b0565b915050610d45565b60fb8181548110610d9857600080fd5b60009182526020909120601190910201805460018201546002830180546001600160a01b039384169550929091169291610dd190613475565b80601f0160208091040260200160405190810160405280929190818152602001828054610dfd90613475565b8015610e4a5780601f10610e1f57610100808354040283529160200191610e4a565b820191906000526020600020905b815481529060010190602001808311610e2d57829003601f168201915b505050506003830154600484015460058501805494956001600160a01b0380851696600160a01b90950460ff16955090921692610e8690613475565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb290613475565b8015610eff5780601f10610ed457610100808354040283529160200191610eff565b820191906000526020600020905b815481529060010190602001808311610ee257829003601f168201915b5050506006909301549192505062ffffff8116906001600160a01b0363010000009091041689565b610f32600033610cf0565b610f4e5760405162461bcd60e51b81526004016104aa90613339565b6001600160a01b038216610f945760405162461bcd60e51b815260206004820152600d60248201526c746f6b656e206973207a65726f60981b60448201526064016104aa565b6001600160a01b038116610fd95760405162461bcd60e51b815260206004820152600c60248201526b706f6f6c206973207a65726f60a01b60448201526064016104aa565b60005b60fb5481101561135c57600060fb8281548110610ffb57610ffb6134f7565b60009182526020918290206040805161014081018252601190930290910180546001600160a01b039081168452600182015416938301939093526002830180549293929184019161104b90613475565b80601f016020809104026020016040519081016040528092919081815260200182805461107790613475565b80156110c45780601f10611099576101008083540402835291602001916110c4565b820191906000526020600020905b8154815290600101906020018083116110a757829003601f168201915b50505091835250506003828101546001600160a01b0381166020840152604090920191600160a01b900460ff1690811115611101576111016134e1565b6003811115611112576111126134e1565b815260048201546001600160a01b0316602082015260058201805460409092019161113c90613475565b80601f016020809104026020016040519081016040528092919081815260200182805461116890613475565b80156111b55780601f1061118a576101008083540402835291602001916111b5565b820191906000526020600020905b81548152906001019060200180831161119857829003601f168201915b5050509183525050600682015462ffffff81166020830152630100000090046001600160a01b03166040808301919091528051610140810191829052606090920191906007840190600a9082845b815481526020019060010190808311611203575050505050815250509050836001600160a01b031681602001516001600160a01b031614801561125b5750826001600160a01b031681600001516001600160a01b0316145b156113495760fb8281548110611273576112736134f7565b60009182526020822060119091020180546001600160a01b031990811682556001820180549091169055906112ab6002830182612a32565b6003820180546001600160a81b03191690556004820180546001600160a01b03191690556112dd600583016000612a32565b6006820180546001600160b81b03191690556112fd600783016000612a6c565b5050604080516001600160a01b038087168252851660208201527f68e2e4dc27ec3ffea1ce098b4fe6d29f6a1e663455d9a77a3bc859cc67027a2191015b60405180910390a150505050565b5080611354816134b0565b915050610fdc565b5060405162461bcd60e51b815260206004820152600e60248201526d1a5d195b481b9bdd08199bdd5b9960921b60448201526064016104aa565b6113a1600033610cf0565b6113bd5760405162461bcd60e51b81526004016104aa90613339565b60208101516001600160a01b03166114075760405162461bcd60e51b815260206004820152600d60248201526c746f6b656e206973207a65726f60981b60448201526064016104aa565b80516001600160a01b031661144d5760405162461bcd60e51b815260206004820152600c60248201526b706f6f6c206973207a65726f60a01b60448201526064016104aa565b600081608001516003811115611465576114656134e1565b14156114b75760a08101516001600160a01b03166114b25760405162461bcd60e51b815260206004820152600a602482015269746f206973207a65726f60b01b60448201526064016104aa565b61151f565b6002816080015160038111156114cf576114cf6134e1565b141561151f5760608101516001600160a01b031661151f5760405162461bcd60e51b815260206004820152600d60248201526c6272696265206973207a65726f60981b60448201526064016104aa565b600160005b60fb5481101561192057600060fb8281548110611543576115436134f7565b60009182526020918290206040805161014081018252601190930290910180546001600160a01b039081168452600182015416938301939093526002830180549293929184019161159390613475565b80601f01602080910402602001604051908101604052809291908181526020018280546115bf90613475565b801561160c5780601f106115e15761010080835404028352916020019161160c565b820191906000526020600020905b8154815290600101906020018083116115ef57829003601f168201915b50505091835250506003828101546001600160a01b0381166020840152604090920191600160a01b900460ff1690811115611649576116496134e1565b600381111561165a5761165a6134e1565b815260048201546001600160a01b0316602082015260058201805460409092019161168490613475565b80601f01602080910402602001604051908101604052809291908181526020018280546116b090613475565b80156116fd5780601f106116d2576101008083540402835291602001916116fd565b820191906000526020600020905b8154815290600101906020018083116116e057829003601f168201915b5050509183525050600682015462ffffff81166020830152630100000090046001600160a01b03166040808301919091528051610140810191829052606090920191906007840190600a9082845b81548152602001906001019080831161174b57505050505081525050905083602001516001600160a01b031681602001516001600160a01b03161480156117a05750835181516001600160a01b039081169116145b1561190d578360fb83815481106117b9576117b96134f7565b6000918252602091829020835160119092020180546001600160a01b039283166001600160a01b0319918216178255848401516001830180549190941691161790915560408301518051919261181792600285019290910190612a7b565b506060820151600380830180546001600160a01b039093166001600160a01b031984168117825560808601519391926001600160a81b03199092161790600160a01b90849081111561186b5761186b6134e1565b021790555060a08201516004820180546001600160a01b0319166001600160a01b0390921691909117905560c082015180516118b1916005840191602090910190612a7b565b5060e08201516006820180546101008501516001600160a01b03166301000000026001600160b81b031990911662ffffff90931692909217919091179055610120820151611905906007830190600a612aff565b506000945050505b5080611918816134b0565b915050611524565b508015611adf5760fb805460018101825560009190915282517f3e7257b7272bb46d49cd6019b04ddee20da7c0cb13f7c1ec3391291b2ccebabc601190920291820180546001600160a01b03199081166001600160a01b039384161782556020808701517f3e7257b7272bb46d49cd6019b04ddee20da7c0cb13f7c1ec3391291b2ccebabd86018054909316941693909317905560408501518051869492936119ed937f3e7257b7272bb46d49cd6019b04ddee20da7c0cb13f7c1ec3391291b2ccebabe01920190612a7b565b506060820151600380830180546001600160a01b039093166001600160a01b031984168117825560808601519391926001600160a81b03199092161790600160a01b908490811115611a4157611a416134e1565b021790555060a08201516004820180546001600160a01b0319166001600160a01b0390921691909117905560c08201518051611a87916005840191602090910190612a7b565b5060e08201516006820180546101008501516001600160a01b03166301000000026001600160b81b031990911662ffffff90931692909217919091179055610120820151611adb906007830190600a612aff565b5050505b602082015182516040517f2ab4ebfadf1dbb6985345a1d09dabe17cafc9f765b05fc738368c0ab2886ab0392611b2b9290916001600160a01b0392831681529116602082015260400190565b60405180910390a15050565b600082815260656020526040902060010154611b5281611b6b565b6104398383611bfb565b6001600160a01b03163b151590565b61059e8133612586565b611b7f8282610cf0565b6104bd5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611bb73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611c058282610cf0565b156104bd5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006104bd81611b6b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611ca057610439836125df565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cd957600080fd5b505afa925050508015611d09575060408051601f3d908101601f19168201909252611d0691810190612f37565b60015b611d6c5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016104aa565b6000805160206135328339815191528114611ddb5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016104aa565b5061043983838361267b565b60208101516040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015611e2e57600080fd5b505afa158015611e42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e669190612f37565b835160405163bc25cf7760e01b81523060048201529192506001600160a01b03169063bc25cf7790602401600060405180830381600087803b158015611eab57600080fd5b505af1158015611ebf573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508391506001600160a01b038516906370a082319060240160206040518083038186803b158015611f0757600080fd5b505afa158015611f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3f9190612f37565b611f49919061341b565b9050600081156121395760e085015162ffffff16156120665760648560e0015162ffffff1683611f7991906133fc565b611f8391906133da565b9050611f8f818361341b565b915080156120665761010085015160405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529085169063a9059cbb90604401602060405180830381600087803b158015611fe857600080fd5b505af1158015611ffc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120209190612f01565b506000805160206135528339815191528560c00151866040015187600001518860200151858a610100015160405161205d969594939291906131cb565b60405180910390a15b81156121395760a085015160405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490529085169063a9059cbb90604401602060405180830381600087803b1580156120bc57600080fd5b505af11580156120d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120f49190612f01565b506000805160206135528339815191528560c00151866040015187600001518860200151868a60a00151604051612130969594939291906131cb565b60405180910390a15b5050505050565b80600001516001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561217f57600080fd5b505af1158015612193573d6000803e3d6000fd5b50505060c08201516040808401518451602086015192516000805160206135528339815191529550610873949390600090819061320f565b60208101516040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561221257600080fd5b505afa158015612226573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224a9190612f37565b835160405163bc25cf7760e01b81523060048201529192506001600160a01b03169063bc25cf7790602401600060405180830381600087803b15801561228f57600080fd5b505af11580156122a3573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508391506001600160a01b038516906370a082319060240160206040518083038186803b1580156122eb57600080fd5b505afa1580156122ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123239190612f37565b61232d919061341b565b9050801561245f57606084015160405163095ea7b360e01b81526001600160a01b039182166004820152602481018390529084169063095ea7b390604401602060405180830381600087803b15801561238557600080fd5b505af1158015612399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bd9190612f01565b506060840151602085015160405163b66503cf60e01b81526001600160a01b0391821660048201526024810184905291169063b66503cf90604401600060405180830381600087803b15801561241257600080fd5b505af1158015612426573d6000803e3d6000fd5b50505060c08501516040808701518751602089015160608a01519351600080516020613552833981519152965061133b95948891613152565b50505050565b60405162461bcd60e51b815260206004820152601660248201527510dd5cdd1bdb481b9bdd081a5b5c1b195b595b9d195960521b60448201526064016104aa565b600054610100900460ff16158080156124c65750600054600160ff909116105b806124e05750303b1580156124e0575060005460ff166001145b6124fc5760405162461bcd60e51b81526004016104aa906132eb565b6000805460ff19166001179055801561251f576000805461ff0019166101001790555b6125276126a0565b61252f6126a0565b61253a600033611b75565b60fc805460ff19169055801561059e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610873565b6125908282610cf0565b6104bd5761259d8161270b565b6125a883602061271d565b6040516020016125b9929190613022565b60408051601f198184030181529082905262461bcd60e51b82526104aa9160040161313f565b6001600160a01b0381163b61264c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016104aa565b60008051602061353283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612684836128c0565b6000825111806126915750805b156104395761245f8383612900565b600054610100900460ff166107215760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104aa565b606061040e6001600160a01b03831660145b6060600061272c8360026133fc565b6127379060026133c2565b67ffffffffffffffff81111561274f5761274f61350d565b6040519080825280601f01601f191660200182016040528015612779576020820181803683370190505b509050600360fc1b81600081518110612794576127946134f7565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106127c3576127c36134f7565b60200101906001600160f81b031916908160001a90535060006127e78460026133fc565b6127f29060016133c2565b90505b600181111561286a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612826576128266134f7565b1a60f81b82828151811061283c5761283c6134f7565b60200101906001600160f81b031916908160001a90535060049490941c936128638161345e565b90506127f5565b5083156128b95760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104aa565b9392505050565b6128c9816125df565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6129685760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016104aa565b600080846001600160a01b0316846040516129839190613006565b600060405180830381855af49150503d80600081146129be576040519150601f19603f3d011682016040523d82523d6000602084013e6129c3565b606091505b50915091506129eb8282604051806060016040528060278152602001613572602791396129f4565b95945050505050565b60608315612a035750816128b9565b6128b98383815115612a185781518083602001fd5b8060405162461bcd60e51b81526004016104aa919061313f565b508054612a3e90613475565b6000825580601f10612a4e575050565b601f01602090049060005260206000209081019061059e9190612b2c565b5061059e90600a810190612b2c565b828054612a8790613475565b90600052602060002090601f016020900481019282612aa95760008555612aef565b82601f10612ac257805160ff1916838001178555612aef565b82800160010185558215612aef579182015b82811115612aef578251825591602001919060010190612ad4565b50612afb929150612b2c565b5090565b82600a8101928215612aef5791602002820182811115612aef578251825591602001919060010190612ad4565b5b80821115612afb5760008155600101612b2d565b600067ffffffffffffffff831115612b5b57612b5b61350d565b612b6e601f8401601f1916602001613391565b9050828152838383011115612b8257600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b0381168114612bb057600080fd5b919050565b600082601f830112612bc657600080fd5b60405161014080820182811067ffffffffffffffff82111715612beb57612beb61350d565b6040528184828101871015612bff57600080fd5b600092505b600a831015612c2457803582526001929092019160209182019101612c04565b509195945050505050565b803560048110612bb057600080fd5b600082601f830112612c4f57600080fd5b6128b983833560208501612b41565b60006102608284031215612c7157600080fd5b612c79613367565b9050612c8482612b99565b8152612c9260208301612b99565b6020820152604082013567ffffffffffffffff80821115612cb257600080fd5b612cbe85838601612c3e565b6040840152612ccf60608501612b99565b6060840152612ce060808501612c2f565b6080840152612cf160a08501612b99565b60a084015260c0840135915080821115612d0a57600080fd5b50612d1784828501612c3e565b60c083015250612d2960e08301612d59565b60e0820152610100612d3c818401612b99565b90820152610120612d4f84848301612bb5565b9082015292915050565b803562ffffff81168114612bb057600080fd5b600060208284031215612d7e57600080fd5b6128b982612b99565b60008060408385031215612d9a57600080fd5b612da383612b99565b9150612db160208401612b99565b90509250929050565b60008060408385031215612dcd57600080fd5b612dd683612b99565b9150602083013567ffffffffffffffff811115612df257600080fd5b8301601f81018513612e0357600080fd5b612e1285823560208401612b41565b9150509250929050565b60006020808385031215612e2f57600080fd5b823567ffffffffffffffff80821115612e4757600080fd5b818501915085601f830112612e5b57600080fd5b813581811115612e6d57612e6d61350d565b8060051b612e7c858201613391565b8281528581019085870183870188018b1015612e9757600080fd5b60009350835b85811015612ed457813587811115612eb3578586fd5b612ec18d8b838c0101612c5e565b8552509288019290880190600101612e9d565b50909a9950505050505050505050565b600060208284031215612ef657600080fd5b81356128b981613523565b600060208284031215612f1357600080fd5b81516128b981613523565b600060208284031215612f3057600080fd5b5035919050565b600060208284031215612f4957600080fd5b5051919050565b60008060408385031215612f6357600080fd5b82359150612db160208401612b99565b600060208284031215612f8557600080fd5b81356001600160e01b0319811681146128b957600080fd5b600060208284031215612faf57600080fd5b813567ffffffffffffffff811115612fc657600080fd5b612fd284828501612c5e565b949350505050565b60008151808452612ff2816020860160208601613432565b601f01601f19169290920160200192915050565b60008251613018818460208701613432565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161305a816017850160208801613432565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161308b816028840160208801613432565b01602801949350505050565b6001600160a01b038a811682528981166020830152610120604083018190526000916130c58483018c612fda565b9150808a166060850152600489106130ed57634e487b7160e01b600052602160045260246000fd5b60808401899052871660a084015282810360c084015261310d8187612fda565b91505061312160e083018562ffffff169052565b6001600160a01b0383166101008301529a9950505050505050505050565b6020815260006128b96020830184612fda565b60e08152600061316560e0830189612fda565b8281038060208501526005825264427269626560d81b6020830152604081016040850152506131976040820189612fda565b6001600160a01b0397881660608501529587166080840152505060a081019290925290921660c09092019190915292915050565b60e0815260006131de60e0830189612fda565b8281038060208501526004825263536b696d60e01b6020830152604081016040850152506131976040820189612fda565b60e08152600061322260e0830189612fda565b828103806020850152600482526353796e6360e01b6020830152604081016040850152506131976040820189612fda565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b604051610140810167ffffffffffffffff8111828210171561338b5761338b61350d565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156133ba576133ba61350d565b604052919050565b600082198211156133d5576133d56134cb565b500190565b6000826133f757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613416576134166134cb565b500290565b60008282101561342d5761342d6134cb565b500390565b60005b8381101561344d578181015183820152602001613435565b8381111561245f5750506000910152565b60008161346d5761346d6134cb565b506000190190565b600181811c9082168061348957607f821691505b602082108114156134aa57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156134c4576134c46134cb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811461059e57600080fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbccb414e813f34d59db194a1937a70c199f2a691ccd6ee32704df2b38170acb6ed416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fb23cd905bb7c8301b9e429d1758edec0820032bcc3630f8e1a2c4fbeecf40ca64736f6c63430008060033",
  "implementation": "0x81Ed5B65DFaA31951025d328867790b14bf8dDce",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addItem((address,address,string,address,uint8,address,string,uint24,address,uint256[10]))": {
        "notice": "Add new item to list or update exist item"
      },
      "payoutDone(address)": {
        "notice": "This function executing in payout after increase/decrease liquidity index for USD+|DAI+|ETS tokens see details: Exchange.sol | HedgeExchanger.sol"
      },
      "removeItem(address,address)": {
        "notice": "Remove item from items"
      },
      "removeItems()": {
        "notice": "Remove items"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 804,
        "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 807,
        "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1427,
        "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1706,
        "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 786,
        "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1101,
        "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2715,
        "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
        "label": "items",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_struct(Item)2706_storage)dyn_storage"
      },
      {
        "astId": 2717,
        "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
        "label": "disabled",
        "offset": 0,
        "slot": "252",
        "type": "t_bool"
      },
      {
        "astId": 3441,
        "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Item)2706_storage)dyn_storage": {
        "base": "t_struct(Item)2706_storage",
        "encoding": "dynamic_array",
        "label": "struct GlobalPayoutListener.Item[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)10_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Operation)2711": {
        "encoding": "inplace",
        "label": "enum GlobalPayoutListener.Operation",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Item)2706_storage": {
        "encoding": "inplace",
        "label": "struct GlobalPayoutListener.Item",
        "members": [
          {
            "astId": 2684,
            "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
            "label": "pool",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2686,
            "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2688,
            "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
            "label": "poolName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2690,
            "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
            "label": "bribe",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2693,
            "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
            "label": "operation",
            "offset": 20,
            "slot": "3",
            "type": "t_enum(Operation)2711"
          },
          {
            "astId": 2695,
            "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
            "label": "to",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 2697,
            "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
            "label": "dexName",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 2699,
            "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
            "label": "feePercent",
            "offset": 0,
            "slot": "6",
            "type": "t_uint24"
          },
          {
            "astId": 2701,
            "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
            "label": "feeReceiver",
            "offset": 3,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 2705,
            "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
            "label": "__gap",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)10_storage"
          }
        ],
        "numberOfBytes": "544"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/payoutlisteners/BscPayoutListener.sol:BscPayoutListener",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}