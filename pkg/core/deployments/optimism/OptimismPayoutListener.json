{
  "address": "0xdBaB307F2f19A678F90Ad309C8b34DaD3da8d334",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "AddItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "disabled",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "undoneDisabled",
          "type": "bool"
        }
      ],
      "name": "DisabledUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PayoutDoneDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "PayoutUndoneDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "dexName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "operation",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "poolName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "PoolOperation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "RemoveItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "poolName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "bribe",
              "type": "address"
            },
            {
              "internalType": "enum GlobalPayoutListener.Operation",
              "name": "operation",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "dexName",
              "type": "string"
            },
            {
              "internalType": "uint24",
              "name": "feePercent",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "feeReceiver",
              "type": "address"
            },
            {
              "internalType": "uint256[10]",
              "name": "__gap",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct GlobalPayoutListener.Item",
          "name": "item",
          "type": "tuple"
        }
      ],
      "name": "addItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "poolName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "bribe",
              "type": "address"
            },
            {
              "internalType": "enum GlobalPayoutListener.Operation",
              "name": "operation",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "dexName",
              "type": "string"
            },
            {
              "internalType": "uint24",
              "name": "feePercent",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "feeReceiver",
              "type": "address"
            },
            {
              "internalType": "uint256[10]",
              "name": "__gap",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct GlobalPayoutListener.Item[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "addItems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "findItemsByPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "poolName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "bribe",
              "type": "address"
            },
            {
              "internalType": "enum GlobalPayoutListener.Operation",
              "name": "operation",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "dexName",
              "type": "string"
            },
            {
              "internalType": "uint24",
              "name": "feePercent",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "feeReceiver",
              "type": "address"
            },
            {
              "internalType": "uint256[10]",
              "name": "__gap",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct GlobalPayoutListener.Item[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getItems",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "poolName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "bribe",
              "type": "address"
            },
            {
              "internalType": "enum GlobalPayoutListener.Operation",
              "name": "operation",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "dexName",
              "type": "string"
            },
            {
              "internalType": "uint24",
              "name": "feePercent",
              "type": "uint24"
            },
            {
              "internalType": "address",
              "name": "feeReceiver",
              "type": "address"
            },
            {
              "internalType": "uint256[10]",
              "name": "__gap",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct GlobalPayoutListener.Item[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getItemsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "items",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "poolName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "bribe",
          "type": "address"
        },
        {
          "internalType": "enum GlobalPayoutListener.Operation",
          "name": "operation",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "dexName",
          "type": "string"
        },
        {
          "internalType": "uint24",
          "name": "feePercent",
          "type": "uint24"
        },
        {
          "internalType": "address",
          "name": "feeReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optimism",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "payoutDone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "payoutUndone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "removeItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeItems",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_disabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_undoneDisabled",
          "type": "bool"
        }
      ],
      "name": "setDisabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "undoneDisabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 4,
  "solcInputHash": "fb6d216f3e01757e00fb0b32c65b12fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"AddItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"undoneDisabled\",\"type\":\"bool\"}],\"name\":\"DisabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PayoutDoneDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"PayoutUndoneDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"PoolOperation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"RemoveItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"internalType\":\"enum GlobalPayoutListener.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"feePercent\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct GlobalPayoutListener.Item\",\"name\":\"item\",\"type\":\"tuple\"}],\"name\":\"addItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"internalType\":\"enum GlobalPayoutListener.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"feePercent\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct GlobalPayoutListener.Item[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"addItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"findItemsByPool\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"internalType\":\"enum GlobalPayoutListener.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"feePercent\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct GlobalPayoutListener.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getItems\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"internalType\":\"enum GlobalPayoutListener.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"feePercent\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct GlobalPayoutListener.Item[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getItemsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"internalType\":\"enum GlobalPayoutListener.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"dexName\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"feePercent\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimism\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"payoutDone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"payoutUndone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"removeItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_disabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_undoneDisabled\",\"type\":\"bool\"}],\"name\":\"setDisabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"undoneDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addItem((address,address,string,address,uint8,address,string,uint24,address,uint256[10]))\":{\"notice\":\"Add new item to list or update exist item\"},\"addItems((address,address,string,address,uint8,address,string,uint24,address,uint256[10])[])\":{\"notice\":\"Add new items to list or update exist items\"},\"findItemsByPool(address)\":{\"notice\":\"Find items by pool address\"},\"getItems()\":{\"notice\":\"Get items\"},\"getItemsLength()\":{\"notice\":\"Get items length\"},\"payoutDone(address)\":{\"notice\":\"This function executing in payout after increase/decrease liquidity index for USD+|DAI+|ETS tokens see details: Exchange.sol | HedgeExchanger.sol\"},\"payoutUndone(address)\":{\"notice\":\"This function executing in payout before increase/decrease liquidity index for USD+|DAI+|ETS tokens see details: Exchange.sol | HedgeExchanger.sol\"},\"removeItem(address,address)\":{\"notice\":\"Remove item from items\"},\"removeItems()\":{\"notice\":\"Remove items\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/payoutlisteners/OptimismPayoutListener.sol\":\"OptimismPayoutListener\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/DefiEdge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IDefiEdgeTwapStrategy is IERC20Metadata {\\n\\n    struct Tick {\\n        int24 tickLower;\\n        int24 tickUpper;\\n    }\\n\\n    struct PartialTick {\\n        uint256 index;\\n        bool burn;\\n        uint256 amount0;\\n        uint256 amount1;\\n    }\\n\\n    struct NewTick {\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0;\\n        uint256 amount1;\\n    }\\n\\n    /**\\n     * @notice Adds liquidity to the primary range\\n     * @param _amount0 Amount of token0\\n     * @param _amount1 Amount of token1\\n     * @param _amount0Min Minimum amount of token0 to be minted\\n     * @param _amount1Min Minimum amount of token1 to be minted\\n     * @param _minShare Minimum amount of shares to be received to the user\\n     */\\n    function mint(\\n        uint256 _amount0,\\n        uint256 _amount1,\\n        uint256 _amount0Min,\\n        uint256 _amount1Min,\\n        uint256 _minShare\\n    ) external\\n    returns (\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 share\\n    );\\n\\n    /**\\n     * @notice Burn liquidity and transfer tokens back to the user\\n     * @param _shares Shares to be burned\\n     * @param _amount0Min Mimimum amount of token0 to be received\\n     * @param _amount1Min Minimum amount of token1 to be received\\n     */\\n    function burn(\\n        uint256 _shares,\\n        uint256 _amount0Min,\\n        uint256 _amount1Min\\n    ) external returns (uint256 collect0, uint256 collect1);\\n\\n    /**\\n     * @notice Rebalances the strategy\\n     * @param _swapData Swap data to perform exchange from 1inch\\n     * @param _existingTicks Array of existing ticks to rebalance\\n     * @param _newTicks New ticks in case there are any\\n     * @param _burnAll When burning into new ticks, should we burn all liquidity?\\n     */\\n    function rebalance(\\n        bytes calldata _swapData,\\n        PartialTick[] calldata _existingTicks,\\n        NewTick[] calldata _newTicks,\\n        bool _burnAll\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws funds from the contract in case of emergency\\n     * @dev only governance can withdraw the funds, it can be frozen from the factory permenently\\n     * @param _token Token to transfer\\n     * @param _to Where to transfer the token\\n     * @param _amount Amount to be withdrawn\\n     * @param _newTicks Ticks data to burn liquidity from\\n     */\\n    function emergencyWithdraw(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        NewTick[] calldata _newTicks\\n    ) external;\\n\\n    /**\\n     * @notice Burn liquidity from specific tick, used for limit orders\\n     * @param _tickIndex Index of tick which needs to be burned\\n     * @return amount0 Amount of token0's liquidity burned\\n     * @return amount1 Amount of token1's liquidity burned\\n     * @return fee0 Fee of token0 accumulated in the position which is being burned\\n     * @return fee1 Fee of token1 accumulated in the position which is being burned\\n     */\\n    function burnLiquiditySingle(uint256 _tickIndex)\\n    external\\n    returns (\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 fee0,\\n        uint256 fee1\\n    );\\n\\n    /**\\n     * @notice Swap the funds to 1Inch\\n     * @param data Swap data to perform exchange from 1inch\\n     */\\n    function swap(bytes calldata data) external;\\n\\n    /**\\n     * @dev Callback for Uniswap V3 pool.\\n     */\\n    function uniswapV3MintCallback(\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice Get's assets under management with realtime fees\\n     * @param _includeFee Whether to include pool fees in AUM or not. (passing true will also collect fees from pool)\\n     */\\n    function getAUMWithFees(bool _includeFee)\\n    external\\n    returns (\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 totalFee0,\\n        uint256 totalFee1\\n    );\\n    \\n    function pool() external view returns (address);\\n\\n    /**\\n     * @notice Claims the fee for protocol and management\\n     * Protocol receives X percentage from manager fee\\n     */\\n    function claimFee() external;\\n\\n    /**\\n     * @notice Returns the current ticks\\n     */\\n    function getTicks() external view returns (Tick[] memory);\\n}\",\"keccak256\":\"0x7fbbeacc8496cdc7bd98f19adb7e38590d33b0ee87049ee72b374b47aa997753\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/UniswapV3.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface INonfungiblePositionManager {\\n    /// @notice Emitted when liquidity is increased for a position NFT\\n    /// @dev Also emitted when a token is minted\\n    /// @param tokenId The ID of the token for which liquidity was increased\\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when liquidity is decreased for a position NFT\\n    /// @param tokenId The ID of the token for which liquidity was decreased\\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n    /// @notice Emitted when tokens are collected for a position NFT\\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\\n    /// @param tokenId The ID of the token for which underlying tokens were collected\\n    /// @param recipient The address of the account that received the collected tokens\\n    /// @param amount0 The amount of token0 owed to the position that was collected\\n    /// @param amount1 The amount of token1 owed to the position that was collected\\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(uint256 tokenId)\\n    external\\n    view\\n    returns (\\n        uint96 nonce,\\n        address operator,\\n        address token0,\\n        address token1,\\n        uint24 fee,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 liquidity,\\n        uint256 feeGrowthInside0LastX128,\\n        uint256 feeGrowthInside1LastX128,\\n        uint128 tokensOwed0,\\n        uint128 tokensOwed1\\n    );\\n\\n    struct MintParams {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        address recipient;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Creates a new position wrapped in a NFT\\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\\n    /// @return tokenId The ID of the token that represents the minted position\\n    /// @return liquidity The amount of liquidity for this position\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function mint(MintParams calldata params)\\n    external\\n    payable\\n    returns (\\n        uint256 tokenId,\\n        uint128 liquidity,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\\n    external\\n    payable\\n    returns (\\n        uint128 liquidity,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\\n    external\\n    payable\\n    returns (uint256 amount0, uint256 amount1);\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\\n\\ninterface IUniswapV3Pool {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n    external\\n    view\\n    returns (\\n        uint160 sqrtPriceX96,\\n        int24 tick,\\n        uint16 observationIndex,\\n        uint16 observationCardinality,\\n        uint16 observationCardinalityNext,\\n        uint8 feeProtocol,\\n        bool unlocked\\n    );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n    external\\n    view\\n    returns (\\n        uint128 liquidityGross,\\n        int128 liquidityNet,\\n        uint256 feeGrowthOutside0X128,\\n        uint256 feeGrowthOutside1X128,\\n        int56 tickCumulativeOutside,\\n        uint160 secondsPerLiquidityOutsideX128,\\n        uint32 secondsOutside,\\n        bool initialized\\n    );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n    external\\n    view\\n    returns (\\n        uint128 _liquidity,\\n        uint256 feeGrowthInside0LastX128,\\n        uint256 feeGrowthInside1LastX128,\\n        uint128 tokensOwed0,\\n        uint128 tokensOwed1\\n    );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n    external\\n    view\\n    returns (\\n        uint32 blockTimestamp,\\n        int56 tickCumulative,\\n        uint160 secondsPerLiquidityCumulativeX128,\\n        bool initialized\\n    );\\n\\n    function observe(uint32[] calldata secondsAgos)\\n    external\\n    view\\n    returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n}\\n\\nlibrary PositionKey {\\n    /// @dev Returns the key of the position in the core library\\n    function compute(\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(owner, tickLower, tickUpper));\\n    }\\n}\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        unchecked {\\n            uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\\n/// @title Liquidity amount functions\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    /// @notice Downcasts uint256 to uint128\\n    /// @param x The uint258 to be downcasted\\n    /// @return y The passed value, downcasted to uint128\\n    function toUint128(uint256 x) internal pure returns (uint128 y) {\\n        require((y = uint128(x)) == x);\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        uint256 intermediate = FullMath.mulDiv(sqrtRatioAX96, sqrtRatioBX96, FixedPoint96.Q96);\\n        return toUint128(FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n        return toUint128(FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96));\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioX96, amount1);\\n\\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\\n        } else {\\n            liquidity = getLiquidityForAmount1(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n        FullMath.mulDiv(\\n            uint256(liquidity) << FixedPoint96.RESOLUTION,\\n            sqrtRatioBX96 - sqrtRatioAX96,\\n            sqrtRatioBX96\\n        ) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquidity(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquidity(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\\n\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\n// TODO Updated -> see below TODO breakpoints\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        //        require(absTick <= uint256(MAX_TICK), 'T'); //TODO Need convert int24 to uint256\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\\nlibrary UnsafeMath {\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\\nlibrary SqrtPriceMath {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /// @notice Gets the next sqrt price given a delta of token0\\n    /// @dev Always rounds up, because in the exact output case (increasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (decreasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The most precise formula for this is liquidity * sqrtPX96 / (liquidity +- amount * sqrtPX96),\\n    /// if this is impossible because of overflow, we calculate liquidity / (liquidity / sqrtPX96 +- amount).\\n    /// @param sqrtPX96 The starting price, i.e. before accounting for the token0 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token0 to add or remove from virtual reserves\\n    /// @param add Whether to add or remove the amount of token0\\n    /// @return The price after adding or removing amount, depending on add\\n    function getNextSqrtPriceFromAmount0RoundingUp(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // we short circuit amount == 0 because the result is otherwise not guaranteed to equal the input price\\n        if (amount == 0) return sqrtPX96;\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n\\n        if (add) {\\n            uint256 product;\\n            if ((product = amount * sqrtPX96) / amount == sqrtPX96) {\\n                uint256 denominator = numerator1 + product;\\n                if (denominator >= numerator1)\\n                    // always fits in 160 bits\\n                    return uint160(FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator));\\n            }\\n\\n            return uint160(UnsafeMath.divRoundingUp(numerator1, (numerator1 / sqrtPX96).add(amount)));\\n        } else {\\n            uint256 product;\\n            // if the product overflows, we know the denominator underflows\\n            // in addition, we must check that the denominator does not underflow\\n            require((product = amount * sqrtPX96) / amount == sqrtPX96 && numerator1 > product);\\n            uint256 denominator = numerator1 - product;\\n            return FullMath.mulDivRoundingUp(numerator1, sqrtPX96, denominator).toUint160();\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given a delta of token1\\n    /// @dev Always rounds down, because in the exact output case (decreasing price) we need to move the price at least\\n    /// far enough to get the desired output amount, and in the exact input case (increasing price) we need to move the\\n    /// price less in order to not send too much output.\\n    /// The formula we compute is within <1 wei of the lossless version: sqrtPX96 +- amount / liquidity\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the token1 delta\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amount How much of token1 to add, or remove, from virtual reserves\\n    /// @param add Whether to add, or remove, the amount of token1\\n    /// @return The price after adding or removing `amount`\\n    function getNextSqrtPriceFromAmount1RoundingDown(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amount,\\n        bool add\\n    ) internal pure returns (uint160) {\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\n        // in both cases, avoid a mulDiv for most inputs\\n        if (add) {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? (amount << FixedPoint96.RESOLUTION) / liquidity\\n                        : FullMath.mulDiv(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            return uint256(sqrtPX96).add(quotient).toUint160();\\n        } else {\\n            uint256 quotient =\\n                (\\n                    amount <= type(uint160).max\\n                        ? UnsafeMath.divRoundingUp(amount << FixedPoint96.RESOLUTION, liquidity)\\n                        : FullMath.mulDivRoundingUp(amount, FixedPoint96.Q96, liquidity)\\n                );\\n\\n            require(sqrtPX96 > quotient);\\n            // always fits 160 bits\\n            return uint160(sqrtPX96 - quotient);\\n        }\\n    }\\n\\n    /// @notice Gets the next sqrt price given an input amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\n    /// @param sqrtPX96 The starting price, i.e., before accounting for the input amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountIn How much of token0, or token1, is being swapped in\\n    /// @param zeroForOne Whether the amount in is token0 or token1\\n    /// @return sqrtQX96 The price after adding the input amount to token0 or token1\\n    function getNextSqrtPriceFromInput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountIn,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we don't pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountIn, true)\\n                : getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountIn, true);\\n    }\\n\\n    /// @notice Gets the next sqrt price given an output amount of token0 or token1\\n    /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\n    /// @param sqrtPX96 The starting price before accounting for the output amount\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param amountOut How much of token0, or token1, is being swapped out\\n    /// @param zeroForOne Whether the amount out is token0 or token1\\n    /// @return sqrtQX96 The price after removing the output amount of token0 or token1\\n    function getNextSqrtPriceFromOutput(\\n        uint160 sqrtPX96,\\n        uint128 liquidity,\\n        uint256 amountOut,\\n        bool zeroForOne\\n    ) internal pure returns (uint160 sqrtQX96) {\\n        require(sqrtPX96 > 0);\\n        require(liquidity > 0);\\n\\n        // round to make sure that we pass the target price\\n        return\\n            zeroForOne\\n                ? getNextSqrtPriceFromAmount1RoundingDown(sqrtPX96, liquidity, amountOut, false)\\n                : getNextSqrtPriceFromAmount0RoundingUp(sqrtPX96, liquidity, amountOut, false);\\n    }\\n\\n    /// @notice Gets the amount0 delta between two prices\\n    /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n    /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up or down\\n    /// @return amount0 Amount of token0 required to cover a position of size liquidity between the two passed prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount0) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        uint256 numerator1 = uint256(liquidity) << FixedPoint96.RESOLUTION;\\n        uint256 numerator2 = sqrtRatioBX96 - sqrtRatioAX96;\\n\\n        require(sqrtRatioAX96 > 0);\\n\\n        return\\n            roundUp\\n                ? UnsafeMath.divRoundingUp(\\n                    FullMath.mulDivRoundingUp(numerator1, numerator2, sqrtRatioBX96),\\n                    sqrtRatioAX96\\n                )\\n                : FullMath.mulDiv(numerator1, numerator2, sqrtRatioBX96) / sqrtRatioAX96;\\n    }\\n\\n    /// @notice Gets the amount1 delta between two prices\\n    /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The amount of usable liquidity\\n    /// @param roundUp Whether to round the amount up, or down\\n    /// @return amount1 Amount of token1 required to cover a position of size liquidity between the two passed prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity,\\n        bool roundUp\\n    ) internal pure returns (uint256 amount1) {\\n        if (sqrtRatioAX96 > sqrtRatioBX96) (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\\n\\n        return\\n            roundUp\\n                ? FullMath.mulDivRoundingUp(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96)\\n                : FullMath.mulDiv(liquidity, sqrtRatioBX96 - sqrtRatioAX96, FixedPoint96.Q96);\\n    }\\n\\n    /// @notice Helper that gets signed token0 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount0 delta\\n    /// @return amount0 Amount of token0 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount0Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount0) {\\n        return\\n            liquidity < 0\\n                ? -getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount0Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n\\n    /// @notice Helper that gets signed token1 delta\\n    /// @param sqrtRatioAX96 A sqrt price\\n    /// @param sqrtRatioBX96 Another sqrt price\\n    /// @param liquidity The change in liquidity for which to compute the amount1 delta\\n    /// @return amount1 Amount of token1 corresponding to the passed liquidityDelta between the two prices\\n    function getAmount1Delta(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        int128 liquidity\\n    ) internal pure returns (int256 amount1) {\\n        return\\n            liquidity < 0\\n                ? -getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(-liquidity), false).toInt256()\\n                : getAmount1Delta(sqrtRatioAX96, sqrtRatioBX96, uint128(liquidity), true).toInt256();\\n    }\\n}\\n\\nlibrary UniswapV3Library {\\n\\n    function singleSwap(\\n        ISwapRouter swapRouter,\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        address recipient,\\n        uint256 amountIn,\\n        uint256 amountOutMinimum\\n    ) internal returns (uint256 amountOut) {\\n\\n        IERC20(tokenIn).approve(address(swapRouter), amountIn);\\n\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n            tokenIn: tokenIn,\\n            tokenOut: tokenOut,\\n            fee: fee,\\n            recipient: recipient,\\n            amountIn: amountIn,\\n            amountOutMinimum: amountOutMinimum,\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        amountOut = swapRouter.exactInputSingle(params);\\n    }\\n\\n    function multiSwap(\\n        ISwapRouter swapRouter,\\n        address tokenIn,\\n        address tokenMid,\\n        address tokenOut,\\n        uint24 fee0,\\n        uint24 fee1,\\n        address recipient,\\n        uint256 amountIn,\\n        uint256 amountOutMinimum\\n    ) internal returns (uint256 amountOut) {\\n\\n        IERC20(tokenIn).approve(address(swapRouter), amountIn);\\n\\n        ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\n            path: abi.encodePacked(tokenIn, fee0, tokenMid, fee1, tokenOut),\\n            recipient: recipient,\\n            amountIn: amountIn,\\n            amountOutMinimum: amountOutMinimum\\n        });\\n\\n        amountOut = swapRouter.exactInput(params);\\n    }\\n\\n}\\n\\ninterface IUniswapV3Pair {\\n\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n}\\n\",\"keccak256\":\"0x3ec46f72b50b240dd1dd4fa51f99c4b917d3497c89ec3cf13bc4c5e9897b3e43\",\"license\":\"GPL-2.0-or-later\"},\"contracts/GlobalPayoutListener.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IGlobalPayoutListener.sol\\\";\\n\\n\\nabstract contract GlobalPayoutListener is IGlobalPayoutListener, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant EXCHANGER = keccak256(\\\"EXCHANGER\\\");\\n\\n    struct Item {\\n        // Unique ID = pool + token\\n        address pool;\\n        address token;\\n        string poolName;\\n        address bribe;\\n        Operation operation;\\n        address to;\\n        string dexName;\\n        uint24 feePercent;\\n        address feeReceiver;\\n        uint256[10] __gap;\\n    }\\n\\n    enum Operation {\\n        SKIM,\\n        SYNC,\\n        BRIBE,\\n        CUSTOM\\n    }\\n\\n    Item[] public items;\\n\\n    bool public disabled; // Admin can disable to executing PayoutDone\\n    bool public undoneDisabled; // Admin can disable to executing PayoutUndone\\n\\n    function __PayoutListener_init() internal initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(DEFAULT_ADMIN_ROLE)\\n    override\\n    {}\\n\\n    // ---  events\\n\\n    event AddItem(address token, address pool);\\n    event RemoveItem(address token, address pool);\\n    event PoolOperation(string dexName, string operation, string poolName, address pool, address token, uint256 amount, address to);\\n    event DisabledUpdated(bool disabled, bool undoneDisabled);\\n    event PayoutDoneDisabled();\\n    event PayoutUndoneDisabled();\\n\\n    // ---  modifiers\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyExchanger() {\\n        require(hasRole(EXCHANGER, msg.sender), \\\"Caller is not the EXCHANGER\\\");\\n        _;\\n    }\\n\\n    // --- setters\\n\\n    function setDisabled(bool _disabled, bool _undoneDisabled) external onlyAdmin {\\n        disabled = _disabled;\\n        undoneDisabled = _undoneDisabled;\\n        emit DisabledUpdated(disabled, undoneDisabled);\\n    }\\n\\n    // --- logic\\n\\n    /**\\n     * Get items\\n     */\\n    function getItems() external view returns (Item[] memory) {\\n        return items;\\n    }\\n\\n    /**\\n     * Get items length\\n     */\\n    function getItemsLength() external view returns (uint256) {\\n        return items.length;\\n    }\\n\\n    /**\\n     * Find items by pool address\\n     */\\n    function findItemsByPool(address pool) external view returns (Item[] memory) {\\n        uint256 j;\\n        for (uint256 x = 0; x < items.length; x++) {\\n            if (items[x].pool == pool) {\\n                j++;\\n            }\\n        }\\n\\n        Item[] memory foundItems = new Item[](j);\\n        uint256 p = 0;\\n        for (uint256 i = 0; i < items.length; i++) {\\n            if (items[i].pool == pool) {\\n                Item memory item = items[i];\\n                foundItems[p] = item;\\n                p++;\\n            }\\n        }\\n\\n        return foundItems;\\n    }\\n\\n    /**\\n     * Add new item to list or update exist item\\n     */\\n    function addItem(Item memory item) public onlyAdmin {\\n        require(item.token != address(0), 'token is zero');\\n        require(item.pool != address(0), 'pool is zero');\\n\\n        if (item.operation == Operation.SKIM) {\\n            require(item.to != address(0), 'to is zero');\\n        } else if (item.operation == Operation.BRIBE) {\\n            require(item.bribe != address(0), 'bribe is zero');\\n        }\\n\\n        bool isNew = true;\\n        for (uint256 x = 0; x < items.length; x++) {\\n            Item memory exitItem = items[x];\\n\\n            if (exitItem.token == item.token && exitItem.pool == item.pool) {\\n                items[x] = item;\\n                isNew = false;\\n            }\\n        }\\n\\n        if (isNew) {\\n            items.push(item);\\n        }\\n\\n        emit AddItem(item.token, item.pool);\\n    }\\n\\n    /**\\n     * Add new items to list or update exist items\\n     */\\n    function addItems(Item[] memory items) external onlyAdmin {\\n        for (uint256 x = 0; x < items.length; x++) {\\n            Item memory item = items[x];\\n            addItem(item);\\n        }\\n    }\\n\\n    /**\\n     * Remove item from items\\n     */\\n    function removeItem(address token, address pool) external onlyAdmin {\\n        require(token != address(0), 'token is zero');\\n        require(pool != address(0), 'pool is zero');\\n\\n        for (uint256 x = 0; x < items.length; x++) {\\n            Item memory exitItem = items[x];\\n\\n            if (exitItem.token == token && exitItem.pool == pool) {\\n                for (uint i = x; i < items.length - 1; i++) {\\n                    Item memory tempItem = items[i + 1];\\n                    items[i] = tempItem;\\n                }\\n                items.pop();\\n                emit RemoveItem(token, pool);\\n                return;\\n            }\\n        }\\n\\n        revert('item not found');\\n    }\\n\\n    /**\\n     * Remove items\\n     */\\n    function removeItems() external onlyAdmin {\\n        uint256 length = items.length;\\n        for (uint256 x = 0; x < length; x++) {\\n            items.pop();\\n        }\\n    }\\n\\n    /**\\n     * This function executing in payout before increase/decrease liquidity index for USD+|DAI+|ETS tokens\\n     * see details: Exchange.sol | HedgeExchanger.sol\\n     */\\n    function payoutUndone(address token) external override onlyExchanger {\\n\\n        if (undoneDisabled) {\\n            emit PayoutUndoneDisabled();\\n            return;\\n        }\\n\\n        for (uint256 x = 0; x < items.length; x++) {\\n\\n            Item memory item = items[x];\\n\\n            // Items contains all tokens then need filter by token\\n            if (item.token != token) {\\n                continue;\\n            }\\n\\n            if (item.operation == Operation.CUSTOM) {\\n                _customUndone(item);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * This function executing in payout after increase/decrease liquidity index for USD+|DAI+|ETS tokens\\n     * see details: Exchange.sol | HedgeExchanger.sol\\n     */\\n    function payoutDone(address token) external override onlyExchanger {\\n\\n        if (disabled) {\\n            emit PayoutDoneDisabled();\\n            return;\\n        }\\n\\n        for (uint256 x = 0; x < items.length; x++) {\\n\\n            Item memory item = items[x];\\n\\n            // Items contains all tokens then need filter by token\\n            if (item.token != token) {\\n                continue;\\n            }\\n\\n            if (item.operation == Operation.SYNC) {\\n                _sync(item);\\n            } else if (item.operation == Operation.SKIM) {\\n                _skim(item);\\n            } else if (item.operation == Operation.BRIBE) {\\n                _bribe(item);\\n            } else {\\n                _custom(item);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * After execute sync on pool:\\n     * - balance LP tokens == balance USD+ tokens\\n     */\\n    function _sync(Item memory item) internal {\\n        IPool(item.pool).sync();\\n        emit PoolOperation(item.dexName, 'Sync', item.poolName, item.pool, item.token, 0, address(0));\\n    }\\n\\n    /**\\n     * Skim tokens from pool and transfer profit to address (to)\\n     */\\n    function _skim(Item memory item) internal {\\n        IERC20 token = IERC20(item.token);\\n        uint256 tokenBalanceBeforeSkim = token.balanceOf(address(this));\\n        IPool(item.pool).skim(address(this));\\n        uint256 amountToken = token.balanceOf(address(this)) - tokenBalanceBeforeSkim;\\n        if (amountToken > 0) {\\n            if (item.feePercent > 0) {\\n                uint256 feeAmount = amountToken * item.feePercent / 100;\\n                amountToken -= feeAmount;\\n                if (feeAmount > 0) {\\n                    token.transfer(item.feeReceiver, feeAmount);\\n                    emit PoolOperation(item.dexName, 'Skim', item.poolName, item.pool, item.token, feeAmount, item.feeReceiver);\\n                }\\n            }\\n            if (amountToken > 0) {\\n                token.transfer(item.to, amountToken);\\n                emit PoolOperation(item.dexName, 'Skim', item.poolName, item.pool, item.token, amountToken, item.to);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Skim tokens from pool and transfer profit as bribes\\n     */\\n    function _bribe(Item memory item) internal {\\n        IERC20 token = IERC20(item.token);\\n        uint256 tokenBalanceBeforeSkim = token.balanceOf(address(this));\\n        IPool(item.pool).skim(address(this));\\n        uint256 amountToken = token.balanceOf(address(this)) - tokenBalanceBeforeSkim;\\n        if (amountToken > 0) {\\n            if (item.feePercent > 0) {\\n                uint256 feeAmount = amountToken * item.feePercent / 100;\\n                amountToken -= feeAmount;\\n                if (feeAmount > 0) {\\n                    token.transfer(item.feeReceiver, feeAmount);\\n                    emit PoolOperation(item.dexName, 'Bribe', item.poolName, item.pool, item.token, feeAmount, item.feeReceiver);\\n                }\\n            }\\n            if (amountToken > 0) {\\n                token.approve(item.bribe, amountToken);\\n                IBribe(item.bribe).notifyRewardAmount(item.token, amountToken);\\n                emit PoolOperation(item.dexName, 'Bribe', item.poolName, item.pool, item.token, amountToken, item.bribe);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Override this method for unique behavior smart-contracts.\\n     * If standard skim/sync/bribe not allow use.\\n     */\\n    function _custom(Item memory item) internal virtual {\\n        revert(\\\"Custom not implemented\\\");\\n    }\\n\\n    /**\\n     * Runs before payout for custom logic e.g. UniV3 pools.\\n     * In most cases this function must be empty.\\n     */\\n    function _customUndone(Item memory item) internal virtual {\\n    }\\n\\n\\n    uint256[49] private __gap;\\n\\n}\\n\\ninterface IPool {\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n}\\n\\ninterface IBribe {\\n    function notifyRewardAmount(address token, uint amount) external;\\n}\\n\",\"keccak256\":\"0x6d891a52e6c34108a6cbaafce303b370c5e3146067035c8a5da56097ef5ec2e2\",\"license\":\"MIT\"},\"contracts/interfaces/IGlobalPayoutListener.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\ninterface IGlobalPayoutListener {\\n\\n    function payoutUndone(address _token) external;\\n\\n    function payoutDone(address _token) external;\\n\\n}\\n\",\"keccak256\":\"0x7189a8866480a3da17def032a8b1996e41cda5710c9c1265e07999f628105d6a\",\"license\":\"MIT\"},\"contracts/payoutlisteners/OptimismPayoutListener.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../GlobalPayoutListener.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/DefiEdge.sol\\\";\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/UniswapV3.sol\\\";\\n\\ncontract OptimismPayoutListener is GlobalPayoutListener {\\n\\n    IDefiEdgeTwapStrategy.NewTick[] private defiEdgeTicks;\\n    uint256 private tokenAmount;\\n\\n    // ---  constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __PayoutListener_init();\\n    }\\n\\n    function optimism() external {\\n    }\\n\\n    function _customUndone(Item memory item) internal override {\\n\\n        if (keccak256(bytes(item.dexName)) == keccak256(bytes('DefiEdge'))) {\\n\\n            IDefiEdgeTwapStrategy strategy = IDefiEdgeTwapStrategy(item.pool);\\n            IUniswapV3Pool pool = IUniswapV3Pool(strategy.pool());\\n\\n            // save current ticks\\n            delete defiEdgeTicks;\\n            IDefiEdgeTwapStrategy.Tick[] memory ticks = strategy.getTicks();\\n            for (uint8 i = 0; i < ticks.length; i++) {\\n                int24 tickLower = ticks[i].tickLower;\\n                int24 tickUpper = ticks[i].tickUpper;\\n                (uint128 liquidity, , , , ) = pool.positions(PositionKey.compute(address(strategy), tickLower, tickUpper));\\n                (uint160 sqrtRatioX96, , , , , , ) = pool.slot0();\\n                (uint256 amount0, uint256 amount1) = LiquidityAmounts.getAmountsForLiquidity(\\n                    sqrtRatioX96,\\n                    TickMath.getSqrtRatioAtTick(tickLower),\\n                    TickMath.getSqrtRatioAtTick(tickUpper),\\n                    liquidity\\n                );\\n\\n                IDefiEdgeTwapStrategy.NewTick memory newTick = IDefiEdgeTwapStrategy.NewTick({\\n                    tickLower: tickLower,\\n                    tickUpper: tickUpper,\\n                    amount0: amount0,\\n                    amount1: amount1\\n                });\\n\\n                defiEdgeTicks.push(newTick);\\n            }\\n\\n            // remove liquidity\\n            IDefiEdgeTwapStrategy.PartialTick[] memory existingTicks;\\n            IDefiEdgeTwapStrategy.NewTick[] memory newTicks;\\n            strategy.rebalance(\\\"\\\", existingTicks, newTicks, true);\\n\\n            tokenAmount = IERC20(item.token).balanceOf(item.pool);\\n        }\\n    }\\n\\n    function _custom(Item memory item) internal override {\\n\\n        if (keccak256(bytes(item.dexName)) == keccak256(bytes('DefiEdge'))) {\\n\\n            IDefiEdgeTwapStrategy strategy = IDefiEdgeTwapStrategy(item.pool);\\n\\n            // add liquidity\\n            IDefiEdgeTwapStrategy.PartialTick[] memory existingTicks;\\n            strategy.rebalance(\\\"\\\", existingTicks, defiEdgeTicks, false);\\n\\n            // count delta\\n            uint256 delta;\\n            uint256 tokenAmountAfter = IERC20(item.token).balanceOf(item.pool);\\n            if (tokenAmountAfter > tokenAmount) {\\n                delta = tokenAmountAfter - tokenAmount;\\n            } else {\\n                delta = tokenAmount - tokenAmountAfter;\\n            }\\n\\n            emit PoolOperation(item.dexName, 'Custom', item.poolName, item.pool, item.token, delta, item.pool);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbdec6859f1aafdb0209cdd361de9aeb628792453d1ea618f506fd26f89c85515\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16158080156200003a5750600054600160ff909116105b806200006a575062000057306200014460201b620029981760201c565b1580156200006a575060005460ff166001145b620000d25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f6576000805461ff0019166101001790555b80156200013d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000153565b6001600160a01b03163b151590565b60805160601c6157fd6200018e6000396000818161064d0152818161068d01528181610d2a01528181610d6a0152610df901526157fd6000f3fe6080604052600436106101815760003560e01c80636e28e3d5116100d1578063bd0f10531161008a578063c6ff1fc011610064578063c6ff1fc01461044d578063d0b11c1e1461046c578063d547741f1461048c578063ee070805146104ac57600080fd5b8063bd0f1053146103c4578063bfb231d2146103f8578063c53963e61461042d57600080fd5b80636e28e3d51461031a5780638129fc1c1461033a57806391d148541461034f5780639d3f19c61461036f5780639d433fb51461038f578063a217fddf146103af57600080fd5b80633659cfe61161013e578063410d59cc11610118578063410d59cc146102c85780634f1ef286146102dd57806352d1902d146102f05780636bc828391461030557600080fd5b80633659cfe61461026c57806339e18a2c1461028c5780633ca34eae1461029b57600080fd5b806301ffc9a714610186578063194f4795146101bb5780631c462e97146101da578063248a9ca3146101fc5780632f2ff15d1461022c57806336568abe1461024c575b600080fd5b34801561019257600080fd5b506101a66101a1366004614ccb565b6104c6565b60405190151581526020015b60405180910390f35b3480156101c757600080fd5b5060fb545b6040519081526020016101b2565b3480156101e657600080fd5b506101fa6101f5366004614c46565b6104fd565b005b34801561020857600080fd5b506101cc610217366004614c74565b60009081526065602052604090206001015490565b34801561023857600080fd5b506101fa610247366004614ca6565b61059a565b34801561025857600080fd5b506101fa610267366004614ca6565b6105c4565b34801561027857600080fd5b506101fa6102873660046149ce565b610642565b34801561029857600080fd5b50005b3480156102a757600080fd5b506102bb6102b63660046149ce565b610724565b6040516101b29190614ff9565b3480156102d457600080fd5b506102bb610ab8565b6101fa6102eb366004614a41565b610d1f565b3480156102fc57600080fd5b506101cc610dec565b34801561031157600080fd5b506101fa610e9f565b34801561032657600080fd5b506101fa6103353660046149ce565b610f8b565b34801561034657600080fd5b506101fa61133a565b34801561035b57600080fd5b506101a661036a366004614ca6565b611404565b34801561037b57600080fd5b506101fa61038a3660046149ce565b61142f565b34801561039b57600080fd5b506101fa6103aa366004614aa4565b611787565b3480156103bb57600080fd5b506101cc600081565b3480156103d057600080fd5b506101cc7f3eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2d81565b34801561040457600080fd5b50610418610413366004614c74565b6117f4565b6040516101b299989796959493929190614f74565b34801561043957600080fd5b506101fa610448366004614a08565b611993565b34801561045957600080fd5b5060fc546101a690610100900460ff1681565b34801561047857600080fd5b506101fa610487366004614cf5565b6121de565b34801561049857600080fd5b506101fa6104a7366004614ca6565b612973565b3480156104b857600080fd5b5060fc546101a69060ff1681565b60006001600160e01b03198216637965db0b60e01b14806104f757506301ffc9a760e01b6001600160e01b03198316145b92915050565b610508600033611404565b61052d5760405162461bcd60e51b815260040161052490615360565b60405180910390fd5b60fc805461ffff191683151561ff00191617610100831515810291909117918290556040805160ff8085161515825292909304909116151560208301527f9b6a664688f9a7f55cccf4a1ab507cd483c9e3547c13d1e48f247c749ab27feb91015b60405180910390a15050565b6000828152606560205260409020600101546105b5816129a7565b6105bf83836129b1565b505050565b6001600160a01b03811633146106345760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610524565b61063e8282612a37565b5050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561068b5760405162461bcd60e51b81526004016105249061527a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106d4600080516020615761833981519152546001600160a01b031690565b6001600160a01b0316146106fa5760405162461bcd60e51b8152600401610524906152c6565b61070381612a9e565b6040805160008082526020820190925261071f91839190612aa9565b50565b565b60606000805b60fb5481101561079157836001600160a01b031660fb828154811061075157610751615711565b60009182526020909120601190910201546001600160a01b0316141561077f578161077b8161564d565b9250505b806107898161564d565b91505061072a565b506000816001600160401b038111156107ac576107ac615727565b6040519080825280602002602001820160405280156107e557816020015b6107d26145a3565b8152602001906001900390816107ca5790505b5090506000805b60fb54811015610aae57856001600160a01b031660fb828154811061081357610813615711565b60009182526020909120601190910201546001600160a01b03161415610a9c57600060fb828154811061084857610848615711565b60009182526020918290206040805161014081018252601190930290910180546001600160a01b039081168452600182015416938301939093526002830180549293929184019161089890615612565b80601f01602080910402602001604051908101604052809291908181526020018280546108c490615612565b80156109115780601f106108e657610100808354040283529160200191610911565b820191906000526020600020905b8154815290600101906020018083116108f457829003601f168201915b50505091835250506003828101546001600160a01b0381166020840152604090920191600160a01b900460ff169081111561094e5761094e6156e5565b600381111561095f5761095f6156e5565b815260048201546001600160a01b0316602082015260058201805460409092019161098990615612565b80601f01602080910402602001604051908101604052809291908181526020018280546109b590615612565b8015610a025780601f106109d757610100808354040283529160200191610a02565b820191906000526020600020905b8154815290600101906020018083116109e557829003601f168201915b5050509183525050600682015462ffffff81166020830152630100000090046001600160a01b03166040808301919091528051610140810191829052606090920191906007840190600a9082845b815481526020019060010190808311610a5057505050505081525050905080848481518110610a8157610a81615711565b60200260200101819052508280610a979061564d565b935050505b80610aa68161564d565b9150506107ec565b5090949350505050565b606060fb805480602002602001604051908101604052809291908181526020016000905b82821015610d1657600084815260209081902060408051610140810182526011860290920180546001600160a01b0390811684526001820154169383019390935260028301805492939291840191610b3390615612565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5f90615612565b8015610bac5780601f10610b8157610100808354040283529160200191610bac565b820191906000526020600020905b815481529060010190602001808311610b8f57829003601f168201915b50505091835250506003828101546001600160a01b0381166020840152604090920191600160a01b900460ff1690811115610be957610be96156e5565b6003811115610bfa57610bfa6156e5565b815260048201546001600160a01b03166020820152600582018054604090920191610c2490615612565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5090615612565b8015610c9d5780601f10610c7257610100808354040283529160200191610c9d565b820191906000526020600020905b815481529060010190602001808311610c8057829003601f168201915b5050509183525050600682015462ffffff81166020830152630100000090046001600160a01b03166040808301919091528051610140810191829052606090920191906007840190600a9082845b815481526020019060010190808311610ceb5750505050508152505081526020019060010190610adc565b50505050905090565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610d685760405162461bcd60e51b81526004016105249061527a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610db1600080516020615761833981519152546001600160a01b031690565b6001600160a01b031614610dd75760405162461bcd60e51b8152600401610524906152c6565b610de082612a9e565b61063e82826001612aa9565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610e8c5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610524565b5060008051602061576183398151915290565b610eaa600033611404565b610ec65760405162461bcd60e51b815260040161052490615360565b60fb5460005b8181101561063e5760fb805480610ee557610ee56156fb565b60008281526020812060116000199093019283020180546001600160a01b03199081168255600182018054909116905590610f2360028301826145fc565b6003820180546001600160a81b03191690556004820180546001600160a01b0319169055610f556005830160006145fc565b6006820180546001600160b81b0319169055610f75600783016000614636565b5050905580610f838161564d565b915050610ecc565b610fb57f3eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2d33611404565b6110015760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f74207468652045584348414e47455200000000006044820152606401610524565b60fc5460ff1615611038576040517f2db5145a2d675741edae5a00c79aee42925aec079cd653aaa2745197e860b98e90600090a150565b60005b60fb5481101561063e57600060fb828154811061105a5761105a615711565b60009182526020918290206040805161014081018252601190930290910180546001600160a01b03908116845260018201541693830193909352600283018054929392918401916110aa90615612565b80601f01602080910402602001604051908101604052809291908181526020018280546110d690615612565b80156111235780601f106110f857610100808354040283529160200191611123565b820191906000526020600020905b81548152906001019060200180831161110657829003601f168201915b50505091835250506003828101546001600160a01b0381166020840152604090920191600160a01b900460ff1690811115611160576111606156e5565b6003811115611171576111716156e5565b815260048201546001600160a01b0316602082015260058201805460409092019161119b90615612565b80601f01602080910402602001604051908101604052809291908181526020018280546111c790615612565b80156112145780601f106111e957610100808354040283529160200191611214565b820191906000526020600020905b8154815290600101906020018083116111f757829003601f168201915b5050509183525050600682015462ffffff81166020830152630100000090046001600160a01b03166040808301919091528051610140810191829052606090920191906007840190600a9082845b815481526020019060010190808311611262575050505050815250509050826001600160a01b031681602001516001600160a01b0316146112a35750611328565b6001816080015160038111156112bb576112bb6156e5565b14156112cf576112ca81612c23565b611326565b6000816080015160038111156112e7576112e76156e5565b14156112f6576112ca81612cae565b60028160800151600381111561130e5761130e6156e5565b141561131d576112ca81612fff565b611326816133b0565b505b806113328161564d565b91505061103b565b600054610100900460ff161580801561135a5750600054600160ff909116105b806113745750303b158015611374575060005460ff166001145b6113905760405162461bcd60e51b815260040161052490615312565b6000805460ff1916600117905580156113b3576000805461ff0019166101001790555b6113bb613567565b801561071f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6114597f3eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2d33611404565b6114a55760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f74207468652045584348414e47455200000000006044820152606401610524565b60fc54610100900460ff16156114e1576040517f7cb60b97faae660ff5fd1cb0c9f3593e5bc26ba788495af03a4a708284aa3d4d90600090a150565b60005b60fb5481101561063e57600060fb828154811061150357611503615711565b60009182526020918290206040805161014081018252601190930290910180546001600160a01b039081168452600182015416938301939093526002830180549293929184019161155390615612565b80601f016020809104026020016040519081016040528092919081815260200182805461157f90615612565b80156115cc5780601f106115a1576101008083540402835291602001916115cc565b820191906000526020600020905b8154815290600101906020018083116115af57829003601f168201915b50505091835250506003828101546001600160a01b0381166020840152604090920191600160a01b900460ff1690811115611609576116096156e5565b600381111561161a5761161a6156e5565b815260048201546001600160a01b0316602082015260058201805460409092019161164490615612565b80601f016020809104026020016040519081016040528092919081815260200182805461167090615612565b80156116bd5780601f10611692576101008083540402835291602001916116bd565b820191906000526020600020905b8154815290600101906020018083116116a057829003601f168201915b5050509183525050600682015462ffffff81166020830152630100000090046001600160a01b03166040808301919091528051610140810191829052606090920191906007840190600a9082845b81548152602001906001019080831161170b575050505050815250509050826001600160a01b031681602001516001600160a01b03161461174c5750611775565b600381608001516003811115611764576117646156e5565b141561177357611773816135fb565b505b8061177f8161564d565b9150506114e4565b611792600033611404565b6117ae5760405162461bcd60e51b815260040161052490615360565b60005b815181101561063e5760008282815181106117ce576117ce615711565b602002602001015190506117e1816121de565b50806117ec8161564d565b9150506117b1565b60fb818154811061180457600080fd5b60009182526020909120601190910201805460018201546002830180546001600160a01b03938416955092909116929161183d90615612565b80601f016020809104026020016040519081016040528092919081815260200182805461186990615612565b80156118b65780601f1061188b576101008083540402835291602001916118b6565b820191906000526020600020905b81548152906001019060200180831161189957829003601f168201915b505050506003830154600484015460058501805494956001600160a01b0380851696600160a01b90950460ff169550909216926118f290615612565b80601f016020809104026020016040519081016040528092919081815260200182805461191e90615612565b801561196b5780601f106119405761010080835404028352916020019161196b565b820191906000526020600020905b81548152906001019060200180831161194e57829003601f168201915b5050506006909301549192505062ffffff8116906001600160a01b0363010000009091041689565b61199e600033611404565b6119ba5760405162461bcd60e51b815260040161052490615360565b6001600160a01b038216611a005760405162461bcd60e51b815260206004820152600d60248201526c746f6b656e206973207a65726f60981b6044820152606401610524565b6001600160a01b038116611a455760405162461bcd60e51b815260206004820152600c60248201526b706f6f6c206973207a65726f60a01b6044820152606401610524565b60005b60fb548110156121a457600060fb8281548110611a6757611a67615711565b60009182526020918290206040805161014081018252601190930290910180546001600160a01b0390811684526001820154169383019390935260028301805492939291840191611ab790615612565b80601f0160208091040260200160405190810160405280929190818152602001828054611ae390615612565b8015611b305780601f10611b0557610100808354040283529160200191611b30565b820191906000526020600020905b815481529060010190602001808311611b1357829003601f168201915b50505091835250506003828101546001600160a01b0381166020840152604090920191600160a01b900460ff1690811115611b6d57611b6d6156e5565b6003811115611b7e57611b7e6156e5565b815260048201546001600160a01b03166020820152600582018054604090920191611ba890615612565b80601f0160208091040260200160405190810160405280929190818152602001828054611bd490615612565b8015611c215780601f10611bf657610100808354040283529160200191611c21565b820191906000526020600020905b815481529060010190602001808311611c0457829003601f168201915b5050509183525050600682015462ffffff81166020830152630100000090046001600160a01b03166040808301919091528051610140810191829052606090920191906007840190600a9082845b815481526020019060010190808311611c6f575050505050815250509050836001600160a01b031681602001516001600160a01b0316148015611cc75750826001600160a01b031681600001516001600160a01b0316145b1561219157815b60fb54611cdd906001906155b8565b8110156120a157600060fb611cf3836001615545565b81548110611d0357611d03615711565b60009182526020918290206040805161014081018252601190930290910180546001600160a01b0390811684526001820154169383019390935260028301805492939291840191611d5390615612565b80601f0160208091040260200160405190810160405280929190818152602001828054611d7f90615612565b8015611dcc5780601f10611da157610100808354040283529160200191611dcc565b820191906000526020600020905b815481529060010190602001808311611daf57829003601f168201915b50505091835250506003828101546001600160a01b0381166020840152604090920191600160a01b900460ff1690811115611e0957611e096156e5565b6003811115611e1a57611e1a6156e5565b815260048201546001600160a01b03166020820152600582018054604090920191611e4490615612565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7090615612565b8015611ebd5780601f10611e9257610100808354040283529160200191611ebd565b820191906000526020600020905b815481529060010190602001808311611ea057829003601f168201915b5050509183525050600682015462ffffff81166020830152630100000090046001600160a01b03166040808301919091528051610140810191829052606090920191906007840190600a9082845b815481526020019060010190808311611f0b5750505050508152505090508060fb8381548110611f3d57611f3d615711565b6000918252602091829020835160119092020180546001600160a01b039283166001600160a01b03199182161782558484015160018301805491909416911617909155604083015180519192611f9b92600285019290910190614645565b506060820151600380830180546001600160a01b039093166001600160a01b031984168117825560808601519391926001600160a81b03199092161790600160a01b908490811115611fef57611fef6156e5565b021790555060a08201516004820180546001600160a01b0319166001600160a01b0390921691909117905560c08201518051612035916005840191602090910190614645565b5060e08201516006820180546101008501516001600160a01b03166301000000026001600160b81b031990911662ffffff90931692909217919091179055610120820151612089906007830190600a6146c9565b509050505080806120999061564d565b915050611cce565b5060fb8054806120b3576120b36156fb565b60008281526020812060116000199093019283020180546001600160a01b031990811682556001820180549091169055906120f160028301826145fc565b6003820180546001600160a81b03191690556004820180546001600160a01b03191690556121236005830160006145fc565b6006820180546001600160b81b0319169055612143600783016000614636565b50509055604080516001600160a01b038087168252851660208201527f68e2e4dc27ec3ffea1ce098b4fe6d29f6a1e663455d9a77a3bc859cc67027a2191015b60405180910390a150505050565b508061219c8161564d565b915050611a48565b5060405162461bcd60e51b815260206004820152600e60248201526d1a5d195b481b9bdd08199bdd5b9960921b6044820152606401610524565b6121e9600033611404565b6122055760405162461bcd60e51b815260040161052490615360565b60208101516001600160a01b031661224f5760405162461bcd60e51b815260206004820152600d60248201526c746f6b656e206973207a65726f60981b6044820152606401610524565b80516001600160a01b03166122955760405162461bcd60e51b815260206004820152600c60248201526b706f6f6c206973207a65726f60a01b6044820152606401610524565b6000816080015160038111156122ad576122ad6156e5565b14156122ff5760a08101516001600160a01b03166122fa5760405162461bcd60e51b815260206004820152600a602482015269746f206973207a65726f60b01b6044820152606401610524565b612367565b600281608001516003811115612317576123176156e5565b14156123675760608101516001600160a01b03166123675760405162461bcd60e51b815260206004820152600d60248201526c6272696265206973207a65726f60981b6044820152606401610524565b600160005b60fb5481101561276857600060fb828154811061238b5761238b615711565b60009182526020918290206040805161014081018252601190930290910180546001600160a01b03908116845260018201541693830193909352600283018054929392918401916123db90615612565b80601f016020809104026020016040519081016040528092919081815260200182805461240790615612565b80156124545780601f1061242957610100808354040283529160200191612454565b820191906000526020600020905b81548152906001019060200180831161243757829003601f168201915b50505091835250506003828101546001600160a01b0381166020840152604090920191600160a01b900460ff1690811115612491576124916156e5565b60038111156124a2576124a26156e5565b815260048201546001600160a01b031660208201526005820180546040909201916124cc90615612565b80601f01602080910402602001604051908101604052809291908181526020018280546124f890615612565b80156125455780601f1061251a57610100808354040283529160200191612545565b820191906000526020600020905b81548152906001019060200180831161252857829003601f168201915b5050509183525050600682015462ffffff81166020830152630100000090046001600160a01b03166040808301919091528051610140810191829052606090920191906007840190600a9082845b81548152602001906001019080831161259357505050505081525050905083602001516001600160a01b031681602001516001600160a01b03161480156125e85750835181516001600160a01b039081169116145b15612755578360fb838154811061260157612601615711565b6000918252602091829020835160119092020180546001600160a01b039283166001600160a01b0319918216178255848401516001830180549190941691161790915560408301518051919261265f92600285019290910190614645565b506060820151600380830180546001600160a01b039093166001600160a01b031984168117825560808601519391926001600160a81b03199092161790600160a01b9084908111156126b3576126b36156e5565b021790555060a08201516004820180546001600160a01b0319166001600160a01b0390921691909117905560c082015180516126f9916005840191602090910190614645565b5060e08201516006820180546101008501516001600160a01b03166301000000026001600160b81b031990911662ffffff9093169290921791909117905561012082015161274d906007830190600a6146c9565b506000945050505b50806127608161564d565b91505061236c565b5080156129275760fb805460018101825560009190915282517f3e7257b7272bb46d49cd6019b04ddee20da7c0cb13f7c1ec3391291b2ccebabc601190920291820180546001600160a01b03199081166001600160a01b039384161782556020808701517f3e7257b7272bb46d49cd6019b04ddee20da7c0cb13f7c1ec3391291b2ccebabd8601805490931694169390931790556040850151805186949293612835937f3e7257b7272bb46d49cd6019b04ddee20da7c0cb13f7c1ec3391291b2ccebabe01920190614645565b506060820151600380830180546001600160a01b039093166001600160a01b031984168117825560808601519391926001600160a81b03199092161790600160a01b908490811115612889576128896156e5565b021790555060a08201516004820180546001600160a01b0319166001600160a01b0390921691909117905560c082015180516128cf916005840191602090910190614645565b5060e08201516006820180546101008501516001600160a01b03166301000000026001600160b81b031990911662ffffff90931692909217919091179055610120820151612923906007830190600a6146c9565b5050505b602082015182516040517f2ab4ebfadf1dbb6985345a1d09dabe17cafc9f765b05fc738368c0ab2886ab039261058e9290916001600160a01b0392831681529116602082015260400190565b60008281526065602052604090206001015461298e816129a7565b6105bf8383612a37565b6001600160a01b03163b151590565b61071f8133613abc565b6129bb8282611404565b61063e5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556129f33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612a418282611404565b1561063e5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600061063e816129a7565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612adc576105bf83613b15565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015612b1557600080fd5b505afa925050508015612b45575060408051601f3d908101601f19168201909252612b4291810190614c8d565b60015b612ba85760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610524565b6000805160206157618339815191528114612c175760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610524565b506105bf838383613bb1565b80600001516001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612c6257600080fd5b505af1158015612c76573d6000803e3d6000fd5b50505060c082015160408084015184516020860151925160008051602061578183398151915295506113f99493906000908190615236565b60208101516040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015612cf557600080fd5b505afa158015612d09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2d9190614c8d565b835160405163bc25cf7760e01b81523060048201529192506001600160a01b03169063bc25cf7790602401600060405180830381600087803b158015612d7257600080fd5b505af1158015612d86573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508391506001600160a01b038516906370a082319060240160206040518083038186803b158015612dce57600080fd5b505afa158015612de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e069190614c8d565b612e1091906155b8565b90508015612ff95760e084015162ffffff1615612f2f57600060648560e0015162ffffff1683612e409190615571565b612e4a919061555d565b9050612e5681836155b8565b91508015612f2d5761010085015160405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529085169063a9059cbb90604401602060405180830381600087803b158015612eaf57600080fd5b505af1158015612ec3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee79190614c29565b506000805160206157818339815191528560c00151866040015187600001518860200151858a6101000151604051612f24969594939291906151f2565b60405180910390a15b505b8015612ff95760a084015160405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529084169063a9059cbb90604401602060405180830381600087803b158015612f8557600080fd5b505af1158015612f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fbd9190614c29565b506000805160206157818339815191528460c00151856040015186600001518760200151858960a00151604051612183969594939291906151f2565b50505050565b60208101516040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561304657600080fd5b505afa15801561305a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307e9190614c8d565b835160405163bc25cf7760e01b81523060048201529192506001600160a01b03169063bc25cf7790602401600060405180830381600087803b1580156130c357600080fd5b505af11580156130d7573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092508391506001600160a01b038516906370a082319060240160206040518083038186803b15801561311f57600080fd5b505afa158015613133573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131579190614c8d565b61316191906155b8565b90508015612ff95760e084015162ffffff161561328057600060648560e0015162ffffff16836131919190615571565b61319b919061555d565b90506131a781836155b8565b9150801561327e5761010085015160405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529085169063a9059cbb90604401602060405180830381600087803b15801561320057600080fd5b505af1158015613214573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132389190614c29565b506000805160206157818339815191528560c00151866040015187600001518860200151858a6101000151604051613275969594939291906151ad565b60405180910390a15b505b8015612ff957606084015160405163095ea7b360e01b81526001600160a01b039182166004820152602481018390529084169063095ea7b390604401602060405180830381600087803b1580156132d657600080fd5b505af11580156132ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061330e9190614c29565b506060840151602085015160405163b66503cf60e01b81526001600160a01b0391821660048201526024810184905291169063b66503cf90604401600060405180830381600087803b15801561336357600080fd5b505af1158015613377573d6000803e3d6000fd5b50505060c08501516040808701518751602089015160608a015193516000805160206157818339815191529650612183959488916151ad565b604080518082019091526008815267446566694564676560c01b60209182015260c082015180519101207f4c04dcde20edfa51954371436cce995c111184848cfa20cb4b611561c2c4e607141561071f578051604051630f63796960e01b81526060906001600160a01b03831690630f6379699061343990849061012e90600090600401615420565b600060405180830381600087803b15801561345357600080fd5b505af1158015613467573d6000803e3d6000fd5b50505050602083015183516040516370a0823160e01b81526001600160a01b039182166004820152600092839216906370a082319060240160206040518083038186803b1580156134b757600080fd5b505afa1580156134cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134ef9190614c8d565b905061012f548111156135115761012f5461350a90826155b8565b9150613523565b8061012f5461352091906155b8565b91505b60c085015160408087015187516020890151925160008051602061578183398151915294613558949093929188908390615133565b60405180910390a15050505050565b600054610100900460ff16158080156135875750600054600160ff909116105b806135a15750303b1580156135a1575060005460ff166001145b6135bd5760405162461bcd60e51b815260040161052490615312565b6000805460ff1916600117905580156135e0576000805461ff0019166101001790555b6135e8613bd6565b6135f0613bd6565b6113bb6000336129b1565b604080518082019091526008815267446566694564676560c01b60209182015260c082015180519101207f4c04dcde20edfa51954371436cce995c111184848cfa20cb4b611561c2c4e607141561071f576000816000015190506000816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561369057600080fd5b505afa1580156136a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c891906149eb565b90506136d761012e60006146f6565b6000826001600160a01b0316633d1c387b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561371257600080fd5b505afa158015613726573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261374e9190810190614b60565b905060005b81518160ff1610156139c9576000828260ff168151811061377657613776615711565b60200260200101516000015190506000838360ff168151811061379b5761379b615711565b60200260200101516020015190506000856001600160a01b031663514ea4bf6137c5898686613c41565b6040518263ffffffff1660e01b81526004016137e391815260200190565b60a06040518083038186803b1580156137fb57600080fd5b505afa15801561380f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138339190614d29565b5050505090506000866001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b15801561387457600080fd5b505afa158015613888573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138ac9190614d80565b50505050505090506000806138d3836138c488613c9d565b6138cd88613c9d565b87614077565b604080516080810182526002998a0b815297890b602089019081529088019283526060880191825261012e8054600181018255600091909152975160039098027fbdaadd9f750d0166045bf387a364eadd28ba243e04512a47282aa5147a68e37f8101805492518b0b62ffffff90811663010000000265ffffffffffff199094169a909b0b909a169890981717909755517fbdaadd9f750d0166045bf387a364eadd28ba243e04512a47282aa5147a68e380860155505092517fbdaadd9f750d0166045bf387a364eadd28ba243e04512a47282aa5147a68e38190920191909155508190506139c181615668565b915050613753565b50606080846001600160a01b0316630f637969838360016040518463ffffffff1660e01b81526004016139fe9392919061538e565b600060405180830381600087803b158015613a1857600080fd5b505af1158015613a2c573d6000803e3d6000fd5b50505050602086015186516040516370a0823160e01b81526001600160a01b0391821660048201529116906370a082319060240160206040518083038186803b158015613a7857600080fd5b505afa158015613a8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ab09190614c8d565b61012f55505050505050565b613ac68282611404565b61063e57613ad381614113565b613ade836020614125565b604051602001613aef929190614eff565b60408051601f198184030181529082905262461bcd60e51b825261052491600401615120565b6001600160a01b0381163b613b825760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610524565b60008051602061576183398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b613bba836142c0565b600082511180613bc75750805b156105bf57612ff98383614300565b600054610100900460ff166107225760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610524565b6040516bffffffffffffffffffffffff19606085901b166020820152600283810b60e890811b60348401529083900b901b6037820152600090603a016040516020818303038152906040528051906020012090505b9392505050565b60008060008360020b12613cb4578260020b613cc1565b8260020b613cc19061569c565b9050600060018216613cd757600160801b613ce9565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615613d28576080613d23826ffff97272373d413259a46990580e213a615571565b901c90505b6004821615613d52576080613d4d826ffff2e50f5f656932ef12357cf3c7fdcc615571565b901c90505b6008821615613d7c576080613d77826fffe5caca7e10e4e61c3624eaa0941cd0615571565b901c90505b6010821615613da6576080613da1826fffcb9843d60f6159c9db58835c926644615571565b901c90505b6020821615613dd0576080613dcb826fff973b41fa98c081472e6896dfb254c0615571565b901c90505b6040821615613dfa576080613df5826fff2ea16466c96a3843ec78b326b52861615571565b901c90505b6080821615613e24576080613e1f826ffe5dee046a99a2a811c461f1969c3053615571565b901c90505b610100821615613e4f576080613e4a826ffcbe86c7900a88aedcffc83b479aa3a4615571565b901c90505b610200821615613e7a576080613e75826ff987a7253ac413176f2b074cf7815e54615571565b901c90505b610400821615613ea5576080613ea0826ff3392b0822b70005940c7a398e4b70f3615571565b901c90505b610800821615613ed0576080613ecb826fe7159475a2c29b7443b29c7fa6e889d9615571565b901c90505b611000821615613efb576080613ef6826fd097f3bdfd2022b8845ad8f792aa5825615571565b901c90505b612000821615613f26576080613f21826fa9f746462d870fdf8a65dc1f90e061e5615571565b901c90505b614000821615613f51576080613f4c826f70d869a156d2a1b890bb3df62baf32f7615571565b901c90505b618000821615613f7c576080613f77826f31be135f97d08fd981231505542fcfa6615571565b901c90505b62010000821615613fa8576080613fa3826f09aa508b5b7a84e1c677de54f3e99bc9615571565b901c90505b62020000821615613fd3576080613fce826e5d6af8dedb81196699c329225ee604615571565b901c90505b62040000821615613ffd576080613ff8826d2216e584f5fa1ea926041bedfe98615571565b901c90505b62080000821615614025576080614020826b048a170391f7dc42444e8fa2615571565b901c90505b60008460020b13156140405761403d8160001961555d565b90505b61404f64010000000082615688565b1561405b57600161405e565b60005b61406f9060ff16602083901c615545565b949350505050565b600080836001600160a01b0316856001600160a01b03161115614098579293925b846001600160a01b0316866001600160a01b0316116140c3576140bc8585856143f4565b915061410a565b836001600160a01b0316866001600160a01b031610156140fc576140e88685856143f4565b91506140f5858785614467565b905061410a565b614107858585614467565b90505b94509492505050565b60606104f76001600160a01b03831660145b60606000614134836002615571565b61413f906002615545565b6001600160401b0381111561415657614156615727565b6040519080825280601f01601f191660200182016040528015614180576020820181803683370190505b509050600360fc1b8160008151811061419b5761419b615711565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106141ca576141ca615711565b60200101906001600160f81b031916908160001a90535060006141ee846002615571565b6141f9906001615545565b90505b6001811115614271576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061422d5761422d615711565b1a60f81b82828151811061424357614243615711565b60200101906001600160f81b031916908160001a90535060049490941c9361426a816155fb565b90506141fc565b508315613c965760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610524565b6142c981613b15565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6143685760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610524565b600080846001600160a01b0316846040516143839190614ee3565b600060405180830381855af49150503d80600081146143be576040519150601f19603f3d011682016040523d82523d6000602084013e6143c3565b606091505b50915091506143eb82826040518060600160405280602781526020016157a1602791396144b1565b95945050505050565b6000826001600160a01b0316846001600160a01b03161115614414579192915b6001600160a01b03841661445d6fffffffffffffffffffffffffffffffff60601b606085901b166144458787615590565b6001600160a01b0316866001600160a01b03166144ca565b61406f919061555d565b6000826001600160a01b0316846001600160a01b03161115614487579192915b61406f6001600160801b03831661449e8686615590565b6001600160a01b0316600160601b6144ca565b606083156144c0575081613c96565b613c968383614579565b60008080600019858709858702925082811083820303915050806000141561450457600084116144f957600080fd5b508290049050613c96565b80841161451057600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b8151156145895781518083602001fd5b8060405162461bcd60e51b81526004016105249190615120565b6040805161014081018252600080825260208201819052606092820183905291810182905290608082019081526000602082018190526060604083018190528201819052608082015260a0016145f7614717565b905290565b50805461460890615612565b6000825580601f10614618575050565b601f01602090049060005260206000209081019061071f9190614736565b5061071f90600a810190614736565b82805461465190615612565b90600052602060002090601f01602090048101928261467357600085556146b9565b82601f1061468c57805160ff19168380011785556146b9565b828001600101855582156146b9579182015b828111156146b957825182559160200191906001019061469e565b506146c5929150614736565b5090565b82600a81019282156146b957916020028201828111156146b957825182559160200191906001019061469e565b508054600082556003029060005260206000209081019061071f919061474b565b604051806101400160405280600a906020820280368337509192915050565b5b808211156146c55760008155600101614737565b5b808211156146c557805465ffffffffffff19168155600060018201819055600282015560030161474c565b60006001600160401b0383111561479057614790615727565b6147a3601f8401601f19166020016154f2565b90508281528383830111156147b757600080fd5b828260208301376000602084830101529392505050565b80356147d98161573d565b919050565b600082601f8301126147ef57600080fd5b6040516101408082018281106001600160401b038211171561481357614813615727565b604052818482810187101561482757600080fd5b600092505b600a83101561484c5780358252600192909201916020918201910161482c565b509195945050505050565b8035600481106147d957600080fd5b8051600281900b81146147d957600080fd5b600082601f83011261488957600080fd5b613c9683833560208501614777565b600061026082840312156148ab57600080fd5b6148b36154a7565b90506148be826147ce565b81526148cc602083016147ce565b602082015260408201356001600160401b03808211156148eb57600080fd5b6148f785838601614878565b6040840152614908606085016147ce565b606084015261491960808501614857565b608084015261492a60a085016147ce565b60a084015260c084013591508082111561494357600080fd5b5061495084828501614878565b60c08301525061496260e083016149bb565b60e08201526101006149758184016147ce565b90820152610120614988848483016147de565b9082015292915050565b80516001600160801b03811681146147d957600080fd5b805161ffff811681146147d957600080fd5b803562ffffff811681146147d957600080fd5b6000602082840312156149e057600080fd5b8135613c968161573d565b6000602082840312156149fd57600080fd5b8151613c968161573d565b60008060408385031215614a1b57600080fd5b8235614a268161573d565b91506020830135614a368161573d565b809150509250929050565b60008060408385031215614a5457600080fd5b8235614a5f8161573d565b915060208301356001600160401b03811115614a7a57600080fd5b8301601f81018513614a8b57600080fd5b614a9a85823560208401614777565b9150509250929050565b60006020808385031215614ab757600080fd5b82356001600160401b0380821115614ace57600080fd5b818501915085601f830112614ae257600080fd5b8135614af5614af082615522565b6154f2565b80828252858201915085850189878560051b8801011115614b1557600080fd5b6000805b85811015614b5057823587811115614b2f578283fd5b614b3d8d8b838c0101614898565b8652509388019391880191600101614b19565b50919a9950505050505050505050565b60006020808385031215614b7357600080fd5b82516001600160401b03811115614b8957600080fd5b8301601f81018513614b9a57600080fd5b8051614ba8614af082615522565b80828252848201915084840188868560061b8701011115614bc857600080fd5b60009450845b84811015614c1b57604080838c031215614be6578687fd5b614bee6154d0565b614bf784614866565b8152614c04898501614866565b818a01528552938701939190910190600101614bce565b509098975050505050505050565b600060208284031215614c3b57600080fd5b8151613c9681615752565b60008060408385031215614c5957600080fd5b8235614c6481615752565b91506020830135614a3681615752565b600060208284031215614c8657600080fd5b5035919050565b600060208284031215614c9f57600080fd5b5051919050565b60008060408385031215614cb957600080fd5b823591506020830135614a368161573d565b600060208284031215614cdd57600080fd5b81356001600160e01b031981168114613c9657600080fd5b600060208284031215614d0757600080fd5b81356001600160401b03811115614d1d57600080fd5b61406f84828501614898565b600080600080600060a08688031215614d4157600080fd5b614d4a86614992565b94506020860151935060408601519250614d6660608701614992565b9150614d7460808701614992565b90509295509295909350565b600080600080600080600060e0888a031215614d9b57600080fd5b8751614da68161573d565b9650614db460208901614866565b9550614dc2604089016149a9565b9450614dd0606089016149a9565b9350614dde608089016149a9565b925060a088015160ff81168114614df457600080fd5b60c0890151909250614e0581615752565b8091505092959891949750929550565b600081518084526020808501945080840160005b83811015614e675781518051885283810151151584890152604080820151908901526060908101519088015260809096019590820190600101614e29565b509495945050505050565b8060005b600a811015612ff9578151845260209384019390910190600101614e76565b60048110614eb357634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452614ecf8160208601602086016155cf565b601f01601f19169290920160200192915050565b60008251614ef58184602087016155cf565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614f378160178501602088016155cf565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614f688160288401602088016155cf565b01602801949350505050565b6001600160a01b038a81168252898116602083015261012060408301819052600091614fa28483018c614eb7565b9150808a166060850152614fb9608085018a614e95565b80881660a085015283820360c0850152614fd38288614eb7565b925062ffffff861660e085015280851661010085015250509a9950505050505050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015614c1b57888303603f19018552815180516001600160a01b03168452610260818901516001600160a01b038116868b01525087820151818987015261506b82870182614eb7565b915050606080830151615088828801826001600160a01b03169052565b505060808083015161509c82880182614e95565b505060a0828101516001600160a01b03169086015260c080830151868303828801526150c88382614eb7565b9250505060e0808301516150e28288018262ffffff169052565b5050610100828101516001600160a01b031690860152610120918201519161510c81870184614e72565b509588019593505090860190600101615020565b602081526000613c966020830184614eb7565b60e08152600061514660e0830189614eb7565b8281038060208501526006825265437573746f6d60d01b6020830152604081016040850152506151796040820189614eb7565b6001600160a01b0397881660608501529587166080840152505060a081019290925290921660c09092019190915292915050565b60e0815260006151c060e0830189614eb7565b8281038060208501526005825264427269626560d81b6020830152604081016040850152506151796040820189614eb7565b60e08152600061520560e0830189614eb7565b8281038060208501526004825263536b696d60e01b6020830152604081016040850152506151796040820189614eb7565b60e08152600061524960e0830189614eb7565b828103806020850152600482526353796e6360e01b6020830152604081016040850152506151796040820189614eb7565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60006080808352600081840152602060a0818501526153b060a0850188614e15565b84810360408681019190915287518083528389019284019060005b8181101561540a5784518051600290810b855287820151900b8785015284810151858501526060908101519084015293850193918601916001016153cb565b50508715156060880152945061406f9350505050565b60006080808352600081840152602060a08185015261544260a0850188614e15565b60408582038187015281885480845284840191508960005284600020935060005b8181101561540a578454600281810b810b855260189190911c810b810b87850152600180870154868601529086015460608501526003909501949287019201615463565b60405161014081016001600160401b03811182821017156154ca576154ca615727565b60405290565b604080519081016001600160401b03811182821017156154ca576154ca615727565b604051601f8201601f191681016001600160401b038111828210171561551a5761551a615727565b604052919050565b60006001600160401b0382111561553b5761553b615727565b5060051b60200190565b60008219821115615558576155586156b9565b500190565b60008261556c5761556c6156cf565b500490565b600081600019048311821515161561558b5761558b6156b9565b500290565b60006001600160a01b03838116908316818110156155b0576155b06156b9565b039392505050565b6000828210156155ca576155ca6156b9565b500390565b60005b838110156155ea5781810151838201526020016155d2565b83811115612ff95750506000910152565b60008161560a5761560a6156b9565b506000190190565b600181811c9082168061562657607f821691505b6020821081141561564757634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415615661576156616156b9565b5060010190565b600060ff821660ff81141561567f5761567f6156b9565b60010192915050565b600082615697576156976156cf565b500690565b6000600160ff1b8214156156b2576156b26156b9565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461071f57600080fd5b801515811461071f57600080fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbccb414e813f34d59db194a1937a70c199f2a691ccd6ee32704df2b38170acb6ed416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203721ae05c7ea56c44074c5bafb248e39e6404b6f7019e69bdd371502750e3ab564736f6c63430008060033",
  "deployedBytecode": "",
  "implementation": "0x4CE19C33B477250FE9C50172F6125Cf480259372",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addItem((address,address,string,address,uint8,address,string,uint24,address,uint256[10]))": {
        "notice": "Add new item to list or update exist item"
      },
      "addItems((address,address,string,address,uint8,address,string,uint24,address,uint256[10])[])": {
        "notice": "Add new items to list or update exist items"
      },
      "findItemsByPool(address)": {
        "notice": "Find items by pool address"
      },
      "getItems()": {
        "notice": "Get items"
      },
      "getItemsLength()": {
        "notice": "Get items length"
      },
      "payoutDone(address)": {
        "notice": "This function executing in payout after increase/decrease liquidity index for USD+|DAI+|ETS tokens see details: Exchange.sol | HedgeExchanger.sol"
      },
      "payoutUndone(address)": {
        "notice": "This function executing in payout before increase/decrease liquidity index for USD+|DAI+|ETS tokens see details: Exchange.sol | HedgeExchanger.sol"
      },
      "removeItem(address,address)": {
        "notice": "Remove item from items"
      },
      "removeItems()": {
        "notice": "Remove items"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 804,
        "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 807,
        "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1427,
        "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1706,
        "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 786,
        "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1101,
        "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5762,
        "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
        "label": "items",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_struct(Item)5753_storage)dyn_storage"
      },
      {
        "astId": 5764,
        "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
        "label": "disabled",
        "offset": 0,
        "slot": "252",
        "type": "t_bool"
      },
      {
        "astId": 5766,
        "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
        "label": "undoneDisabled",
        "offset": 1,
        "slot": "252",
        "type": "t_bool"
      },
      {
        "astId": 6758,
        "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6852,
        "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
        "label": "defiEdgeTicks",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_struct(NewTick)2715_storage)dyn_storage"
      },
      {
        "astId": 6854,
        "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
        "label": "tokenAmount",
        "offset": 0,
        "slot": "303",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Item)5753_storage)dyn_storage": {
        "base": "t_struct(Item)5753_storage",
        "encoding": "dynamic_array",
        "label": "struct GlobalPayoutListener.Item[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(NewTick)2715_storage)dyn_storage": {
        "base": "t_struct(NewTick)2715_storage",
        "encoding": "dynamic_array",
        "label": "struct IDefiEdgeTwapStrategy.NewTick[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)10_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Operation)5758": {
        "encoding": "inplace",
        "label": "enum GlobalPayoutListener.Operation",
        "numberOfBytes": "1"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Item)5753_storage": {
        "encoding": "inplace",
        "label": "struct GlobalPayoutListener.Item",
        "members": [
          {
            "astId": 5731,
            "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
            "label": "pool",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5733,
            "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5735,
            "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
            "label": "poolName",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 5737,
            "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
            "label": "bribe",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5740,
            "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
            "label": "operation",
            "offset": 20,
            "slot": "3",
            "type": "t_enum(Operation)5758"
          },
          {
            "astId": 5742,
            "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
            "label": "to",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 5744,
            "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
            "label": "dexName",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 5746,
            "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
            "label": "feePercent",
            "offset": 0,
            "slot": "6",
            "type": "t_uint24"
          },
          {
            "astId": 5748,
            "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
            "label": "feeReceiver",
            "offset": 3,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 5752,
            "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
            "label": "__gap",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)10_storage"
          }
        ],
        "numberOfBytes": "544"
      },
      "t_struct(NewTick)2715_storage": {
        "encoding": "inplace",
        "label": "struct IDefiEdgeTwapStrategy.NewTick",
        "members": [
          {
            "astId": 2708,
            "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
            "label": "tickLower",
            "offset": 0,
            "slot": "0",
            "type": "t_int24"
          },
          {
            "astId": 2710,
            "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
            "label": "tickUpper",
            "offset": 3,
            "slot": "0",
            "type": "t_int24"
          },
          {
            "astId": 2712,
            "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
            "label": "amount0",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2714,
            "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
            "label": "amount1",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/payoutlisteners/OptimismPayoutListener.sol:OptimismPayoutListener",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}