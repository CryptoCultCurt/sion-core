{
  "address": "0x3A31ec6EA73af1EEFCD3CA461859604a04d6D714",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "ArbiswapPoolsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ArbiswapSkimReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "ArbiswapWalletUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "exchanger",
          "type": "address"
        }
      ],
      "name": "ExchangerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "bribes",
          "type": "address[]"
        }
      ],
      "name": "SolidLizardPoolsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bribe",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SolidLizardSkimAndBribeReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "SterlingPoolsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SterlingSkimReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "SterlingWalletUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "usdPlus",
          "type": "address"
        }
      ],
      "name": "UsdPlusUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "arbiswapPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbiswapWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutDone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        }
      ],
      "name": "setArbiswapPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "setArbiswapWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchanger",
          "type": "address"
        }
      ],
      "name": "setExchanger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_bribes",
          "type": "address[]"
        }
      ],
      "name": "setSolidLizardPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        }
      ],
      "name": "setSterlingPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "setSterlingWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdPlus",
          "type": "address"
        }
      ],
      "name": "setUsdPlus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "solidLizardBribes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "solidLizardPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sterlingPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sterlingWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdPlus",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "6de903f04c26e252983e583b04ecb4a4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"ArbiswapPoolsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ArbiswapSkimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"ArbiswapWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"exchanger\",\"type\":\"address\"}],\"name\":\"ExchangerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bribes\",\"type\":\"address[]\"}],\"name\":\"SolidLizardPoolsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SolidLizardSkimAndBribeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"SterlingPoolsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SterlingSkimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"SterlingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdPlus\",\"type\":\"address\"}],\"name\":\"UsdPlusUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arbiswapPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbiswapWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutDone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"setArbiswapPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setArbiswapWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchanger\",\"type\":\"address\"}],\"name\":\"setExchanger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"}],\"name\":\"setSolidLizardPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"setSterlingPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setSterlingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdPlus\",\"type\":\"address\"}],\"name\":\"setUsdPlus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"solidLizardBribes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"solidLizardPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sterlingPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sterlingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdPlus\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/payoutlisteners/ArbitrumPayoutListener.sol\":\"ArbitrumPayoutListener\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Arbiswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IArbiswapPair is IERC20 {\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n}\\r\\n\\r\\ninterface IArbiswapBribe {\\r\\n\\r\\n    function notifyRewardAmount(address token, uint amount) external;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x3d6f7880fc6be224bc3b50d56b07e4d5ab6a460a817a318c1f6b8ff21e42e72a\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/SolidLizard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ILizardRouter01 {\\r\\n\\r\\n    struct Route {\\r\\n        address from;\\r\\n        address to;\\r\\n        bool stable;\\r\\n    }\\r\\n\\r\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\r\\n\\r\\n    function pairFor(address tokenA, address tokenB, bool stable) external view returns (address pair);\\r\\n\\r\\n    function quoteLiquidity(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n\\r\\n    function getReserves(address tokenA, address tokenB, bool stable) external view returns (uint reserveA, uint reserveB);\\r\\n\\r\\n    /// @dev Performs chained getAmountOut calculations on any number of pairs.\\r\\n    function getAmountOut(uint amountIn, address tokenIn, address tokenOut) external view returns (uint amount, bool stable);\\r\\n\\r\\n    function getExactAmountOut(uint amountIn, address tokenIn, address tokenOut, bool stable) external view returns (uint);\\r\\n\\r\\n    /// @dev Performs chained getAmountOut calculations on any number of pairs.\\r\\n    function getAmountsOut(uint amountIn, Route[] memory routes) external view returns (uint[] memory amounts);\\r\\n\\r\\n    function isPair(address pair) external view returns (bool);\\r\\n\\r\\n    function quoteAddLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired\\r\\n    ) external view returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function quoteRemoveLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        uint liquidity\\r\\n    ) external view returns (uint amountA, uint amountB);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n\\r\\n    function addLiquidityMATIC(\\r\\n        address token,\\r\\n        bool stable,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountMATICMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountMATIC, uint liquidity);\\r\\n\\r\\n    // **** REMOVE LIQUIDITY ****\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityMATIC(\\r\\n        address token,\\r\\n        bool stable,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountMATICMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountMATIC);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        bool stable,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n\\r\\n    function removeLiquidityMATICWithPermit(\\r\\n        address token,\\r\\n        bool stable,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountMATICMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountMATIC);\\r\\n\\r\\n    function removeLiquidityMATICSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        bool stable,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountFTMMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountFTM);\\r\\n\\r\\n    function removeLiquidityMATICWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        bool stable,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountFTMMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountFTM);\\r\\n\\r\\n    function swapExactTokensForTokensSimple(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address tokenFrom,\\r\\n        address tokenTo,\\r\\n        bool stable,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        Route[] calldata routes,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactMATICForTokens(uint amountOutMin, Route[] calldata routes, address to, uint deadline)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForMATIC(uint amountIn, uint amountOutMin, Route[] calldata routes, address to, uint deadline)\\r\\n    external\\r\\n    returns (uint[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        Route[] calldata routes,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactMATICForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        Route[] calldata routes,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForMATICSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        Route[] calldata routes,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n\\r\\n    function UNSAFE_swapExactTokensForTokens(\\r\\n        uint[] memory amounts,\\r\\n        Route[] calldata routes,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory);\\r\\n}\\r\\n\\r\\ninterface ILizardPair is IERC20 {\\r\\n\\r\\n    // Structure to capture time period obervations every 30 minutes, used for local oracles\\r\\n    struct Observation {\\r\\n        uint timestamp;\\r\\n        uint reserve0Cumulative;\\r\\n        uint reserve1Cumulative;\\r\\n    }\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n\\r\\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\r\\n\\r\\n    function getAmountOut(uint, address) external view returns (uint);\\r\\n\\r\\n    function claimFees() external returns (uint, uint);\\r\\n\\r\\n    function tokens() external view returns (address, address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function stable() external view returns (bool);\\r\\n\\r\\n    function metadata() external view returns (\\r\\n        uint dec0,\\r\\n        uint dec1,\\r\\n        uint r0,\\r\\n        uint r1,\\r\\n        bool st,\\r\\n        address t0,\\r\\n        address t1\\r\\n    );\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n}\\r\\n\\r\\ninterface ILizardGauge {\\r\\n\\r\\n    function depositAll(uint tokenId) external;\\r\\n\\r\\n    function deposit(uint amount, uint tokenId) external;\\r\\n\\r\\n    function withdrawAll() external;\\r\\n\\r\\n    function withdraw(uint amount) external;\\r\\n\\r\\n    function withdrawToken(uint amount, uint tokenId) external;\\r\\n\\r\\n    function notifyRewardAmount(address token, uint amount) external;\\r\\n\\r\\n    function getReward(address account, address[] memory tokens) external;\\r\\n\\r\\n    function claimFees() external returns (uint claimed0, uint claimed1);\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n\\r\\n    function derivedSupply() external view returns (uint);\\r\\n\\r\\n    function derivedBalances(address account) external view returns (uint);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint);\\r\\n\\r\\n    function rewardTokens(uint id) external view returns (address);\\r\\n\\r\\n    function isRewardToken(address token) external view returns (bool);\\r\\n\\r\\n    function rewardTokensLength() external view returns (uint);\\r\\n\\r\\n    function derivedBalance(address account) external view returns (uint);\\r\\n\\r\\n    function left(address token) external view returns (uint);\\r\\n\\r\\n    function earned(address token, address account) external view returns (uint);\\r\\n\\r\\n    function tokenIds(address account) external view returns (uint);\\r\\n}\\r\\n\\r\\ninterface ILizardBribe {\\r\\n\\r\\n    function notifyRewardAmount(address token, uint amount) external;\\r\\n\\r\\n    function _deposit(uint amount, uint tokenId) external;\\r\\n\\r\\n    function _withdraw(uint amount, uint tokenId) external;\\r\\n\\r\\n    function getRewardForOwner(uint tokenId, address[] memory tokens) external;\\r\\n\\r\\n}\\r\\n\\r\\nlibrary SolidLizardLibrary {\\r\\n\\r\\n    function getAmountsOut(\\r\\n        ILizardRouter01 router,\\r\\n        address inputToken,\\r\\n        address outputToken,\\r\\n        bool isStablePair0,\\r\\n        uint256 amountInput\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        ILizardRouter01.Route[] memory routes = new ILizardRouter01.Route[](1);\\r\\n        routes[0].from = inputToken;\\r\\n        routes[0].to = outputToken;\\r\\n        routes[0].stable = isStablePair0;\\r\\n\\r\\n        return router.getAmountsOut(amountInput, routes)[1];\\r\\n    }\\r\\n\\r\\n    function getAmountsOut(\\r\\n        ILizardRouter01 router,\\r\\n        address inputToken,\\r\\n        address middleToken,\\r\\n        address outputToken,\\r\\n        bool isStablePair0,\\r\\n        bool isStablePair1,\\r\\n        uint256 amountInput\\r\\n    ) internal view returns (uint256) {\\r\\n\\r\\n        ILizardRouter01.Route[] memory routes = new ILizardRouter01.Route[](2);\\r\\n        routes[0].from = inputToken;\\r\\n        routes[0].to = middleToken;\\r\\n        routes[0].stable = isStablePair0;\\r\\n        routes[1].from = middleToken;\\r\\n        routes[1].to = outputToken;\\r\\n        routes[1].stable = isStablePair1;\\r\\n\\r\\n        return router.getAmountsOut(amountInput, routes)[2];\\r\\n    }\\r\\n\\r\\n    function singleSwap(\\r\\n        ILizardRouter01 router,\\r\\n        address inputToken,\\r\\n        address outputToken,\\r\\n        bool isStablePair0,\\r\\n        uint256 amountInput,\\r\\n        uint256 amountOutMin,\\r\\n        address recipient\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(inputToken).approve(address(router), amountInput);\\r\\n\\r\\n        ILizardRouter01.Route[] memory routes = new ILizardRouter01.Route[](1);\\r\\n        routes[0].from = inputToken;\\r\\n        routes[0].to = outputToken;\\r\\n        routes[0].stable = isStablePair0;\\r\\n\\r\\n        return router.swapExactTokensForTokens(\\r\\n            amountInput,\\r\\n            amountOutMin,\\r\\n            routes,\\r\\n            recipient,\\r\\n            block.timestamp\\r\\n        )[1];\\r\\n    }\\r\\n\\r\\n    function multiSwap(\\r\\n        ILizardRouter01 router,\\r\\n        address inputToken,\\r\\n        address middleToken,\\r\\n        address outputToken,\\r\\n        bool isStablePair0,\\r\\n        bool isStablePair1,\\r\\n        uint256 amountInput,\\r\\n        uint256 amountOutMin,\\r\\n        address recipient\\r\\n    ) internal returns (uint256) {\\r\\n\\r\\n        IERC20(inputToken).approve(address(router), amountInput);\\r\\n\\r\\n        ILizardRouter01.Route[] memory routes = new ILizardRouter01.Route[](2);\\r\\n        routes[0].from = inputToken;\\r\\n        routes[0].to = middleToken;\\r\\n        routes[0].stable = isStablePair0;\\r\\n        routes[1].from = middleToken;\\r\\n        routes[1].to = outputToken;\\r\\n        routes[1].stable = isStablePair1;\\r\\n\\r\\n        return router.swapExactTokensForTokens(\\r\\n            amountInput,\\r\\n            amountOutMin,\\r\\n            routes,\\r\\n            recipient,\\r\\n            block.timestamp\\r\\n        )[2];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfcf7cb24e664f5d0fb4169b43152e9a2b68cf68781a207bcfef22894350a5cce\",\"license\":\"MIT\"},\"@overnight-contracts/connectors/contracts/stuff/Sterling.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface ISterlingPair is IERC20 {\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n}\\r\\n\\r\\ninterface ISterlingBribe {\\r\\n\\r\\n    function notifyRewardAmount(address token, uint amount) external;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xcf28927ad4fbce384150d41281db0ce4593d8403da13c7c723ca1265801c1afb\",\"license\":\"MIT\"},\"contracts/PayoutListener.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IPayoutListener.sol\\\";\\r\\n\\r\\n\\r\\nabstract contract PayoutListener is IPayoutListener, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\r\\n    bytes32 public constant EXCHANGER = keccak256(\\\"EXCHANGER\\\");\\r\\n\\r\\n    address public exchange;\\r\\n\\r\\n\\r\\n    function __PayoutListener_init() internal initializer {\\r\\n        __AccessControl_init();\\r\\n        __UUPSUpgradeable_init();\\r\\n\\r\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation)\\r\\n    internal\\r\\n    onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    override\\r\\n    {}\\r\\n\\r\\n    // ---  events\\r\\n\\r\\n    event ExchangerUpdated(address exchanger);\\r\\n\\r\\n    // ---  modifiers\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyExchanger() {\\r\\n        require(hasRole(EXCHANGER, msg.sender), \\\"Caller is not the EXCHANGER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // --- setters\\r\\n\\r\\n    function setExchanger(address _exchanger) external onlyAdmin {\\r\\n        if (exchange != address(0)) {\\r\\n            revokeRole(EXCHANGER, exchange);\\r\\n        }\\r\\n        grantRole(EXCHANGER, _exchanger);\\r\\n        exchange = _exchanger;\\r\\n        emit ExchangerUpdated(_exchanger);\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xb98a5ce7c9f2e00637017a0998f8e132d38ac6345541d83cd60e453e63505cfe\",\"license\":\"MIT\"},\"contracts/interfaces/IPayoutListener.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.5.0 <0.9.0;\\r\\n\\r\\ninterface IPayoutListener {\\r\\n\\r\\n    function payoutDone() external;\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x9162ab10ac44159a4c5cc0bb61cbcb0f289c7e8510d372eb923d43b9ce7bb007\",\"license\":\"MIT\"},\"contracts/payoutlisteners/ArbitrumPayoutListener.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"../PayoutListener.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/SolidLizard.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Sterling.sol\\\";\\r\\nimport \\\"@overnight-contracts/connectors/contracts/stuff/Arbiswap.sol\\\";\\r\\n\\r\\ncontract ArbitrumPayoutListener is PayoutListener {\\r\\n\\r\\n    IERC20 public usdPlus;\\r\\n    \\r\\n    address[] public solidLizardPools;\\r\\n    address[] public solidLizardBribes;\\r\\n\\r\\n    address[] public sterlingPools;\\r\\n    address public sterlingWallet;\\r\\n\\r\\n    address[] public arbiswapPools;\\r\\n    address public arbiswapWallet;\\r\\n\\r\\n    // ---  events\\r\\n\\r\\n    event UsdPlusUpdated(address usdPlus);\\r\\n\\r\\n    event SolidLizardPoolsUpdated(address[] pools, address[] bribes);\\r\\n    event SolidLizardSkimAndBribeReward(address pool, address bribe, uint256 amount);\\r\\n\\r\\n    event SterlingPoolsUpdated(address[] pools);\\r\\n    event SterlingWalletUpdated(address wallet);\\r\\n    event SterlingSkimReward(address pool, address wallet, uint256 amount);\\r\\n\\r\\n    event ArbiswapPoolsUpdated(address[] pools);\\r\\n    event ArbiswapWalletUpdated(address wallet);\\r\\n    event ArbiswapSkimReward(address pool, address wallet, uint256 amount);\\r\\n\\r\\n    // --- setters\\r\\n\\r\\n    function setUsdPlus(address _usdPlus) external onlyAdmin {\\r\\n        require(_usdPlus != address(0), \\\"Zero address not allowed\\\");\\r\\n        usdPlus = IERC20(_usdPlus);\\r\\n        emit UsdPlusUpdated(_usdPlus);\\r\\n    }\\r\\n\\r\\n    function setSolidLizardPools(address[] calldata _pools, address[] calldata _bribes) external onlyAdmin {\\r\\n        require(_pools.length == _bribes.length, \\\"Pools and bribes not equal\\\");\\r\\n        solidLizardPools = _pools;\\r\\n        solidLizardBribes = _bribes;\\r\\n        emit SolidLizardPoolsUpdated(_pools, _bribes);\\r\\n    }\\r\\n\\r\\n    function setSterlingPools(address[] calldata _pools) external onlyAdmin {\\r\\n        sterlingPools = _pools;\\r\\n        emit SterlingPoolsUpdated(_pools);\\r\\n    }\\r\\n\\r\\n    function setSterlingWallet(address _wallet) external onlyAdmin {\\r\\n        require(_wallet != address(0), \\\"Zero address not allowed\\\");\\r\\n        sterlingWallet = _wallet;\\r\\n        emit SterlingWalletUpdated(_wallet);\\r\\n    }\\r\\n\\r\\n    function setArbiswapPools(address[] calldata _pools) external onlyAdmin {\\r\\n        arbiswapPools = _pools;\\r\\n        emit ArbiswapPoolsUpdated(_pools);\\r\\n    }\\r\\n\\r\\n    function setArbiswapWallet(address _wallet) external onlyAdmin {\\r\\n        require(_wallet != address(0), \\\"Zero address not allowed\\\");\\r\\n        arbiswapWallet = _wallet;\\r\\n        emit ArbiswapWalletUpdated(_wallet);\\r\\n    }\\r\\n\\r\\n    // ---  constructor\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() initializer {}\\r\\n\\r\\n    function initialize() initializer public {\\r\\n        __PayoutListener_init();\\r\\n    }\\r\\n\\r\\n    // ---  logic\\r\\n\\r\\n    function payoutDone() external override onlyExchanger {\\r\\n        _solidLizardSkimAndBribe();\\r\\n        _sterlingSkim();\\r\\n        _arbiswapSkim();\\r\\n    }\\r\\n\\r\\n    function _solidLizardSkimAndBribe() internal {\\r\\n        for (uint256 i = 0; i < solidLizardPools.length; i++) {\\r\\n            address pool = solidLizardPools[i];\\r\\n//            address bribe = solidLizardBribes[i];\\r\\n//            uint256 usdPlusBalanceBeforeSkim = usdPlus.balanceOf(address(this));\\r\\n            ILizardPair(pool).skim(address(this));\\r\\n//            uint256 amountUsdPlus = usdPlus.balanceOf(address(this)) - usdPlusBalanceBeforeSkim;\\r\\n//            if (amountUsdPlus > 0) {\\r\\n//                usdPlus.approve(bribe, amountUsdPlus);\\r\\n//                ILizardBribe(bribe).notifyRewardAmount(address(usdPlus), amountUsdPlus);\\r\\n//                emit SolidLizardSkimAndBribeReward(pool, bribe, amountUsdPlus);\\r\\n//            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _sterlingSkim() internal {\\r\\n        for (uint256 i = 0; i < sterlingPools.length; i++) {\\r\\n            address pool = sterlingPools[i];\\r\\n            uint256 usdPlusBalanceBeforeSkim = usdPlus.balanceOf(address(this));\\r\\n            ISterlingPair(pool).skim(address(this));\\r\\n            uint256 amountUsdPlus = usdPlus.balanceOf(address(this)) - usdPlusBalanceBeforeSkim;\\r\\n            if (amountUsdPlus > 0) {\\r\\n                usdPlus.transfer(sterlingWallet, amountUsdPlus);\\r\\n                emit SterlingSkimReward(pool, sterlingWallet, amountUsdPlus);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _arbiswapSkim() internal {\\r\\n        for (uint256 i = 0; i < arbiswapPools.length; i++) {\\r\\n            address pool = arbiswapPools[i];\\r\\n            uint256 usdPlusBalanceBeforeSkim = usdPlus.balanceOf(address(this));\\r\\n            IArbiswapPair(pool).skim(address(this));\\r\\n            uint256 amountUsdPlus = usdPlus.balanceOf(address(this)) - usdPlusBalanceBeforeSkim;\\r\\n            if (amountUsdPlus > 0) {\\r\\n                usdPlus.transfer(arbiswapWallet, amountUsdPlus);\\r\\n                emit ArbiswapSkimReward(pool, arbiswapWallet, amountUsdPlus);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x692261fb98cd800465cc3f8528b929e75b40791d3912a36a1bef2f62426a1338\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16158080156200003a5750600054600160ff909116105b806200006a575062000057306200014460201b62000ed71760201c565b1580156200006a575060005460ff166001145b620000d25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f6576000805461ff0019166101001790555b80156200013d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000153565b6001600160a01b03163b151590565b60805160601c61239f6200018e600039600081816106f60152818161073601528181610879015281816108b90152610948015261239f6000f3fe6080604052600436106101b75760003560e01c80638129fc1c116100ec578063bd0f10531161008a578063d547741f11610064578063d547741f146104df578063da909b09146104ff578063e9273f9f1461051f578063f14a74381461054057600080fd5b8063bd0f10531461047d578063c3429cd21461049f578063d2f7265a146104bf57600080fd5b8063a5a62ada116100c6578063a5a62ada146103fc578063ac6590811461041c578063af549a7d1461043d578063b4a36caa1461045d57600080fd5b80638129fc1c146103b257806391d14854146103c7578063a217fddf146103e757600080fd5b80633659cfe611610159578063514e460a11610133578063514e460a1461033c57806352d1902d1461035d57806358c88be91461037257806379a1c23b1461039257600080fd5b80633659cfe6146102e95780633c367ac9146103095780634f1ef2861461032957600080fd5b8063248a9ca311610195578063248a9ca31461024b5780632f2ff15d1461028957806335ea03c5146102a957806336568abe146102c957600080fd5b806301ffc9a7146101bc5780631028985c146101f157806312754e8b14610229575b600080fd5b3480156101c857600080fd5b506101dc6101d7366004611f46565b610555565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b5061021161020c366004611ee8565b61058c565b6040516001600160a01b0390911681526020016101e8565b34801561023557600080fd5b50610249610244366004611e18565b6105b7565b005b34801561025757600080fd5b5061027b610266366004611ee8565b60009081526065602052604090206001015490565b6040519081526020016101e8565b34801561029557600080fd5b506102496102a4366004611f1a565b610632565b3480156102b557600080fd5b506102116102c4366004611ee8565b61065c565b3480156102d557600080fd5b506102496102e4366004611f1a565b61066d565b3480156102f557600080fd5b50610249610304366004611d3b565b6106eb565b34801561031557600080fd5b50610249610324366004611d3b565b6107cb565b610249610337366004611d56565b61086e565b34801561034857600080fd5b5061012e54610211906001600160a01b031681565b34801561036957600080fd5b5061027b61093b565b34801561037e57600080fd5b5061024961038d366004611e18565b6109ee565b34801561039e57600080fd5b506102116103ad366004611ee8565b610a54565b3480156103be57600080fd5b50610249610a65565b3480156103d357600080fd5b506101dc6103e2366004611f1a565b610b28565b3480156103f357600080fd5b5061027b600081565b34801561040857600080fd5b50610249610417366004611d3b565b610b53565b34801561042857600080fd5b5061013254610211906001600160a01b031681565b34801561044957600080fd5b50610211610458366004611ee8565b610bef565b34801561046957600080fd5b50610249610478366004611d3b565b610c00565b34801561048957600080fd5b5061027b60008051602061230383398151915281565b3480156104ab57600080fd5b506102496104ba366004611e5a565b610c9c565b3480156104cb57600080fd5b5060fb54610211906001600160a01b031681565b3480156104eb57600080fd5b506102496104fa366004611f1a565b610d71565b34801561050b57600080fd5b5061024961051a366004611d3b565b610d96565b34801561052b57600080fd5b5061013454610211906001600160a01b031681565b34801561054c57600080fd5b50610249610e59565b60006001600160e01b03198216637965db0b60e01b148061058657506301ffc9a760e01b6001600160e01b03198316145b92915050565b610133818154811061059d57600080fd5b6000918252602090912001546001600160a01b0316905081565b6105c2600033610b28565b6105e75760405162461bcd60e51b81526004016105de906121af565b60405180910390fd5b6105f46101318383611c5b565b507fc79f8d6066fa941b13b7fe155df5cff573f4202fe3cd79fae50e1b4ec09f6da88282604051610626929190612048565b60405180910390a15050565b60008281526065602052604090206001015461064d81610ee6565b6106578383610ef0565b505050565b610130818154811061059d57600080fd5b6001600160a01b03811633146106dd5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105de565b6106e78282610f76565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156107345760405162461bcd60e51b81526004016105de906120c9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661077d600080516020612323833981519152546001600160a01b031690565b6001600160a01b0316146107a35760405162461bcd60e51b81526004016105de90612115565b6107ac81610fdd565b604080516000808252602082019092526107c891839190610fe8565b50565b6107d6600033610b28565b6107f25760405162461bcd60e51b81526004016105de906121af565b6001600160a01b0381166108185760405162461bcd60e51b81526004016105de906121dd565b61013480546001600160a01b0319166001600160a01b0383169081179091556040519081527f0b7d12d5dfc90edf7d8e7b19df50f4860d7150730b64c0129f2028ff3ea2710a906020015b60405180910390a150565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108b75760405162461bcd60e51b81526004016105de906120c9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610900600080516020612323833981519152546001600160a01b031690565b6001600160a01b0316146109265760405162461bcd60e51b81526004016105de90612115565b61092f82610fdd565b6106e782826001610fe8565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109db5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016105de565b5060008051602061232383398151915290565b6109f9600033610b28565b610a155760405162461bcd60e51b81526004016105de906121af565b610a226101338383611c5b565b507f8b359920862843936518bcd5201eedc80fae884fb2ab1c1f778336e6f23299e68282604051610626929190612048565b610131818154811061059d57600080fd5b600054610100900460ff1615808015610a855750600054600160ff909116105b80610a9f5750303b158015610a9f575060005460ff166001145b610abb5760405162461bcd60e51b81526004016105de90612161565b6000805460ff191660011790558015610ade576000805461ff0019166101001790555b610ae6611162565b80156107c8576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610863565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610b5e600033610b28565b610b7a5760405162461bcd60e51b81526004016105de906121af565b6001600160a01b038116610ba05760405162461bcd60e51b81526004016105de906121dd565b61012e80546001600160a01b0319166001600160a01b0383169081179091556040519081527fb2ca5818c0bc1f43830eb395e2aaff552ccc9ce0229dd3db6c9b07f47b7cc21f90602001610863565b61012f818154811061059d57600080fd5b610c0b600033610b28565b610c275760405162461bcd60e51b81526004016105de906121af565b6001600160a01b038116610c4d5760405162461bcd60e51b81526004016105de906121dd565b61013280546001600160a01b0319166001600160a01b0383169081179091556040519081527f4f8d51dfe4f755ad7066763d96ebaa42a5baa4e9eaf15805d85d61e70b6228fe90602001610863565b610ca7600033610b28565b610cc35760405162461bcd60e51b81526004016105de906121af565b828114610d125760405162461bcd60e51b815260206004820152601a60248201527f506f6f6c7320616e6420627269626573206e6f7420657175616c00000000000060448201526064016105de565b610d1f61012f8585611c5b565b50610d2d6101308383611c5b565b507f5a1a6f2446c612a80cdc1ccdbcf21686c636f6554497613a439decd9121fc8ce84848484604051610d639493929190612064565b60405180910390a150505050565b600082815260656020526040902060010154610d8c81610ee6565b6106578383610f76565b610da1600033610b28565b610dbd5760405162461bcd60e51b81526004016105de906121af565b60fb546001600160a01b031615610df35760fb54610df390600080516020612303833981519152906001600160a01b0316610d71565b610e0b60008051602061230383398151915282610632565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527f1af34e943bb581f62718acd39caf1a640e9ff89789a197745e259d1f40cd9bd690602001610863565b610e7160008051602061230383398151915233610b28565b610ebd5760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f74207468652045584348414e474552000000000060448201526064016105de565b610ec56111f6565b610ecd611297565b610ed5611526565b565b6001600160a01b03163b151590565b6107c881336117b5565b610efa8282610b28565b6106e75760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610f323390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610f808282610b28565b156106e75760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006106e781610ee6565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561101b5761065783611819565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561105457600080fd5b505afa925050508015611084575060408051601f3d908101601f1916820190925261108191810190611f01565b60015b6110e75760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016105de565b60008051602061232383398151915281146111565760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016105de565b506106578383836118b5565b600054610100900460ff16158080156111825750600054600160ff909116105b8061119c5750303b15801561119c575060005460ff166001145b6111b85760405162461bcd60e51b81526004016105de90612161565b6000805460ff1916600117905580156111db576000805461ff0019166101001790555b6111e36118e0565b6111eb6118e0565b610ae6600033610ef0565b60005b61012f548110156107c857600061012f828154811061121a5761121a6122d6565b60009182526020909120015460405163bc25cf7760e01b81523060048201526001600160a01b039091169150819063bc25cf7790602401600060405180830381600087803b15801561126b57600080fd5b505af115801561127f573d6000803e3d6000fd5b5050505050808061128f906122a5565b9150506111f9565b60005b610131548110156107c857600061013182815481106112bb576112bb6122d6565b600091825260208220015461012e546040516370a0823160e01b81523060048201526001600160a01b0392831694509116906370a082319060240160206040518083038186803b15801561130e57600080fd5b505afa158015611322573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113469190611f01565b60405163bc25cf7760e01b81523060048201529091506001600160a01b0383169063bc25cf7790602401600060405180830381600087803b15801561138a57600080fd5b505af115801561139e573d6000803e3d6000fd5b505061012e546040516370a0823160e01b8152306004820152600093508492506001600160a01b03909116906370a082319060240160206040518083038186803b1580156113eb57600080fd5b505afa1580156113ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114239190611f01565b61142d919061224b565b905080156115105761012e546101325460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b15801561148757600080fd5b505af115801561149b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bf9190611ec6565b5061013254604080516001600160a01b038087168252909216602083015281018290527f6fd566b052d219332fa8843d1cc3035a0273acbc005f73b9b62991f712284eba9060600160405180910390a15b505050808061151e906122a5565b91505061129a565b60005b610133548110156107c8576000610133828154811061154a5761154a6122d6565b600091825260208220015461012e546040516370a0823160e01b81523060048201526001600160a01b0392831694509116906370a082319060240160206040518083038186803b15801561159d57600080fd5b505afa1580156115b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d59190611f01565b60405163bc25cf7760e01b81523060048201529091506001600160a01b0383169063bc25cf7790602401600060405180830381600087803b15801561161957600080fd5b505af115801561162d573d6000803e3d6000fd5b505061012e546040516370a0823160e01b8152306004820152600093508492506001600160a01b03909116906370a082319060240160206040518083038186803b15801561167a57600080fd5b505afa15801561168e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b29190611f01565b6116bc919061224b565b9050801561179f5761012e546101345460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b15801561171657600080fd5b505af115801561172a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174e9190611ec6565b5061013454604080516001600160a01b038087168252909216602083015281018290527fd6d59cad62ed1b4d21b579d07a104b0dc6e4aa7d5b4721c1dea293d5aa5304899060600160405180910390a15b50505080806117ad906122a5565b915050611529565b6117bf8282610b28565b6106e7576117d7816001600160a01b0316601461194b565b6117e283602061194b565b6040516020016117f3929190611fd3565b60408051601f198184030181529082905262461bcd60e51b82526105de91600401612096565b6001600160a01b0381163b6118865760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105de565b60008051602061232383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6118be83611aee565b6000825111806118cb5750805b15610657576118da8383611b2e565b50505050565b600054610100900460ff16610ed55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105de565b6060600061195a83600261222c565b611965906002612214565b67ffffffffffffffff81111561197d5761197d6122ec565b6040519080825280601f01601f1916602001820160405280156119a7576020820181803683370190505b509050600360fc1b816000815181106119c2576119c26122d6565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106119f1576119f16122d6565b60200101906001600160f81b031916908160001a9053506000611a1584600261222c565b611a20906001612214565b90505b6001811115611a98576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611a5457611a546122d6565b1a60f81b828281518110611a6a57611a6a6122d6565b60200101906001600160f81b031916908160001a90535060049490941c93611a918161228e565b9050611a23565b508315611ae75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105de565b9392505050565b611af781611819565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b611b965760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016105de565b600080846001600160a01b031684604051611bb19190611fb7565b600060405180830381855af49150503d8060008114611bec576040519150601f19603f3d011682016040523d82523d6000602084013e611bf1565b606091505b5091509150611c19828260405180606001604052806027815260200161234360279139611c22565b95945050505050565b60608315611c31575081611ae7565b825115611c415782518084602001fd5b8160405162461bcd60e51b81526004016105de9190612096565b828054828255906000526020600020908101928215611cae579160200282015b82811115611cae5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190611c7b565b50611cba929150611cbe565b5090565b5b80821115611cba5760008155600101611cbf565b80356001600160a01b0381168114611cea57600080fd5b919050565b60008083601f840112611d0157600080fd5b50813567ffffffffffffffff811115611d1957600080fd5b6020830191508360208260051b8501011115611d3457600080fd5b9250929050565b600060208284031215611d4d57600080fd5b611ae782611cd3565b60008060408385031215611d6957600080fd5b611d7283611cd3565b9150602083013567ffffffffffffffff80821115611d8f57600080fd5b818501915085601f830112611da357600080fd5b813581811115611db557611db56122ec565b604051601f8201601f19908116603f01168101908382118183101715611ddd57611ddd6122ec565b81604052828152886020848701011115611df657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060208385031215611e2b57600080fd5b823567ffffffffffffffff811115611e4257600080fd5b611e4e85828601611cef565b90969095509350505050565b60008060008060408587031215611e7057600080fd5b843567ffffffffffffffff80821115611e8857600080fd5b611e9488838901611cef565b90965094506020870135915080821115611ead57600080fd5b50611eba87828801611cef565b95989497509550505050565b600060208284031215611ed857600080fd5b81518015158114611ae757600080fd5b600060208284031215611efa57600080fd5b5035919050565b600060208284031215611f1357600080fd5b5051919050565b60008060408385031215611f2d57600080fd5b82359150611f3d60208401611cd3565b90509250929050565b600060208284031215611f5857600080fd5b81356001600160e01b031981168114611ae757600080fd5b8183526000602080850194508260005b85811015611fac576001600160a01b03611f9983611cd3565b1687529582019590820190600101611f80565b509495945050505050565b60008251611fc9818460208701612262565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161200b816017850160208801612262565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161203c816028840160208801612262565b01602801949350505050565b60208152600061205c602083018486611f70565b949350505050565b604081526000612078604083018688611f70565b828103602084015261208b818587611f70565b979650505050505050565b60208152600082518060208401526120b5816040850160208701612262565b601f01601f19169190910160400192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b60008219821115612227576122276122c0565b500190565b6000816000190483118215151615612246576122466122c0565b500290565b60008282101561225d5761225d6122c0565b500390565b60005b8381101561227d578181015183820152602001612265565b838111156118da5750506000910152565b60008161229d5761229d6122c0565b506000190190565b60006000198214156122b9576122b96122c0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe3eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2d360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122095f7f521943e7e61f88d4ebbd1db3cadb2b217b077a89af88308a1f83b59f59c64736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c80638129fc1c116100ec578063bd0f10531161008a578063d547741f11610064578063d547741f146104df578063da909b09146104ff578063e9273f9f1461051f578063f14a74381461054057600080fd5b8063bd0f10531461047d578063c3429cd21461049f578063d2f7265a146104bf57600080fd5b8063a5a62ada116100c6578063a5a62ada146103fc578063ac6590811461041c578063af549a7d1461043d578063b4a36caa1461045d57600080fd5b80638129fc1c146103b257806391d14854146103c7578063a217fddf146103e757600080fd5b80633659cfe611610159578063514e460a11610133578063514e460a1461033c57806352d1902d1461035d57806358c88be91461037257806379a1c23b1461039257600080fd5b80633659cfe6146102e95780633c367ac9146103095780634f1ef2861461032957600080fd5b8063248a9ca311610195578063248a9ca31461024b5780632f2ff15d1461028957806335ea03c5146102a957806336568abe146102c957600080fd5b806301ffc9a7146101bc5780631028985c146101f157806312754e8b14610229575b600080fd5b3480156101c857600080fd5b506101dc6101d7366004611f46565b610555565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b5061021161020c366004611ee8565b61058c565b6040516001600160a01b0390911681526020016101e8565b34801561023557600080fd5b50610249610244366004611e18565b6105b7565b005b34801561025757600080fd5b5061027b610266366004611ee8565b60009081526065602052604090206001015490565b6040519081526020016101e8565b34801561029557600080fd5b506102496102a4366004611f1a565b610632565b3480156102b557600080fd5b506102116102c4366004611ee8565b61065c565b3480156102d557600080fd5b506102496102e4366004611f1a565b61066d565b3480156102f557600080fd5b50610249610304366004611d3b565b6106eb565b34801561031557600080fd5b50610249610324366004611d3b565b6107cb565b610249610337366004611d56565b61086e565b34801561034857600080fd5b5061012e54610211906001600160a01b031681565b34801561036957600080fd5b5061027b61093b565b34801561037e57600080fd5b5061024961038d366004611e18565b6109ee565b34801561039e57600080fd5b506102116103ad366004611ee8565b610a54565b3480156103be57600080fd5b50610249610a65565b3480156103d357600080fd5b506101dc6103e2366004611f1a565b610b28565b3480156103f357600080fd5b5061027b600081565b34801561040857600080fd5b50610249610417366004611d3b565b610b53565b34801561042857600080fd5b5061013254610211906001600160a01b031681565b34801561044957600080fd5b50610211610458366004611ee8565b610bef565b34801561046957600080fd5b50610249610478366004611d3b565b610c00565b34801561048957600080fd5b5061027b60008051602061230383398151915281565b3480156104ab57600080fd5b506102496104ba366004611e5a565b610c9c565b3480156104cb57600080fd5b5060fb54610211906001600160a01b031681565b3480156104eb57600080fd5b506102496104fa366004611f1a565b610d71565b34801561050b57600080fd5b5061024961051a366004611d3b565b610d96565b34801561052b57600080fd5b5061013454610211906001600160a01b031681565b34801561054c57600080fd5b50610249610e59565b60006001600160e01b03198216637965db0b60e01b148061058657506301ffc9a760e01b6001600160e01b03198316145b92915050565b610133818154811061059d57600080fd5b6000918252602090912001546001600160a01b0316905081565b6105c2600033610b28565b6105e75760405162461bcd60e51b81526004016105de906121af565b60405180910390fd5b6105f46101318383611c5b565b507fc79f8d6066fa941b13b7fe155df5cff573f4202fe3cd79fae50e1b4ec09f6da88282604051610626929190612048565b60405180910390a15050565b60008281526065602052604090206001015461064d81610ee6565b6106578383610ef0565b505050565b610130818154811061059d57600080fd5b6001600160a01b03811633146106dd5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016105de565b6106e78282610f76565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156107345760405162461bcd60e51b81526004016105de906120c9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661077d600080516020612323833981519152546001600160a01b031690565b6001600160a01b0316146107a35760405162461bcd60e51b81526004016105de90612115565b6107ac81610fdd565b604080516000808252602082019092526107c891839190610fe8565b50565b6107d6600033610b28565b6107f25760405162461bcd60e51b81526004016105de906121af565b6001600160a01b0381166108185760405162461bcd60e51b81526004016105de906121dd565b61013480546001600160a01b0319166001600160a01b0383169081179091556040519081527f0b7d12d5dfc90edf7d8e7b19df50f4860d7150730b64c0129f2028ff3ea2710a906020015b60405180910390a150565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156108b75760405162461bcd60e51b81526004016105de906120c9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610900600080516020612323833981519152546001600160a01b031690565b6001600160a01b0316146109265760405162461bcd60e51b81526004016105de90612115565b61092f82610fdd565b6106e782826001610fe8565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109db5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016105de565b5060008051602061232383398151915290565b6109f9600033610b28565b610a155760405162461bcd60e51b81526004016105de906121af565b610a226101338383611c5b565b507f8b359920862843936518bcd5201eedc80fae884fb2ab1c1f778336e6f23299e68282604051610626929190612048565b610131818154811061059d57600080fd5b600054610100900460ff1615808015610a855750600054600160ff909116105b80610a9f5750303b158015610a9f575060005460ff166001145b610abb5760405162461bcd60e51b81526004016105de90612161565b6000805460ff191660011790558015610ade576000805461ff0019166101001790555b610ae6611162565b80156107c8576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610863565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610b5e600033610b28565b610b7a5760405162461bcd60e51b81526004016105de906121af565b6001600160a01b038116610ba05760405162461bcd60e51b81526004016105de906121dd565b61012e80546001600160a01b0319166001600160a01b0383169081179091556040519081527fb2ca5818c0bc1f43830eb395e2aaff552ccc9ce0229dd3db6c9b07f47b7cc21f90602001610863565b61012f818154811061059d57600080fd5b610c0b600033610b28565b610c275760405162461bcd60e51b81526004016105de906121af565b6001600160a01b038116610c4d5760405162461bcd60e51b81526004016105de906121dd565b61013280546001600160a01b0319166001600160a01b0383169081179091556040519081527f4f8d51dfe4f755ad7066763d96ebaa42a5baa4e9eaf15805d85d61e70b6228fe90602001610863565b610ca7600033610b28565b610cc35760405162461bcd60e51b81526004016105de906121af565b828114610d125760405162461bcd60e51b815260206004820152601a60248201527f506f6f6c7320616e6420627269626573206e6f7420657175616c00000000000060448201526064016105de565b610d1f61012f8585611c5b565b50610d2d6101308383611c5b565b507f5a1a6f2446c612a80cdc1ccdbcf21686c636f6554497613a439decd9121fc8ce84848484604051610d639493929190612064565b60405180910390a150505050565b600082815260656020526040902060010154610d8c81610ee6565b6106578383610f76565b610da1600033610b28565b610dbd5760405162461bcd60e51b81526004016105de906121af565b60fb546001600160a01b031615610df35760fb54610df390600080516020612303833981519152906001600160a01b0316610d71565b610e0b60008051602061230383398151915282610632565b60fb80546001600160a01b0319166001600160a01b0383169081179091556040519081527f1af34e943bb581f62718acd39caf1a640e9ff89789a197745e259d1f40cd9bd690602001610863565b610e7160008051602061230383398151915233610b28565b610ebd5760405162461bcd60e51b815260206004820152601b60248201527f43616c6c6572206973206e6f74207468652045584348414e474552000000000060448201526064016105de565b610ec56111f6565b610ecd611297565b610ed5611526565b565b6001600160a01b03163b151590565b6107c881336117b5565b610efa8282610b28565b6106e75760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055610f323390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610f808282610b28565b156106e75760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006106e781610ee6565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561101b5761065783611819565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561105457600080fd5b505afa925050508015611084575060408051601f3d908101601f1916820190925261108191810190611f01565b60015b6110e75760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016105de565b60008051602061232383398151915281146111565760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016105de565b506106578383836118b5565b600054610100900460ff16158080156111825750600054600160ff909116105b8061119c5750303b15801561119c575060005460ff166001145b6111b85760405162461bcd60e51b81526004016105de90612161565b6000805460ff1916600117905580156111db576000805461ff0019166101001790555b6111e36118e0565b6111eb6118e0565b610ae6600033610ef0565b60005b61012f548110156107c857600061012f828154811061121a5761121a6122d6565b60009182526020909120015460405163bc25cf7760e01b81523060048201526001600160a01b039091169150819063bc25cf7790602401600060405180830381600087803b15801561126b57600080fd5b505af115801561127f573d6000803e3d6000fd5b5050505050808061128f906122a5565b9150506111f9565b60005b610131548110156107c857600061013182815481106112bb576112bb6122d6565b600091825260208220015461012e546040516370a0823160e01b81523060048201526001600160a01b0392831694509116906370a082319060240160206040518083038186803b15801561130e57600080fd5b505afa158015611322573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113469190611f01565b60405163bc25cf7760e01b81523060048201529091506001600160a01b0383169063bc25cf7790602401600060405180830381600087803b15801561138a57600080fd5b505af115801561139e573d6000803e3d6000fd5b505061012e546040516370a0823160e01b8152306004820152600093508492506001600160a01b03909116906370a082319060240160206040518083038186803b1580156113eb57600080fd5b505afa1580156113ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114239190611f01565b61142d919061224b565b905080156115105761012e546101325460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b15801561148757600080fd5b505af115801561149b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bf9190611ec6565b5061013254604080516001600160a01b038087168252909216602083015281018290527f6fd566b052d219332fa8843d1cc3035a0273acbc005f73b9b62991f712284eba9060600160405180910390a15b505050808061151e906122a5565b91505061129a565b60005b610133548110156107c8576000610133828154811061154a5761154a6122d6565b600091825260208220015461012e546040516370a0823160e01b81523060048201526001600160a01b0392831694509116906370a082319060240160206040518083038186803b15801561159d57600080fd5b505afa1580156115b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d59190611f01565b60405163bc25cf7760e01b81523060048201529091506001600160a01b0383169063bc25cf7790602401600060405180830381600087803b15801561161957600080fd5b505af115801561162d573d6000803e3d6000fd5b505061012e546040516370a0823160e01b8152306004820152600093508492506001600160a01b03909116906370a082319060240160206040518083038186803b15801561167a57600080fd5b505afa15801561168e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b29190611f01565b6116bc919061224b565b9050801561179f5761012e546101345460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b15801561171657600080fd5b505af115801561172a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174e9190611ec6565b5061013454604080516001600160a01b038087168252909216602083015281018290527fd6d59cad62ed1b4d21b579d07a104b0dc6e4aa7d5b4721c1dea293d5aa5304899060600160405180910390a15b50505080806117ad906122a5565b915050611529565b6117bf8282610b28565b6106e7576117d7816001600160a01b0316601461194b565b6117e283602061194b565b6040516020016117f3929190611fd3565b60408051601f198184030181529082905262461bcd60e51b82526105de91600401612096565b6001600160a01b0381163b6118865760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105de565b60008051602061232383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6118be83611aee565b6000825111806118cb5750805b15610657576118da8383611b2e565b50505050565b600054610100900460ff16610ed55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016105de565b6060600061195a83600261222c565b611965906002612214565b67ffffffffffffffff81111561197d5761197d6122ec565b6040519080825280601f01601f1916602001820160405280156119a7576020820181803683370190505b509050600360fc1b816000815181106119c2576119c26122d6565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106119f1576119f16122d6565b60200101906001600160f81b031916908160001a9053506000611a1584600261222c565b611a20906001612214565b90505b6001811115611a98576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611a5457611a546122d6565b1a60f81b828281518110611a6a57611a6a6122d6565b60200101906001600160f81b031916908160001a90535060049490941c93611a918161228e565b9050611a23565b508315611ae75760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105de565b9392505050565b611af781611819565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b611b965760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016105de565b600080846001600160a01b031684604051611bb19190611fb7565b600060405180830381855af49150503d8060008114611bec576040519150601f19603f3d011682016040523d82523d6000602084013e611bf1565b606091505b5091509150611c19828260405180606001604052806027815260200161234360279139611c22565b95945050505050565b60608315611c31575081611ae7565b825115611c415782518084602001fd5b8160405162461bcd60e51b81526004016105de9190612096565b828054828255906000526020600020908101928215611cae579160200282015b82811115611cae5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190611c7b565b50611cba929150611cbe565b5090565b5b80821115611cba5760008155600101611cbf565b80356001600160a01b0381168114611cea57600080fd5b919050565b60008083601f840112611d0157600080fd5b50813567ffffffffffffffff811115611d1957600080fd5b6020830191508360208260051b8501011115611d3457600080fd5b9250929050565b600060208284031215611d4d57600080fd5b611ae782611cd3565b60008060408385031215611d6957600080fd5b611d7283611cd3565b9150602083013567ffffffffffffffff80821115611d8f57600080fd5b818501915085601f830112611da357600080fd5b813581811115611db557611db56122ec565b604051601f8201601f19908116603f01168101908382118183101715611ddd57611ddd6122ec565b81604052828152886020848701011115611df657600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060208385031215611e2b57600080fd5b823567ffffffffffffffff811115611e4257600080fd5b611e4e85828601611cef565b90969095509350505050565b60008060008060408587031215611e7057600080fd5b843567ffffffffffffffff80821115611e8857600080fd5b611e9488838901611cef565b90965094506020870135915080821115611ead57600080fd5b50611eba87828801611cef565b95989497509550505050565b600060208284031215611ed857600080fd5b81518015158114611ae757600080fd5b600060208284031215611efa57600080fd5b5035919050565b600060208284031215611f1357600080fd5b5051919050565b60008060408385031215611f2d57600080fd5b82359150611f3d60208401611cd3565b90509250929050565b600060208284031215611f5857600080fd5b81356001600160e01b031981168114611ae757600080fd5b8183526000602080850194508260005b85811015611fac576001600160a01b03611f9983611cd3565b1687529582019590820190600101611f80565b509495945050505050565b60008251611fc9818460208701612262565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161200b816017850160208801612262565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161203c816028840160208801612262565b01602801949350505050565b60208152600061205c602083018486611f70565b949350505050565b604081526000612078604083018688611f70565b828103602084015261208b818587611f70565b979650505050505050565b60208152600082518060208401526120b5816040850160208701612262565b601f01601f19169190910160400192915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b60208082526018908201527f5a65726f2061646472657373206e6f7420616c6c6f7765640000000000000000604082015260600190565b60008219821115612227576122276122c0565b500190565b6000816000190483118215151615612246576122466122c0565b500290565b60008282101561225d5761225d6122c0565b500390565b60005b8381101561227d578181015183820152602001612265565b838111156118da5750506000910152565b60008161229d5761229d6122c0565b506000190190565b60006000198214156122b9576122b96122c0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe3eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2d360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122095f7f521943e7e61f88d4ebbd1db3cadb2b217b077a89af88308a1f83b59f59c64736f6c63430008060033",
  "implementation": "0x521119A27FD2F1F13b5675Df9580E6FdACfdeD99",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 808,
        "contract": "contracts/payoutlisteners/ArbitrumPayoutListener.sol:ArbitrumPayoutListener",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 811,
        "contract": "contracts/payoutlisteners/ArbitrumPayoutListener.sol:ArbitrumPayoutListener",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1372,
        "contract": "contracts/payoutlisteners/ArbitrumPayoutListener.sol:ArbitrumPayoutListener",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1702,
        "contract": "contracts/payoutlisteners/ArbitrumPayoutListener.sol:ArbitrumPayoutListener",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/payoutlisteners/ArbitrumPayoutListener.sol:ArbitrumPayoutListener",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/payoutlisteners/ArbitrumPayoutListener.sol:ArbitrumPayoutListener",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 790,
        "contract": "contracts/payoutlisteners/ArbitrumPayoutListener.sol:ArbitrumPayoutListener",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1087,
        "contract": "contracts/payoutlisteners/ArbitrumPayoutListener.sol:ArbitrumPayoutListener",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2941,
        "contract": "contracts/payoutlisteners/ArbitrumPayoutListener.sol:ArbitrumPayoutListener",
        "label": "exchange",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 3037,
        "contract": "contracts/payoutlisteners/ArbitrumPayoutListener.sol:ArbitrumPayoutListener",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3055,
        "contract": "contracts/payoutlisteners/ArbitrumPayoutListener.sol:ArbitrumPayoutListener",
        "label": "usdPlus",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IERC20)1793"
      },
      {
        "astId": 3058,
        "contract": "contracts/payoutlisteners/ArbitrumPayoutListener.sol:ArbitrumPayoutListener",
        "label": "solidLizardPools",
        "offset": 0,
        "slot": "303",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3061,
        "contract": "contracts/payoutlisteners/ArbitrumPayoutListener.sol:ArbitrumPayoutListener",
        "label": "solidLizardBribes",
        "offset": 0,
        "slot": "304",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3064,
        "contract": "contracts/payoutlisteners/ArbitrumPayoutListener.sol:ArbitrumPayoutListener",
        "label": "sterlingPools",
        "offset": 0,
        "slot": "305",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3066,
        "contract": "contracts/payoutlisteners/ArbitrumPayoutListener.sol:ArbitrumPayoutListener",
        "label": "sterlingWallet",
        "offset": 0,
        "slot": "306",
        "type": "t_address"
      },
      {
        "astId": 3069,
        "contract": "contracts/payoutlisteners/ArbitrumPayoutListener.sol:ArbitrumPayoutListener",
        "label": "arbiswapPools",
        "offset": 0,
        "slot": "307",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3071,
        "contract": "contracts/payoutlisteners/ArbitrumPayoutListener.sol:ArbitrumPayoutListener",
        "label": "arbiswapWallet",
        "offset": 0,
        "slot": "308",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1793": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/payoutlisteners/ArbitrumPayoutListener.sol:ArbitrumPayoutListener",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/payoutlisteners/ArbitrumPayoutListener.sol:ArbitrumPayoutListener",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}