{
  "address": "0x8767a49d90F6fD60295083eaDE854F3a67A67516",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "label",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "MintBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Payout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PORTFOLIO_AGENT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etsExchanger",
      "outputs": [
        {
          "internalType": "contract IHedgeExchanger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etsToken",
      "outputs": [
        {
          "internalType": "contract IRebaseToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAvgApy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "junior",
      "outputs": [
        {
          "internalType": "contract IRebaseToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAvgApyAbroad",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxJuniorWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintJunior",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRedeemJunior",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minAvgApyAbroad",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minJuniorWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "enum Insurance.TrancheType",
              "name": "tranche",
              "type": "uint8"
            }
          ],
          "internalType": "struct Insurance.InputMint",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "avgApy",
          "type": "uint256"
        }
      ],
      "name": "payout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "enum Insurance.TrancheType",
              "name": "tranche",
              "type": "uint8"
            }
          ],
          "internalType": "struct Insurance.InputRedeem",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "senior",
      "outputs": [
        {
          "internalType": "contract IRebaseToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minAvgApyAbroad",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAvgApyAbroad",
          "type": "uint256"
        }
      ],
      "name": "setAvgApyAbroad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "senior",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "junior",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            }
          ],
          "internalType": "struct Insurance.InsuranceParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "etsToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "etsExchanger",
              "type": "address"
            }
          ],
          "internalType": "struct InsuranceEtsOpUsdc.SetUpParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setSetup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minJuniorWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxJuniorWeight",
          "type": "uint256"
        }
      ],
      "name": "setWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "25d00f4013cb93617b488639df895615",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"MintBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Payout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PORTFOLIO_AGENT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etsExchanger\",\"outputs\":[{\"internalType\":\"contract IHedgeExchanger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etsToken\",\"outputs\":[{\"internalType\":\"contract IRebaseToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvgApy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"junior\",\"outputs\":[{\"internalType\":\"contract IRebaseToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAvgApyAbroad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxJuniorWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintJunior\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRedeemJunior\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAvgApyAbroad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minJuniorWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum Insurance.TrancheType\",\"name\":\"tranche\",\"type\":\"uint8\"}],\"internalType\":\"struct Insurance.InputMint\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"avgApy\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum Insurance.TrancheType\",\"name\":\"tranche\",\"type\":\"uint8\"}],\"internalType\":\"struct Insurance.InputRedeem\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senior\",\"outputs\":[{\"internalType\":\"contract IRebaseToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAvgApyAbroad\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAvgApyAbroad\",\"type\":\"uint256\"}],\"name\":\"setAvgApyAbroad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"senior\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"junior\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"internalType\":\"struct Insurance.InsuranceParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"etsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"etsExchanger\",\"type\":\"address\"}],\"internalType\":\"struct InsuranceEtsOpUsdc.SetUpParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setSetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minJuniorWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxJuniorWeight\",\"type\":\"uint256\"}],\"name\":\"setWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/optimism/InsuranceEtsOpUsdc.sol\":\"InsuranceEtsOpUsdc\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary OvnMath {\\n\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y) ? (x - y) : (y - x);\\n    }\\n\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\n    }\\n\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb72198ec96f2754e9bf20531b1b8744f06ff2cc1c720e0ecc07196087cbe9657\",\"license\":\"MIT\"},\"@overnight-contracts/common/contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.12;\\n\\n//import {Errors} from '../helpers/Errors.sol';\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  /**\\n   * @return One ray, 1e27\\n   **/\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  /**\\n   * @return One wad, 1e18\\n   **/\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e27/2\\n   **/\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  /**\\n   * @return Half ray, 1e18/2\\n   **/\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  /**\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a*b, in wad\\n   **/\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - halfWAD) / b, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\\n\\n    return (a * b + halfWAD) / WAD;\\n  }\\n\\n  /**\\n   * @dev Divides two wad, rounding half up to the nearest wad\\n   * @param a Wad\\n   * @param b Wad\\n   * @return The result of a/b, in wad\\n   **/\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'Errors.MATH_DIVISION_BY_ZERO');\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / WAD, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\\n\\n    return (a * WAD + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a*b, in ray\\n   **/\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n\\n    require(a <= (type(uint256).max - halfRAY) / b, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\\n\\n    return (a * b + halfRAY) / RAY;\\n  }\\n\\n  /**\\n   * @dev Divides two ray, rounding half up to the nearest ray\\n   * @param a Ray\\n   * @param b Ray\\n   * @return The result of a/b, in ray\\n   **/\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, 'Errors.MATH_DIVISION_BY_ZERO');\\n    uint256 halfB = b / 2;\\n\\n    require(a <= (type(uint256).max - halfB) / RAY, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\\n\\n    return (a * RAY + halfB) / b;\\n  }\\n\\n  /**\\n   * @dev Casts ray down to wad\\n   * @param a Ray\\n   * @return a casted to wad, rounded half up to the nearest wad\\n   **/\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n    uint256 result = halfRatio + a;\\n    require(result >= halfRatio, 'Errors.MATH_ADDITION_OVERFLOW');\\n\\n    return result / WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev Converts wad up to ray\\n   * @param a Wad\\n   * @return a converted in ray\\n   **/\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    uint256 result = a * WAD_RAY_RATIO;\\n    require(result / WAD_RAY_RATIO == a, 'Errors.MATH_MULTIPLICATION_OVERFLOW');\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xfac99582d2db89d9670f7c9c68c0884bc145a558935a90428fd2c4790ff35e67\",\"license\":\"agpl-3.0\"},\"contracts/Insurance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@overnight-contracts/common/contracts/libraries/OvnMath.sol\\\";\\nimport \\\"@overnight-contracts/common/contracts/libraries/WadRayMath.sol\\\";\\nimport \\\"./interfaces/IRebaseToken.sol\\\";\\n\\nabstract contract Insurance is Initializable, AccessControlUpgradeable, UUPSUpgradeable, PausableUpgradeable {\\n    using WadRayMath for uint256;\\n\\n    bytes32 public constant PORTFOLIO_AGENT_ROLE = keccak256(\\\"PORTFOLIO_AGENT_ROLE\\\");\\n\\n    IRebaseToken public senior;\\n    IRebaseToken public junior;\\n    IERC20 public asset;\\n\\n    uint256 public minJuniorWeight;\\n    uint256 public maxJuniorWeight;\\n\\n    // last block number when buy/redeem was executed\\n    uint256 public lastBlockNumber;\\n\\n    uint256 public maxAvgApyAbroad;\\n    uint256 public minAvgApyAbroad;\\n\\n    enum TrancheType {SENIOR, JUNIOR}\\n\\n    struct InputMint {\\n        uint256 amount;\\n        TrancheType tranche;\\n    }\\n\\n    struct InputRedeem {\\n        uint256 amount;\\n        TrancheType tranche;\\n    }\\n\\n    struct InsuranceParams {\\n        address senior;\\n        address junior;\\n        address asset;\\n    }\\n\\n    event Payout();\\n    event MintBurn(string label, uint256 amount, uint256 fee, address sender);\\n\\n    // ---  constructor\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function __Insurance_init() internal initializer {\\n        __AccessControl_init();\\n        __Pausable_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        // 10%\\n        minJuniorWeight = 10;\\n        // 30%\\n        maxJuniorWeight = 30;\\n\\n        // 3.5%\\n        minAvgApyAbroad = 3500000;\\n        // 45%\\n        maxAvgApyAbroad = 45000000;\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(DEFAULT_ADMIN_ROLE)\\n    override\\n    {}\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    modifier onlyPortfolioAgent() {\\n        require(hasRole(PORTFOLIO_AGENT_ROLE, msg.sender), \\\"Restricted to Portfolio Agent\\\");\\n        _;\\n    }\\n\\n    modifier oncePerBlock() {\\n        require(lastBlockNumber < block.number, \\\"Only once in block\\\");\\n        lastBlockNumber = block.number;\\n        _;\\n    }\\n\\n    function setParams(InsuranceParams calldata params) external onlyAdmin {\\n        require(params.junior != address(0), 'junior zero');\\n        require(params.senior != address(0), 'senior zero');\\n        require(params.asset != address(0), 'asset zero');\\n\\n        senior = IRebaseToken(params.senior);\\n        junior = IRebaseToken(params.junior);\\n        asset = IERC20(params.asset);\\n    }\\n\\n    function setWeights(uint256 _minJuniorWeight, uint256 _maxJuniorWeight) external onlyPortfolioAgent {\\n        minJuniorWeight = _minJuniorWeight;\\n        maxJuniorWeight = _maxJuniorWeight;\\n    }\\n\\n    function setAvgApyAbroad(uint256 _minAvgApyAbroad, uint256 _maxAvgApyAbroad) external onlyAdmin {\\n        minAvgApyAbroad = _minAvgApyAbroad;\\n        maxAvgApyAbroad = _maxAvgApyAbroad;\\n    }\\n\\n\\n    function totalSupply() public view returns (uint256){\\n        return senior.totalSupply() + junior.totalSupply();\\n    }\\n\\n    function mint(InputMint calldata input) external whenNotPaused oncePerBlock {\\n        _mint(input.amount, input.tranche == TrancheType.JUNIOR);\\n    }\\n\\n    function _mint(uint256 _amount, bool isJunior) internal {\\n        require(_amount > 0, \\\"Amount of asset is zero\\\");\\n        require(asset.balanceOf(msg.sender) >= _amount, \\\"Not enough tokens to mint\\\");\\n\\n        if(isJunior){\\n            require(_amount <= maxMintJunior(), 'Max mint junior');\\n        }\\n\\n        IRebaseToken token = isJunior ? junior : senior;\\n\\n        asset.transferFrom(msg.sender, address(this), _amount);\\n        uint256 minNavExpected = OvnMath.subBasisPoints(netAssetValue(), 4); //0.04%\\n        _deposit(_amount);\\n        require(netAssetValue() >= minNavExpected, \\\"NAV less than expected\\\");\\n\\n        uint256 trancheAmount = _assetToTrancheAmount(_amount, token);\\n        require(trancheAmount > 0, \\\"Amount of Senior is zero\\\");\\n        token.mint(msg.sender, trancheAmount);\\n\\n        emit MintBurn(isJunior ? 'mint:junior' : 'mint:senior', trancheAmount, 0, msg.sender);\\n    }\\n\\n    // Convert Asset amount (e6 | e18) to (Senior|Junior) amount (e6)\\n    function _assetToTrancheAmount(uint256 _amount, IRebaseToken token) internal returns (uint256) {\\n        uint256 trancheDecimals = token.decimals();\\n        uint256 assetDecimals = IERC20Metadata(address(asset)).decimals();\\n\\n        uint256 trancheAmount;\\n        if (assetDecimals > trancheDecimals) {\\n            trancheAmount = _amount / (10 ** (assetDecimals - trancheDecimals));\\n        } else {\\n            trancheAmount = _amount * (10 ** (trancheDecimals - assetDecimals));\\n        }\\n        return trancheAmount;\\n\\n    }\\n\\n    function redeem(InputRedeem calldata input) external whenNotPaused oncePerBlock {\\n        _redeem(input.amount, input.tranche == TrancheType.JUNIOR);\\n    }\\n\\n    function _redeem(uint256 _amount, bool isJunior) internal {\\n        require(_amount > 0, \\\"Amount of asset is zero\\\");\\n\\n        if(isJunior){\\n            require(_amount <= maxRedeemJunior(), 'Max redeem junior');\\n        }\\n\\n        IRebaseToken token = isJunior ? junior : senior;\\n\\n        require(token.balanceOf(msg.sender) >= _amount, \\\"Not enough tokens to redeem\\\");\\n        token.burn(msg.sender, _amount);\\n\\n        uint256 assetAmount = _trancheAmountToAsset(_amount, token);\\n        require(assetAmount > 0, \\\"Amount of asset is zero\\\");\\n\\n        uint256 minNavExpected = OvnMath.subBasisPoints(netAssetValue() - assetAmount, 4); //0.04%\\n        _withdraw(assetAmount);\\n        require(asset.balanceOf(address(this)) >= assetAmount, \\\"Not enough for transfer\\\" );\\n        asset.transfer(msg.sender, assetAmount);\\n        require(netAssetValue() >= minNavExpected, \\\"NAV less than expected\\\");\\n\\n        emit MintBurn(isJunior ? 'redeem:junior' : 'redeem:senior', _amount, 0, msg.sender);\\n    }\\n\\n    // Convert (Senior|Junior) amount (e6) to Asset amount (e6 | e18)\\n    function _trancheAmountToAsset(uint256 _amount, IRebaseToken token) internal returns (uint256) {\\n\\n        uint256 trancheAmount;\\n        uint256 assetDecimals = IERC20Metadata(address(asset)).decimals();\\n        uint256 trancheDecimals = token.decimals();\\n        if (assetDecimals > trancheDecimals) {\\n            trancheAmount = _amount * (10 ** (assetDecimals - trancheDecimals));\\n        } else {\\n            trancheAmount = _amount / (10 ** (trancheDecimals - assetDecimals));\\n        }\\n        return trancheAmount;\\n\\n    }\\n    function maxMintJunior() public view returns (uint256){\\n\\n        if(senior.totalSupply() == 0){\\n            return 0;\\n        }\\n\\n        uint256 temp = (totalSupply() * maxJuniorWeight / 100);\\n        uint256 juniorSupply = junior.totalSupply();\\n\\n        if(temp > juniorSupply){\\n            return temp - juniorSupply;\\n        }else {\\n            return 0;\\n        }\\n    }\\n\\n    function maxRedeemJunior() public view returns (uint256){\\n\\n        if(senior.totalSupply() == 0){\\n            return junior.totalSupply();\\n        }\\n\\n        uint256 temp = (totalSupply() * minJuniorWeight / 100);\\n        uint256 juniorSupply = junior.totalSupply();\\n\\n        if(juniorSupply > temp){\\n            return juniorSupply - temp;\\n        }else {\\n            return 0;\\n        }\\n    }\\n\\n\\n    function getWeight() public view returns (uint256) {\\n\\n        uint256 juniorTotalSupply = junior.totalSupply();\\n\\n        if(juniorTotalSupply > 0){\\n            return juniorTotalSupply / totalSupply();\\n        }else {\\n            return 0;\\n        }\\n    }\\n\\n    function _deposit(\\n        uint256 _amount\\n    ) internal virtual {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _withdraw(\\n        uint256 _amount\\n    ) internal virtual {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function netAssetValue() public view virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function getAvgApy() public view virtual returns (uint256) {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n\\n    function payout(uint256 avgApy) public whenNotPaused oncePerBlock onlyAdmin {\\n        _payout(avgApy);\\n    }\\n\\n    function _payout(uint256 avgApy) internal {\\n\\n        if(senior.totalSupply() == 0 || junior.totalSupply() == 0){\\n            return;\\n        }\\n\\n//        uint256 avgApy = getAvgApy();\\n        require(avgApy >= minAvgApyAbroad && maxAvgApyAbroad >= avgApy, 'avgApy abroad');\\n        uint256 dailyApy =  avgApy / 365;\\n        require(dailyApy != 0, 'dailyApy is zero');\\n\\n        uint256 seniorTotalNew = senior.totalSupply() + (senior.totalSupply() / 100 * dailyApy) / 1e6;\\n\\n        uint256 seniorIndexNew = seniorTotalNew.wadToRay() * 1e27 / senior.scaledTotalSupply();\\n        senior.setLiquidityIndex(seniorIndexNew);\\n        require(seniorTotalNew == senior.totalSupply(), 'senior.total not equal');\\n\\n        uint256 juniorTotalNew = netAssetValue() - seniorTotalNew;\\n\\n        uint256 juniorIndexNew = juniorTotalNew.wadToRay() * 1e27 / junior.scaledTotalSupply();\\n        junior.setLiquidityIndex(juniorIndexNew);\\n        require(juniorTotalNew == junior.totalSupply(), 'junior.total not equal');\\n\\n        require(netAssetValue() == totalSupply(), 'nav not equal total');\\n\\n        emit Payout();\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x349ebb37881a8c8eecaa41b429c175ebcb5973f026791f35a5ba53b835bddec8\",\"license\":\"MIT\"},\"contracts/interfaces/IHedgeExchanger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IHedgeExchanger {\\n\\n\\n    function buy(uint256 _amount, string calldata referral) external returns (uint256);\\n\\n    function redeem(uint256 _amount) external returns (uint256);\\n\\n    function strategy() external returns (address);\\n}\\n\",\"keccak256\":\"0x73bf74cce0f080cca725c04e61b32aa1495e5e73978d978de531a879c68913ee\",\"license\":\"MIT\"},\"contracts/interfaces/IHedgeStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IHedgeStrategy {\\n\\n    function netAssetValue() external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x7067d55245e57c721c8d78ad36ee6aa4f3b6074f3b1f161daf8db37a219eabbd\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IRebaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.9.0;\\n\\ninterface IRebaseToken {\\n\\n    function liquidityIndex() external view returns (uint256);\\n\\n    function mint(address _sender, uint256 _amount) external;\\n\\n    function burn(address _sender, uint256 _amount) external;\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Calculates the balance of the user: principal balance + interest generated by the principal\\n     * @param user The user whose balance is calculated\\n     * @return The balance of the user\\n     **/\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n     * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n     * @param user The user whose balance is calculated\\n     * @return The scaled balance of the user\\n     **/\\n    function scaledBalanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev calculates the total supply of the specific aToken\\n     * since the balance of every single user increases over time, the total supply\\n     * does that too.\\n     * @return the current total supply\\n     **/\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalMint() external view returns (uint256);\\n\\n    function totalBurn() external view returns (uint256);\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    /**\\n     * @dev Returns the scaled total supply of the variable debt token\\n     * @return the scaled total supply\\n     **/\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    function ownerLength() external view returns (uint256);\\n\\n    function ownerAt(uint256 index) external view returns (address);\\n\\n    function ownerBalanceAt(uint256 index) external view returns (uint256);\\n\\n    function setLiquidityIndex(uint256 liquidityIndex) external;\\n\\n    /**\\n   * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external pure returns (uint8);\\n\\n}\\n\",\"keccak256\":\"0x2676500af2e0abc12067f6d32fffca7ecf65ce7a471381330fe38c0e13f07aa3\",\"license\":\"MIT\"},\"contracts/strategies/optimism/InsuranceEtsOpUsdc.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"../../Insurance.sol\\\";\\nimport \\\"../../interfaces/IHedgeExchanger.sol\\\";\\nimport \\\"../../interfaces/IHedgeStrategy.sol\\\";\\n\\ncontract InsuranceEtsOpUsdc is Insurance {\\n\\n\\n    IRebaseToken public etsToken;\\n    IHedgeExchanger public etsExchanger;\\n\\n\\n    struct SetUpParams {\\n        address etsToken;\\n        address etsExchanger;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __Insurance_init();\\n    }\\n\\n\\n    function setSetup(SetUpParams calldata params) external onlyAdmin {\\n        etsToken = IRebaseToken(params.etsToken);\\n        etsExchanger = IHedgeExchanger(params.etsExchanger);\\n    }\\n\\n\\n    function _deposit(uint256 _amount) internal override {\\n        asset.approve(address(etsExchanger), _amount);\\n        etsExchanger.buy(_amount, '');\\n    }\\n\\n    function _withdraw(uint256 _amount) internal override {\\n        etsToken.approve(address(etsExchanger), _amount);\\n        etsExchanger.redeem(_amount);\\n    }\\n\\n    function netAssetValue() public view override returns (uint256) {\\n        return etsToken.balanceOf(address(this));\\n    }\\n\\n    function getAvgApy() public view override returns (uint256) {\\n        return 0;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xe7b058de2ba9ff488a637cced823ab6f53d6ead1e6c2c7683fd16e80e413c5b2\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16158080156200003a5750600054600160ff909116105b806200006a575062000057306200022360201b620013fc1760201c565b1580156200006a575060005460ff166001145b620000c25760405162461bcd60e51b815260206004820152602e602482015260008051602062003b0683398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015620000e6576000805461ff0019166101001790555b80156200011c576000805461ff00191690556040516001815260008051602062003b268339815191529060200160405180910390a15b50600054610100900460ff16158080156200013e5750600054600160ff909116105b806200016e57506200015b306200022360201b620013fc1760201c565b1580156200016e575060005460ff166001145b620001c25760405162461bcd60e51b815260206004820152602e602482015260008051602062003b0683398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000b9565b6000805460ff191660011790558015620001e6576000805461ff0019166101001790555b80156200021c576000805461ff00191690556040516001815260008051602062003b268339815191529060200160405180910390a15b5062000232565b6001600160a01b03163b151590565b60805160601c6138996200026d600039600081816108e401528181610924015281816109c401528181610a040152610bee01526138996000f3fe60806040526004361061020f5760003560e01c80637fdbecaa11610118578063b84704d2116100a0578063e11523431161006f578063e1152343146105bd578063eab77ac9146105dd578063ef6ffef2146105fe578063f15086e51461061e578063f9e9dc4d1461063f57600080fd5b8063b84704d214610546578063bcabeac21461055d578063d547741f1461057d578063d9550b101461059d57600080fd5b8063a217fddf116100e7578063a217fddf146104d2578063a3673b38146104e7578063a9b4b780146104fc578063abd4dde014610511578063b34b9c461461052557600080fd5b80637fdbecaa146104665780638129fc1c1461047d5780638ef76ceb1461049257806391d14854146104b257600080fd5b806338d52e0f1161019b57806352d1902d1161016a57806352d1902d146103ce5780635c975abb146103e35780635d4bcd4b146103fb5780635dbd733a1461041b57806379480fe41461044f57600080fd5b806338d52e0f1461034c57806346ca0f4d146103855780634f1ef286146103a657806351e0d30c146103b957600080fd5b8063248a9ca3116101e2578063248a9ca3146102a55780632552317c146102d55780632f2ff15d146102ec57806336568abe1461030c5780633659cfe61461032c57600080fd5b806301ffc9a71461021457806311f8f93c14610249578063161567f21461026e57806318160ddd14610290575b600080fd5b34801561022057600080fd5b5061023461022f36600461329e565b610654565b60405190151581526020015b60405180910390f35b34801561025557600080fd5b506102606101305481565b604051908152602001610240565b34801561027a57600080fd5b5061028e6102893660046132e9565b61068b565b005b34801561029c57600080fd5b5061026061071d565b3480156102b157600080fd5b506102606102c0366004613240565b60009081526065602052604090206001015490565b3480156102e157600080fd5b506102606101325481565b3480156102f857600080fd5b5061028e610307366004613272565b610831565b34801561031857600080fd5b5061028e610327366004613272565b61085b565b34801561033857600080fd5b5061028e610347366004613141565b6108d9565b34801561035857600080fd5b5061012f5461036d906001600160a01b031681565b6040516001600160a01b039091168152602001610240565b34801561039157600080fd5b506101675461036d906001600160a01b031681565b61028e6103b436600461315c565b6109b9565b3480156103c557600080fd5b50610260610a86565b3480156103da57600080fd5b50610260610be1565b3480156103ef57600080fd5b5060fb5460ff16610234565b34801561040757600080fd5b5061028e610416366004613305565b610c94565b34801561042757600080fd5b506102607fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b34801561045b57600080fd5b506102606101345481565b34801561047257600080fd5b506102606101315481565b34801561048957600080fd5b5061028e610e4f565b34801561049e57600080fd5b5061028e6104ad3660046132e9565b610f19565b3480156104be57600080fd5b506102346104cd366004613272565b610f76565b3480156104de57600080fd5b50610260600081565b3480156104f357600080fd5b50610260610fa1565b34801561050857600080fd5b5061026061101e565b34801561051d57600080fd5b506000610260565b34801561053157600080fd5b506101685461036d906001600160a01b031681565b34801561055257600080fd5b506102606101335481565b34801561056957600080fd5b5061028e610578366004613317565b6110d0565b34801561058957600080fd5b5061028e610598366004613272565b611104565b3480156105a957600080fd5b5061028e6105b83660046132e9565b611129565b3480156105c957600080fd5b5061028e6105d8366004613240565b611186565b3480156105e957600080fd5b5061012e5461036d906001600160a01b031681565b34801561060a57600080fd5b5061028e610619366004613317565b6111e5565b34801561062a57600080fd5b5061012d5461036d906001600160a01b031681565b34801561064b57600080fd5b50610260611268565b60006001600160e01b03198216637965db0b60e01b148061068557506301ffc9a760e01b6001600160e01b03198316145b92915050565b610696600033610f76565b6106bb5760405162461bcd60e51b81526004016106b290613581565b60405180910390fd5b6106c86020820182613141565b61016780546001600160a01b0319166001600160a01b03929092169190911790556106f96040820160208301613141565b61016880546001600160a01b0319166001600160a01b039290921691909117905550565b61012e54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561076357600080fd5b505afa158015610777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079b9190613259565b61012d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ea57600080fd5b505afa1580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190613259565b61082c9190613626565b905090565b60008281526065602052604090206001015461084c8161140b565b6108568383611415565b505050565b6001600160a01b03811633146108cb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106b2565b6108d5828261149b565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109225760405162461bcd60e51b81526004016106b290613464565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661096b60008051602061381d833981519152546001600160a01b031690565b6001600160a01b0316146109915760405162461bcd60e51b81526004016106b2906134b0565b61099a81611502565b604080516000808252602082019092526109b69183919061150d565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610a025760405162461bcd60e51b81526004016106b290613464565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a4b60008051602061381d833981519152546001600160a01b031690565b6001600160a01b031614610a715760405162461bcd60e51b81526004016106b2906134b0565b610a7a82611502565b6108d58282600161150d565b61012d54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015610acc57600080fd5b505afa158015610ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b049190613259565b610b0e5750600090565b6000606461013154610b1e61071d565b610b28919061374b565b610b32919061363e565b9050600061012e60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8557600080fd5b505afa158015610b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbd9190613259565b905080821115610bd857610bd1818361376a565b9250505090565b60009250505090565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c815760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016106b2565b5060008051602061381d83398151915290565b610c9f600033610f76565b610cbb5760405162461bcd60e51b81526004016106b290613581565b6000610ccd6040830160208401613141565b6001600160a01b03161415610d125760405162461bcd60e51b815260206004820152600b60248201526a6a756e696f72207a65726f60a81b60448201526064016106b2565b6000610d216020830183613141565b6001600160a01b03161415610d665760405162461bcd60e51b815260206004820152600b60248201526a73656e696f72207a65726f60a81b60448201526064016106b2565b6000610d786060830160408401613141565b6001600160a01b03161415610dbc5760405162461bcd60e51b815260206004820152600a6024820152696173736574207a65726f60b01b60448201526064016106b2565b610dc96020820182613141565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055610dfa6040820160208301613141565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055610e2b6060820160408301613141565b61012f80546001600160a01b0319166001600160a01b039290921691909117905550565b600054610100900460ff1615808015610e6f5750600054600160ff909116105b80610e895750303b158015610e89575060005460ff166001145b610ea55760405162461bcd60e51b81526004016106b290613533565b6000805460ff191660011790558015610ec8576000805461ff0019166101001790555b610ed0611687565b80156109b6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b610f21611782565b436101325410610f435760405162461bcd60e51b81526004016106b2906135af565b43610132556109b681356001610f5f60408501602086016132c8565b6001811115610f7057610f706137da565b146117ca565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610167546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610fe657600080fd5b505afa158015610ffa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082c9190613259565b60008061012e60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561107057600080fd5b505afa158015611084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a89190613259565b905080156110c8576110b861071d565b6110c2908261363e565b91505090565b600091505090565b6110db600033610f76565b6110f75760405162461bcd60e51b81526004016106b290613581565b6101349190915561013355565b60008281526065602052604090206001015461111f8161140b565b610856838361149b565b611131611782565b4361013254106111535760405162461bcd60e51b81526004016106b2906135af565b43610132556109b68135600161116f60408501602086016132c8565b6001811115611180576111806137da565b14611b7b565b61118e611782565b4361013254106111b05760405162461bcd60e51b81526004016106b2906135af565b43610132556111c0600033610f76565b6111dc5760405162461bcd60e51b81526004016106b290613581565b6109b681611fba565b61120f7fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733610f76565b61125b5760405162461bcd60e51b815260206004820152601d60248201527f5265737472696374656420746f20506f7274666f6c696f204167656e7400000060448201526064016106b2565b6101309190915561013155565b61012d54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156112ae57600080fd5b505afa1580156112c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e69190613259565b6113395761012e60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe657600080fd5b600060646101305461134961071d565b611353919061374b565b61135d919061363e565b9050600061012e60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113b057600080fd5b505afa1580156113c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e89190613259565b905081811115610bd857610bd1828261376a565b6001600160a01b03163b151590565b6109b68133612717565b61141f8282610f76565b6108d55760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556114573390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6114a58282610f76565b156108d55760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006108d58161140b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611540576108568361277b565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561157957600080fd5b505afa9250505080156115a9575060408051601f3d908101601f191682019092526115a691810190613259565b60015b61160c5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016106b2565b60008051602061381d833981519152811461167b5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016106b2565b50610856838383612817565b600054610100900460ff16158080156116a75750600054600160ff909116105b806116c15750303b1580156116c1575060005460ff166001145b6116dd5760405162461bcd60e51b81526004016106b290613533565b6000805460ff191660011790558015611700576000805461ff0019166101001790555b611708612842565b611710612869565b611718612842565b611723600033611415565b600a61013055601e61013155623567e0610134556302aea5406101335580156109b6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610f0e565b60fb5460ff16156117c85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106b2565b565b600082116117ea5760405162461bcd60e51b81526004016106b2906134fc565b61012f546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b15801561182e57600080fd5b505afa158015611842573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118669190613259565b10156118b45760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f75676820746f6b656e7320746f206d696e740000000000000060448201526064016106b2565b8015611903576118c2610a86565b8211156119035760405162461bcd60e51b815260206004820152600f60248201526e26b0bc1036b4b73a10353ab734b7b960891b60448201526064016106b2565b60008161191c5761012d546001600160a01b031661192a565b61012e546001600160a01b03165b61012f546040516323b872dd60e01b8152336004820152306024820152604481018690529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561197e57600080fd5b505af1158015611992573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b6919061321e565b5060006119cb6119c4610fa1565b6004612898565b90506119d6846128c2565b806119df610fa1565b1015611a265760405162461bcd60e51b8152602060048201526016602482015275139055881b195cdcc81d1a185b88195e1c1958dd195960521b60448201526064016106b2565b6000611a3285846129dd565b905060008111611a845760405162461bcd60e51b815260206004820152601860248201527f416d6f756e74206f662053656e696f72206973207a65726f000000000000000060448201526064016106b2565b6040516340c10f1960e01b8152336004820152602481018290526001600160a01b038416906340c10f1990604401600060405180830381600087803b158015611acc57600080fd5b505af1158015611ae0573d6000803e3d6000fd5b505050507ffa6acd633ee08073d696f1ad14b9f42838087eb209ab689786d498e76269877884611b33576040518060400160405280600b81526020016a36b4b73a1d39b2b734b7b960a91b815250611b58565b6040518060400160405280600b81526020016a36b4b73a1d353ab734b7b960a91b8152505b82600033604051611b6c949392919061342c565b60405180910390a15050505050565b60008211611b9b5760405162461bcd60e51b81526004016106b2906134fc565b8015611bec57611ba9611268565b821115611bec5760405162461bcd60e51b815260206004820152601160248201527026b0bc103932b232b2b690353ab734b7b960791b60448201526064016106b2565b600081611c055761012d546001600160a01b0316611c13565b61012e546001600160a01b03165b6040516370a0823160e01b815233600482015290915083906001600160a01b038316906370a082319060240160206040518083038186803b158015611c5757600080fd5b505afa158015611c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8f9190613259565b1015611cdd5760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656e6f75676820746f6b656e7320746f2072656465656d000000000060448201526064016106b2565b604051632770a7eb60e21b8152336004820152602481018490526001600160a01b03821690639dc29fac90604401600060405180830381600087803b158015611d2557600080fd5b505af1158015611d39573d6000803e3d6000fd5b505050506000611d498483612b3f565b905060008111611d6b5760405162461bcd60e51b81526004016106b2906134fc565b6000611d8382611d79610fa1565b6119c4919061376a565b9050611d8e82612ca2565b61012f546040516370a0823160e01b815230600482015283916001600160a01b0316906370a082319060240160206040518083038186803b158015611dd257600080fd5b505afa158015611de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0a9190613259565b1015611e585760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f75676820666f72207472616e7366657200000000000000000060448201526064016106b2565b61012f5460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015611ea557600080fd5b505af1158015611eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edd919061321e565b5080611ee7610fa1565b1015611f2e5760405162461bcd60e51b8152602060048201526016602482015275139055881b195cdcc81d1a185b88195e1c1958dd195960521b60448201526064016106b2565b7ffa6acd633ee08073d696f1ad14b9f42838087eb209ab689786d498e76269877884611f7f576040518060400160405280600d81526020016c3932b232b2b69d39b2b734b7b960991b815250611fa6565b6040518060400160405280600d81526020016c3932b232b2b69d353ab734b7b960991b8152505b86600033604051611b6c949392919061342c565b61012d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561200957600080fd5b505afa15801561201d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120419190613259565b15806120d1575061012e60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561209757600080fd5b505afa1580156120ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120cf9190613259565b155b156120d95750565b6101345481101580156120ef5750806101335410155b61212b5760405162461bcd60e51b815260206004820152600d60248201526c185d99d05c1e4818589c9bd859609a1b60448201526064016106b2565b600061213961016d8361363e565b90508061217b5760405162461bcd60e51b815260206004820152601060248201526f6461696c79417079206973207a65726f60801b60448201526064016106b2565b6000620f424082606461012d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121d357600080fd5b505afa1580156121e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220b9190613259565b612215919061363e565b61221f919061374b565b612229919061363e565b61012d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561227857600080fd5b505afa15801561228c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b09190613259565b6122ba9190613626565b9050600061012d60009054906101000a90046001600160a01b03166001600160a01b031663b1bf962d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561230d57600080fd5b505afa158015612321573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123459190613259565b61234e83612d5f565b612364906b033b2e3c9fd0803ce800000061374b565b61236e919061363e565b61012d5460405163b2be259160e01b8152600481018390529192506001600160a01b03169063b2be259190602401600060405180830381600087803b1580156123b657600080fd5b505af11580156123ca573d6000803e3d6000fd5b5050505061012d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561241d57600080fd5b505afa158015612431573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124559190613259565b821461249c5760405162461bcd60e51b81526020600482015260166024820152751cd95b9a5bdc8b9d1bdd185b081b9bdd08195c5d585b60521b60448201526064016106b2565b6000826124a7610fa1565b6124b1919061376a565b9050600061012e60009054906101000a90046001600160a01b03166001600160a01b031663b1bf962d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561250457600080fd5b505afa158015612518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253c9190613259565b61254583612d5f565b61255b906b033b2e3c9fd0803ce800000061374b565b612565919061363e565b61012e5460405163b2be259160e01b8152600481018390529192506001600160a01b03169063b2be259190602401600060405180830381600087803b1580156125ad57600080fd5b505af11580156125c1573d6000803e3d6000fd5b5050505061012e60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561261457600080fd5b505afa158015612628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264c9190613259565b82146126935760405162461bcd60e51b81526020600482015260166024820152751a9d5b9a5bdc8b9d1bdd185b081b9bdd08195c5d585b60521b60448201526064016106b2565b61269b61071d565b6126a3610fa1565b146126e65760405162461bcd60e51b81526020600482015260136024820152721b985d881b9bdd08195c5d585b081d1bdd185b606a1b60448201526064016106b2565b6040517f354d7e40465161205ea9dee6ebfe67aee9bc460c83cd2397a35e68c5f6ef5e5190600090a1505050505050565b6127218282610f76565b6108d557612739816001600160a01b03166014612dda565b612744836020612dda565b6040516020016127559291906133a4565b60408051601f198184030181529082905262461bcd60e51b82526106b291600401613419565b6001600160a01b0381163b6127e85760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106b2565b60008051602061381d83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61282083612f76565b60008251118061282d5750805b156108565761283c8383612fb6565b50505050565b600054610100900460ff166117c85760405162461bcd60e51b81526004016106b2906135db565b600054610100900460ff166128905760405162461bcd60e51b81526004016106b2906135db565b6117c86130a1565b60006127106128a7838261376a565b6128b1908561374b565b6128bb919061363e565b9392505050565b61012f546101685460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b390604401602060405180830381600087803b15801561291457600080fd5b505af1158015612928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294c919061321e565b5061016854604080516316fb876360e31b8152600481018490526024810191909152600060448201526001600160a01b039091169063b7dc3b18906064015b602060405180830381600087803b1580156129a557600080fd5b505af11580156129b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d59190613259565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612a1957600080fd5b505afa158015612a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a519190613339565b60ff169050600061012f60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612aa757600080fd5b505afa158015612abb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612adf9190613339565b60ff169050600082821115612b1457612af8838361376a565b612b0390600a6136a3565b612b0d908761363e565b9050612b36565b612b1e828461376a565b612b2990600a6136a3565b612b33908761374b565b90505b95945050505050565b600080600061012f60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612b9357600080fd5b505afa158015612ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bcb9190613339565b60ff1690506000846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612c0b57600080fd5b505afa158015612c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c439190613339565b60ff16905080821115612c7657612c5a818361376a565b612c6590600a6136a3565b612c6f908761374b565b9250612c98565b612c80828261376a565b612c8b90600a6136a3565b612c95908761363e565b92505b5090949350505050565b610167546101685460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b390604401602060405180830381600087803b158015612cf457600080fd5b505af1158015612d08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2c919061321e565b506101685460405163db006a7560e01b8152600481018390526001600160a01b039091169063db006a759060240161298b565b600080612d70633b9aca008461374b565b905082612d81633b9aca008361363e565b146106855760405162461bcd60e51b815260206004820152602360248201527f4572726f72732e4d4154485f4d554c5449504c49434154494f4e5f4f564552466044820152624c4f5760e81b60648201526084016106b2565b60606000612de983600261374b565b612df4906002613626565b67ffffffffffffffff811115612e0c57612e0c613806565b6040519080825280601f01601f191660200182016040528015612e36576020820181803683370190505b509050600360fc1b81600081518110612e5157612e516137f0565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612e8057612e806137f0565b60200101906001600160f81b031916908160001a9053506000612ea484600261374b565b612eaf906001613626565b90505b6001811115612f27576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612ee357612ee36137f0565b1a60f81b828281518110612ef957612ef96137f0565b60200101906001600160f81b031916908160001a90535060049490941c93612f20816137ad565b9050612eb2565b5083156128bb5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106b2565b612f7f8161277b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61301e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106b2565b600080846001600160a01b0316846040516130399190613388565b600060405180830381855af49150503d8060008114613074576040519150601f19603f3d011682016040523d82523d6000602084013e613079565b606091505b5091509150612b36828260405180606001604052806027815260200161383d602791396130d4565b600054610100900460ff166130c85760405162461bcd60e51b81526004016106b2906135db565b60fb805460ff19169055565b606083156130e35750816128bb565b8251156130f35782518084602001fd5b8160405162461bcd60e51b81526004016106b29190613419565b80356001600160a01b038116811461312457600080fd5b919050565b60006040828403121561313b57600080fd5b50919050565b60006020828403121561315357600080fd5b6128bb8261310d565b6000806040838503121561316f57600080fd5b6131788361310d565b9150602083013567ffffffffffffffff8082111561319557600080fd5b818501915085601f8301126131a957600080fd5b8135818111156131bb576131bb613806565b604051601f8201601f19908116603f011681019083821181831017156131e3576131e3613806565b816040528281528860208487010111156131fc57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561323057600080fd5b815180151581146128bb57600080fd5b60006020828403121561325257600080fd5b5035919050565b60006020828403121561326b57600080fd5b5051919050565b6000806040838503121561328557600080fd5b823591506132956020840161310d565b90509250929050565b6000602082840312156132b057600080fd5b81356001600160e01b0319811681146128bb57600080fd5b6000602082840312156132da57600080fd5b8135600281106128bb57600080fd5b6000604082840312156132fb57600080fd5b6128bb8383613129565b60006060828403121561313b57600080fd5b6000806040838503121561332a57600080fd5b50508035926020909101359150565b60006020828403121561334b57600080fd5b815160ff811681146128bb57600080fd5b60008151808452613374816020860160208601613781565b601f01601f19169290920160200192915050565b6000825161339a818460208701613781565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516133dc816017850160208801613781565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161340d816028840160208801613781565b01602801949350505050565b6020815260006128bb602083018461335c565b60808152600061343f608083018761335c565b60208301959095525060408101929092526001600160a01b0316606090910152919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526017908201527f416d6f756e74206f66206173736574206973207a65726f000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b6020808252601290820152714f6e6c79206f6e636520696e20626c6f636b60701b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008219821115613639576136396137c4565b500190565b60008261365b57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561369b578160001904821115613681576136816137c4565b8085161561368e57918102915b93841c9390800290613665565b509250929050565b60006128bb83836000826136b957506001610685565b816136c657506000610685565b81600181146136dc57600281146136e657613702565b6001915050610685565b60ff8411156136f7576136f76137c4565b50506001821b610685565b5060208310610133831016604e8410600b8410161715613725575081810a610685565b61372f8383613660565b8060001904821115613743576137436137c4565b029392505050565b6000816000190483118215151615613765576137656137c4565b500290565b60008282101561377c5761377c6137c4565b500390565b60005b8381101561379c578181015183820152602001613784565b8381111561283c5750506000910152565b6000816137bc576137bc6137c4565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d2c660c0f1178075abb174f75b28bf8e2b38494f791a43614a689bdc06f3099064736f6c63430008060033496e697469616c697a61626c653a20636f6e747261637420697320616c7265617f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498",
  "deployedBytecode": "0x60806040526004361061020f5760003560e01c80637fdbecaa11610118578063b84704d2116100a0578063e11523431161006f578063e1152343146105bd578063eab77ac9146105dd578063ef6ffef2146105fe578063f15086e51461061e578063f9e9dc4d1461063f57600080fd5b8063b84704d214610546578063bcabeac21461055d578063d547741f1461057d578063d9550b101461059d57600080fd5b8063a217fddf116100e7578063a217fddf146104d2578063a3673b38146104e7578063a9b4b780146104fc578063abd4dde014610511578063b34b9c461461052557600080fd5b80637fdbecaa146104665780638129fc1c1461047d5780638ef76ceb1461049257806391d14854146104b257600080fd5b806338d52e0f1161019b57806352d1902d1161016a57806352d1902d146103ce5780635c975abb146103e35780635d4bcd4b146103fb5780635dbd733a1461041b57806379480fe41461044f57600080fd5b806338d52e0f1461034c57806346ca0f4d146103855780634f1ef286146103a657806351e0d30c146103b957600080fd5b8063248a9ca3116101e2578063248a9ca3146102a55780632552317c146102d55780632f2ff15d146102ec57806336568abe1461030c5780633659cfe61461032c57600080fd5b806301ffc9a71461021457806311f8f93c14610249578063161567f21461026e57806318160ddd14610290575b600080fd5b34801561022057600080fd5b5061023461022f36600461329e565b610654565b60405190151581526020015b60405180910390f35b34801561025557600080fd5b506102606101305481565b604051908152602001610240565b34801561027a57600080fd5b5061028e6102893660046132e9565b61068b565b005b34801561029c57600080fd5b5061026061071d565b3480156102b157600080fd5b506102606102c0366004613240565b60009081526065602052604090206001015490565b3480156102e157600080fd5b506102606101325481565b3480156102f857600080fd5b5061028e610307366004613272565b610831565b34801561031857600080fd5b5061028e610327366004613272565b61085b565b34801561033857600080fd5b5061028e610347366004613141565b6108d9565b34801561035857600080fd5b5061012f5461036d906001600160a01b031681565b6040516001600160a01b039091168152602001610240565b34801561039157600080fd5b506101675461036d906001600160a01b031681565b61028e6103b436600461315c565b6109b9565b3480156103c557600080fd5b50610260610a86565b3480156103da57600080fd5b50610260610be1565b3480156103ef57600080fd5b5060fb5460ff16610234565b34801561040757600080fd5b5061028e610416366004613305565b610c94565b34801561042757600080fd5b506102607fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913781565b34801561045b57600080fd5b506102606101345481565b34801561047257600080fd5b506102606101315481565b34801561048957600080fd5b5061028e610e4f565b34801561049e57600080fd5b5061028e6104ad3660046132e9565b610f19565b3480156104be57600080fd5b506102346104cd366004613272565b610f76565b3480156104de57600080fd5b50610260600081565b3480156104f357600080fd5b50610260610fa1565b34801561050857600080fd5b5061026061101e565b34801561051d57600080fd5b506000610260565b34801561053157600080fd5b506101685461036d906001600160a01b031681565b34801561055257600080fd5b506102606101335481565b34801561056957600080fd5b5061028e610578366004613317565b6110d0565b34801561058957600080fd5b5061028e610598366004613272565b611104565b3480156105a957600080fd5b5061028e6105b83660046132e9565b611129565b3480156105c957600080fd5b5061028e6105d8366004613240565b611186565b3480156105e957600080fd5b5061012e5461036d906001600160a01b031681565b34801561060a57600080fd5b5061028e610619366004613317565b6111e5565b34801561062a57600080fd5b5061012d5461036d906001600160a01b031681565b34801561064b57600080fd5b50610260611268565b60006001600160e01b03198216637965db0b60e01b148061068557506301ffc9a760e01b6001600160e01b03198316145b92915050565b610696600033610f76565b6106bb5760405162461bcd60e51b81526004016106b290613581565b60405180910390fd5b6106c86020820182613141565b61016780546001600160a01b0319166001600160a01b03929092169190911790556106f96040820160208301613141565b61016880546001600160a01b0319166001600160a01b039290921691909117905550565b61012e54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561076357600080fd5b505afa158015610777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079b9190613259565b61012d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ea57600080fd5b505afa1580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190613259565b61082c9190613626565b905090565b60008281526065602052604090206001015461084c8161140b565b6108568383611415565b505050565b6001600160a01b03811633146108cb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106b2565b6108d5828261149b565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109225760405162461bcd60e51b81526004016106b290613464565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661096b60008051602061381d833981519152546001600160a01b031690565b6001600160a01b0316146109915760405162461bcd60e51b81526004016106b2906134b0565b61099a81611502565b604080516000808252602082019092526109b69183919061150d565b50565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610a025760405162461bcd60e51b81526004016106b290613464565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a4b60008051602061381d833981519152546001600160a01b031690565b6001600160a01b031614610a715760405162461bcd60e51b81526004016106b2906134b0565b610a7a82611502565b6108d58282600161150d565b61012d54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b158015610acc57600080fd5b505afa158015610ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b049190613259565b610b0e5750600090565b6000606461013154610b1e61071d565b610b28919061374b565b610b32919061363e565b9050600061012e60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8557600080fd5b505afa158015610b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbd9190613259565b905080821115610bd857610bd1818361376a565b9250505090565b60009250505090565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c815760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016106b2565b5060008051602061381d83398151915290565b610c9f600033610f76565b610cbb5760405162461bcd60e51b81526004016106b290613581565b6000610ccd6040830160208401613141565b6001600160a01b03161415610d125760405162461bcd60e51b815260206004820152600b60248201526a6a756e696f72207a65726f60a81b60448201526064016106b2565b6000610d216020830183613141565b6001600160a01b03161415610d665760405162461bcd60e51b815260206004820152600b60248201526a73656e696f72207a65726f60a81b60448201526064016106b2565b6000610d786060830160408401613141565b6001600160a01b03161415610dbc5760405162461bcd60e51b815260206004820152600a6024820152696173736574207a65726f60b01b60448201526064016106b2565b610dc96020820182613141565b61012d80546001600160a01b0319166001600160a01b0392909216919091179055610dfa6040820160208301613141565b61012e80546001600160a01b0319166001600160a01b0392909216919091179055610e2b6060820160408301613141565b61012f80546001600160a01b0319166001600160a01b039290921691909117905550565b600054610100900460ff1615808015610e6f5750600054600160ff909116105b80610e895750303b158015610e89575060005460ff166001145b610ea55760405162461bcd60e51b81526004016106b290613533565b6000805460ff191660011790558015610ec8576000805461ff0019166101001790555b610ed0611687565b80156109b6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a150565b610f21611782565b436101325410610f435760405162461bcd60e51b81526004016106b2906135af565b43610132556109b681356001610f5f60408501602086016132c8565b6001811115610f7057610f706137da565b146117ca565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610167546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610fe657600080fd5b505afa158015610ffa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082c9190613259565b60008061012e60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561107057600080fd5b505afa158015611084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a89190613259565b905080156110c8576110b861071d565b6110c2908261363e565b91505090565b600091505090565b6110db600033610f76565b6110f75760405162461bcd60e51b81526004016106b290613581565b6101349190915561013355565b60008281526065602052604090206001015461111f8161140b565b610856838361149b565b611131611782565b4361013254106111535760405162461bcd60e51b81526004016106b2906135af565b43610132556109b68135600161116f60408501602086016132c8565b6001811115611180576111806137da565b14611b7b565b61118e611782565b4361013254106111b05760405162461bcd60e51b81526004016106b2906135af565b43610132556111c0600033610f76565b6111dc5760405162461bcd60e51b81526004016106b290613581565b6109b681611fba565b61120f7fd67ad422505496469a1adf6cdf9e5ee92ac5d33992843c9ecc4b2f6d6cde913733610f76565b61125b5760405162461bcd60e51b815260206004820152601d60248201527f5265737472696374656420746f20506f7274666f6c696f204167656e7400000060448201526064016106b2565b6101309190915561013155565b61012d54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b1580156112ae57600080fd5b505afa1580156112c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e69190613259565b6113395761012e60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe657600080fd5b600060646101305461134961071d565b611353919061374b565b61135d919061363e565b9050600061012e60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113b057600080fd5b505afa1580156113c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e89190613259565b905081811115610bd857610bd1828261376a565b6001600160a01b03163b151590565b6109b68133612717565b61141f8282610f76565b6108d55760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556114573390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6114a58282610f76565b156108d55760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006108d58161140b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611540576108568361277b565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561157957600080fd5b505afa9250505080156115a9575060408051601f3d908101601f191682019092526115a691810190613259565b60015b61160c5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016106b2565b60008051602061381d833981519152811461167b5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016106b2565b50610856838383612817565b600054610100900460ff16158080156116a75750600054600160ff909116105b806116c15750303b1580156116c1575060005460ff166001145b6116dd5760405162461bcd60e51b81526004016106b290613533565b6000805460ff191660011790558015611700576000805461ff0019166101001790555b611708612842565b611710612869565b611718612842565b611723600033611415565b600a61013055601e61013155623567e0610134556302aea5406101335580156109b6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610f0e565b60fb5460ff16156117c85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106b2565b565b600082116117ea5760405162461bcd60e51b81526004016106b2906134fc565b61012f546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b15801561182e57600080fd5b505afa158015611842573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118669190613259565b10156118b45760405162461bcd60e51b815260206004820152601960248201527f4e6f7420656e6f75676820746f6b656e7320746f206d696e740000000000000060448201526064016106b2565b8015611903576118c2610a86565b8211156119035760405162461bcd60e51b815260206004820152600f60248201526e26b0bc1036b4b73a10353ab734b7b960891b60448201526064016106b2565b60008161191c5761012d546001600160a01b031661192a565b61012e546001600160a01b03165b61012f546040516323b872dd60e01b8152336004820152306024820152604481018690529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561197e57600080fd5b505af1158015611992573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b6919061321e565b5060006119cb6119c4610fa1565b6004612898565b90506119d6846128c2565b806119df610fa1565b1015611a265760405162461bcd60e51b8152602060048201526016602482015275139055881b195cdcc81d1a185b88195e1c1958dd195960521b60448201526064016106b2565b6000611a3285846129dd565b905060008111611a845760405162461bcd60e51b815260206004820152601860248201527f416d6f756e74206f662053656e696f72206973207a65726f000000000000000060448201526064016106b2565b6040516340c10f1960e01b8152336004820152602481018290526001600160a01b038416906340c10f1990604401600060405180830381600087803b158015611acc57600080fd5b505af1158015611ae0573d6000803e3d6000fd5b505050507ffa6acd633ee08073d696f1ad14b9f42838087eb209ab689786d498e76269877884611b33576040518060400160405280600b81526020016a36b4b73a1d39b2b734b7b960a91b815250611b58565b6040518060400160405280600b81526020016a36b4b73a1d353ab734b7b960a91b8152505b82600033604051611b6c949392919061342c565b60405180910390a15050505050565b60008211611b9b5760405162461bcd60e51b81526004016106b2906134fc565b8015611bec57611ba9611268565b821115611bec5760405162461bcd60e51b815260206004820152601160248201527026b0bc103932b232b2b690353ab734b7b960791b60448201526064016106b2565b600081611c055761012d546001600160a01b0316611c13565b61012e546001600160a01b03165b6040516370a0823160e01b815233600482015290915083906001600160a01b038316906370a082319060240160206040518083038186803b158015611c5757600080fd5b505afa158015611c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8f9190613259565b1015611cdd5760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656e6f75676820746f6b656e7320746f2072656465656d000000000060448201526064016106b2565b604051632770a7eb60e21b8152336004820152602481018490526001600160a01b03821690639dc29fac90604401600060405180830381600087803b158015611d2557600080fd5b505af1158015611d39573d6000803e3d6000fd5b505050506000611d498483612b3f565b905060008111611d6b5760405162461bcd60e51b81526004016106b2906134fc565b6000611d8382611d79610fa1565b6119c4919061376a565b9050611d8e82612ca2565b61012f546040516370a0823160e01b815230600482015283916001600160a01b0316906370a082319060240160206040518083038186803b158015611dd257600080fd5b505afa158015611de6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0a9190613259565b1015611e585760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f75676820666f72207472616e7366657200000000000000000060448201526064016106b2565b61012f5460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015611ea557600080fd5b505af1158015611eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edd919061321e565b5080611ee7610fa1565b1015611f2e5760405162461bcd60e51b8152602060048201526016602482015275139055881b195cdcc81d1a185b88195e1c1958dd195960521b60448201526064016106b2565b7ffa6acd633ee08073d696f1ad14b9f42838087eb209ab689786d498e76269877884611f7f576040518060400160405280600d81526020016c3932b232b2b69d39b2b734b7b960991b815250611fa6565b6040518060400160405280600d81526020016c3932b232b2b69d353ab734b7b960991b8152505b86600033604051611b6c949392919061342c565b61012d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561200957600080fd5b505afa15801561201d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120419190613259565b15806120d1575061012e60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561209757600080fd5b505afa1580156120ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120cf9190613259565b155b156120d95750565b6101345481101580156120ef5750806101335410155b61212b5760405162461bcd60e51b815260206004820152600d60248201526c185d99d05c1e4818589c9bd859609a1b60448201526064016106b2565b600061213961016d8361363e565b90508061217b5760405162461bcd60e51b815260206004820152601060248201526f6461696c79417079206973207a65726f60801b60448201526064016106b2565b6000620f424082606461012d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121d357600080fd5b505afa1580156121e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220b9190613259565b612215919061363e565b61221f919061374b565b612229919061363e565b61012d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561227857600080fd5b505afa15801561228c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b09190613259565b6122ba9190613626565b9050600061012d60009054906101000a90046001600160a01b03166001600160a01b031663b1bf962d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561230d57600080fd5b505afa158015612321573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123459190613259565b61234e83612d5f565b612364906b033b2e3c9fd0803ce800000061374b565b61236e919061363e565b61012d5460405163b2be259160e01b8152600481018390529192506001600160a01b03169063b2be259190602401600060405180830381600087803b1580156123b657600080fd5b505af11580156123ca573d6000803e3d6000fd5b5050505061012d60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561241d57600080fd5b505afa158015612431573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124559190613259565b821461249c5760405162461bcd60e51b81526020600482015260166024820152751cd95b9a5bdc8b9d1bdd185b081b9bdd08195c5d585b60521b60448201526064016106b2565b6000826124a7610fa1565b6124b1919061376a565b9050600061012e60009054906101000a90046001600160a01b03166001600160a01b031663b1bf962d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561250457600080fd5b505afa158015612518573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253c9190613259565b61254583612d5f565b61255b906b033b2e3c9fd0803ce800000061374b565b612565919061363e565b61012e5460405163b2be259160e01b8152600481018390529192506001600160a01b03169063b2be259190602401600060405180830381600087803b1580156125ad57600080fd5b505af11580156125c1573d6000803e3d6000fd5b5050505061012e60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561261457600080fd5b505afa158015612628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264c9190613259565b82146126935760405162461bcd60e51b81526020600482015260166024820152751a9d5b9a5bdc8b9d1bdd185b081b9bdd08195c5d585b60521b60448201526064016106b2565b61269b61071d565b6126a3610fa1565b146126e65760405162461bcd60e51b81526020600482015260136024820152721b985d881b9bdd08195c5d585b081d1bdd185b606a1b60448201526064016106b2565b6040517f354d7e40465161205ea9dee6ebfe67aee9bc460c83cd2397a35e68c5f6ef5e5190600090a1505050505050565b6127218282610f76565b6108d557612739816001600160a01b03166014612dda565b612744836020612dda565b6040516020016127559291906133a4565b60408051601f198184030181529082905262461bcd60e51b82526106b291600401613419565b6001600160a01b0381163b6127e85760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016106b2565b60008051602061381d83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61282083612f76565b60008251118061282d5750805b156108565761283c8383612fb6565b50505050565b600054610100900460ff166117c85760405162461bcd60e51b81526004016106b2906135db565b600054610100900460ff166128905760405162461bcd60e51b81526004016106b2906135db565b6117c86130a1565b60006127106128a7838261376a565b6128b1908561374b565b6128bb919061363e565b9392505050565b61012f546101685460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b390604401602060405180830381600087803b15801561291457600080fd5b505af1158015612928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061294c919061321e565b5061016854604080516316fb876360e31b8152600481018490526024810191909152600060448201526001600160a01b039091169063b7dc3b18906064015b602060405180830381600087803b1580156129a557600080fd5b505af11580156129b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d59190613259565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612a1957600080fd5b505afa158015612a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a519190613339565b60ff169050600061012f60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612aa757600080fd5b505afa158015612abb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612adf9190613339565b60ff169050600082821115612b1457612af8838361376a565b612b0390600a6136a3565b612b0d908761363e565b9050612b36565b612b1e828461376a565b612b2990600a6136a3565b612b33908761374b565b90505b95945050505050565b600080600061012f60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612b9357600080fd5b505afa158015612ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bcb9190613339565b60ff1690506000846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612c0b57600080fd5b505afa158015612c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c439190613339565b60ff16905080821115612c7657612c5a818361376a565b612c6590600a6136a3565b612c6f908761374b565b9250612c98565b612c80828261376a565b612c8b90600a6136a3565b612c95908761363e565b92505b5090949350505050565b610167546101685460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b390604401602060405180830381600087803b158015612cf457600080fd5b505af1158015612d08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2c919061321e565b506101685460405163db006a7560e01b8152600481018390526001600160a01b039091169063db006a759060240161298b565b600080612d70633b9aca008461374b565b905082612d81633b9aca008361363e565b146106855760405162461bcd60e51b815260206004820152602360248201527f4572726f72732e4d4154485f4d554c5449504c49434154494f4e5f4f564552466044820152624c4f5760e81b60648201526084016106b2565b60606000612de983600261374b565b612df4906002613626565b67ffffffffffffffff811115612e0c57612e0c613806565b6040519080825280601f01601f191660200182016040528015612e36576020820181803683370190505b509050600360fc1b81600081518110612e5157612e516137f0565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612e8057612e806137f0565b60200101906001600160f81b031916908160001a9053506000612ea484600261374b565b612eaf906001613626565b90505b6001811115612f27576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612ee357612ee36137f0565b1a60f81b828281518110612ef957612ef96137f0565b60200101906001600160f81b031916908160001a90535060049490941c93612f20816137ad565b9050612eb2565b5083156128bb5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106b2565b612f7f8161277b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61301e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016106b2565b600080846001600160a01b0316846040516130399190613388565b600060405180830381855af49150503d8060008114613074576040519150601f19603f3d011682016040523d82523d6000602084013e613079565b606091505b5091509150612b36828260405180606001604052806027815260200161383d602791396130d4565b600054610100900460ff166130c85760405162461bcd60e51b81526004016106b2906135db565b60fb805460ff19169055565b606083156130e35750816128bb565b8251156130f35782518084602001fd5b8160405162461bcd60e51b81526004016106b29190613419565b80356001600160a01b038116811461312457600080fd5b919050565b60006040828403121561313b57600080fd5b50919050565b60006020828403121561315357600080fd5b6128bb8261310d565b6000806040838503121561316f57600080fd5b6131788361310d565b9150602083013567ffffffffffffffff8082111561319557600080fd5b818501915085601f8301126131a957600080fd5b8135818111156131bb576131bb613806565b604051601f8201601f19908116603f011681019083821181831017156131e3576131e3613806565b816040528281528860208487010111156131fc57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561323057600080fd5b815180151581146128bb57600080fd5b60006020828403121561325257600080fd5b5035919050565b60006020828403121561326b57600080fd5b5051919050565b6000806040838503121561328557600080fd5b823591506132956020840161310d565b90509250929050565b6000602082840312156132b057600080fd5b81356001600160e01b0319811681146128bb57600080fd5b6000602082840312156132da57600080fd5b8135600281106128bb57600080fd5b6000604082840312156132fb57600080fd5b6128bb8383613129565b60006060828403121561313b57600080fd5b6000806040838503121561332a57600080fd5b50508035926020909101359150565b60006020828403121561334b57600080fd5b815160ff811681146128bb57600080fd5b60008151808452613374816020860160208601613781565b601f01601f19169290920160200192915050565b6000825161339a818460208701613781565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516133dc816017850160208801613781565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161340d816028840160208801613781565b01602801949350505050565b6020815260006128bb602083018461335c565b60808152600061343f608083018761335c565b60208301959095525060408101929092526001600160a01b0316606090910152919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60208082526017908201527f416d6f756e74206f66206173736574206973207a65726f000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601490820152735265737472696374656420746f2061646d696e7360601b604082015260600190565b6020808252601290820152714f6e6c79206f6e636520696e20626c6f636b60701b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008219821115613639576136396137c4565b500190565b60008261365b57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561369b578160001904821115613681576136816137c4565b8085161561368e57918102915b93841c9390800290613665565b509250929050565b60006128bb83836000826136b957506001610685565b816136c657506000610685565b81600181146136dc57600281146136e657613702565b6001915050610685565b60ff8411156136f7576136f76137c4565b50506001821b610685565b5060208310610133831016604e8410600b8410161715613725575081810a610685565b61372f8383613660565b8060001904821115613743576137436137c4565b029392505050565b6000816000190483118215151615613765576137656137c4565b500290565b60008282101561377c5761377c6137c4565b500390565b60005b8381101561379c578181015183820152602001613784565b8381111561283c5750506000910152565b6000816137bc576137bc6137c4565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d2c660c0f1178075abb174f75b28bf8e2b38494f791a43614a689bdc06f3099064736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 808,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 811,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1602,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1932,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 790,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1087,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1109,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "_paused",
        "offset": 0,
        "slot": "251",
        "type": "t_bool"
      },
      {
        "astId": 1214,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3093,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "senior",
        "offset": 0,
        "slot": "301",
        "type": "t_contract(IRebaseToken)5501"
      },
      {
        "astId": 3096,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "junior",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IRebaseToken)5501"
      },
      {
        "astId": 3099,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "asset",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IERC20)2023"
      },
      {
        "astId": 3101,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "minJuniorWeight",
        "offset": 0,
        "slot": "304",
        "type": "t_uint256"
      },
      {
        "astId": 3103,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "maxJuniorWeight",
        "offset": 0,
        "slot": "305",
        "type": "t_uint256"
      },
      {
        "astId": 3105,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "lastBlockNumber",
        "offset": 0,
        "slot": "306",
        "type": "t_uint256"
      },
      {
        "astId": 3107,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "maxAvgApyAbroad",
        "offset": 0,
        "slot": "307",
        "type": "t_uint256"
      },
      {
        "astId": 3109,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "minAvgApyAbroad",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      },
      {
        "astId": 4061,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "__gap",
        "offset": 0,
        "slot": "309",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5586,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "etsToken",
        "offset": 0,
        "slot": "359",
        "type": "t_contract(IRebaseToken)5501"
      },
      {
        "astId": 5589,
        "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
        "label": "etsExchanger",
        "offset": 0,
        "slot": "360",
        "type": "t_contract(IHedgeExchanger)5329"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2023": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IHedgeExchanger)5329": {
        "encoding": "inplace",
        "label": "contract IHedgeExchanger",
        "numberOfBytes": "20"
      },
      "t_contract(IRebaseToken)5501": {
        "encoding": "inplace",
        "label": "contract IRebaseToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/strategies/optimism/InsuranceEtsOpUsdc.sol:InsuranceEtsOpUsdc",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}