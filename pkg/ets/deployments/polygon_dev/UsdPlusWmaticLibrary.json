{
  "address": "0xCb960EbD01525F6190c970e5910BD8DeF244d060",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "name": "SetHealthFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_FOR_SLIPPAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_FOR_STORAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "E_MODE_CATEGORY_ID",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTEREST_RATE_MODE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_UINT_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFERRAL_CODE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aUsdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aavePool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aavePoolAddressesProvider",
      "outputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balances",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "amountUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "borrowed",
              "type": "bool"
            }
          ],
          "internalType": "struct IHedgeStrategy.BalanceItem[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balancingDelta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentHealthFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentLiquidity",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "collateralUsdc",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "borrowWmatic",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "poolWmatic",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "poolUsdPlus",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "freeUsdPlus",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "freeUsdc",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "freeWmatic",
              "type": "int256"
            }
          ],
          "internalType": "struct Liquidity",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dyst",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dystRewards",
      "outputs": [
        {
          "internalType": "contract IDystopiaLP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dystRouter",
      "outputs": [
        {
          "internalType": "contract IDystopiaRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dystVault",
      "outputs": [
        {
          "internalType": "contract IDystopiaLP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "contract IExchange",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchanger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "healthFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "K1",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "K2",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "amount",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "int256",
                  "name": "collateralUsdc",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "borrowWmatic",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "poolWmatic",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "poolUsdPlus",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "freeUsdPlus",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "freeUsdc",
                  "type": "int256"
                },
                {
                  "internalType": "int256",
                  "name": "freeWmatic",
                  "type": "int256"
                }
              ],
              "internalType": "struct Liquidity",
              "name": "liq",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "wmaticUsdcSlippagePersent",
              "type": "uint256"
            }
          ],
          "internalType": "struct CalcContext2",
          "name": "calcContext2",
          "type": "tuple"
        }
      ],
      "name": "liquidityToActions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "actionType",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slippagePersent",
              "type": "uint256"
            }
          ],
          "internalType": "struct Action2[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "netAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleUsdc",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleWmatic",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penLens",
      "outputs": [
        {
          "internalType": "contract IPenLens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penProxy",
      "outputs": [
        {
          "internalType": "contract IUserProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realHealthFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_value",
          "type": "address"
        }
      ],
      "name": "setExchanger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "usdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "aUsdc",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wmatic",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "usdPlus",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "penToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dyst",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "exchanger",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dystRewards",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dystVault",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dystRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "penProxy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "penLens",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "wmaticUsdcSlippagePersent",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "aavePoolAddressesProvider",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidationThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "healthFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balancingDelta",
              "type": "uint256"
            }
          ],
          "internalType": "struct SetupParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdPlus",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "usdToUsdc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "usdToWmatic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcDm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcStorage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "usdcToUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wmatic",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wmaticDm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "wmaticToUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "d2358991b357a4e5d5d6ad54f3cf2e5d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"name\":\"SetHealthFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_FOR_SLIPPAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_FOR_STORAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"E_MODE_CATEGORY_ID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEREST_RATE_MODE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_CODE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aUsdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aavePool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aavePoolAddressesProvider\",\"outputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balances\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"borrowed\",\"type\":\"bool\"}],\"internalType\":\"struct IHedgeStrategy.BalanceItem[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancingDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLiquidity\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"collateralUsdc\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"borrowWmatic\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"poolWmatic\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"poolUsdPlus\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"freeUsdPlus\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"freeUsdc\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"freeWmatic\",\"type\":\"int256\"}],\"internalType\":\"struct Liquidity\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dyst\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dystRewards\",\"outputs\":[{\"internalType\":\"contract IDystopiaLP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dystRouter\",\"outputs\":[{\"internalType\":\"contract IDystopiaRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dystVault\",\"outputs\":[{\"internalType\":\"contract IDystopiaLP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"contract IExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchanger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"healthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"K1\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"K2\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"collateralUsdc\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"borrowWmatic\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"poolWmatic\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"poolUsdPlus\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"freeUsdPlus\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"freeUsdc\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"freeWmatic\",\"type\":\"int256\"}],\"internalType\":\"struct Liquidity\",\"name\":\"liq\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"wmaticUsdcSlippagePersent\",\"type\":\"uint256\"}],\"internalType\":\"struct CalcContext2\",\"name\":\"calcContext2\",\"type\":\"tuple\"}],\"name\":\"liquidityToActions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippagePersent\",\"type\":\"uint256\"}],\"internalType\":\"struct Action2[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUsdc\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleWmatic\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penLens\",\"outputs\":[{\"internalType\":\"contract IPenLens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penProxy\",\"outputs\":[{\"internalType\":\"contract IUserProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setExchanger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aUsdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wmatic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdPlus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"penToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dyst\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchanger\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dystRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dystVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dystRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"penProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"penLens\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wmaticUsdcSlippagePersent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"aavePoolAddressesProvider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balancingDelta\",\"type\":\"uint256\"}],\"internalType\":\"struct SetupParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdPlus\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"usdToUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"usdToWmatic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcDm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcStorage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdcToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmatic\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wmaticDm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wmaticToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"netAssetValue()\":{\"returns\":{\"_0\":\"NAV in USDC\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"usdToUsdc(uint256)\":{\"params\":{\"liquidity\":\"USD liquidity in e6\"}},\"usdToWmatic(uint256)\":{\"params\":{\"liquidity\":\"USD liquidity in e6\"}},\"usdcToUsd(uint256)\":{\"params\":{\"amount\":\"USDC tokens amount\"}},\"wmaticToUsd(uint256)\":{\"params\":{\"amount\":\"WMATIC tokens amount\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"currentLiquidity()\":{\"notice\":\"Get current liquidity in USD e6\"},\"netAssetValue()\":{\"notice\":\"NAV = sum of all tokens liquidity minus borrows.\"},\"usdToUsdc(uint256)\":{\"notice\":\"Get USDC equivalent from USD liquidity\"},\"usdToWmatic(uint256)\":{\"notice\":\"Get WMATIC equivalent from USD liquidity\"},\"usdcToUsd(uint256)\":{\"notice\":\"Get USD equivalent in e6\"},\"wmaticToUsd(uint256)\":{\"notice\":\"Get USD equivalent in e6\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StrategyUsdPlusWmatic.sol\":\"StrategyUsdPlusWmatic\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2ea9f206854c98b67dd228f8cad22bfe90ba7b1c2295315672f2e1e244623fc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/EtsStructsAndEnums.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nenum ActionType {\\n    ADD_LIQUIDITY_TO_DYSTOPIA, // D2, D6 < 0\\n    REMOVE_LIQUIDITY_FROM_DYSTOPIA, // D2, D6 > 0\\n\\n    SWAP_USDPLUS_TO_USDC, // D1 < 0\\n    SWAP_USDC_TO_USDPLUS, // D1 > 0\\n\\n    SUPPLY_USDC_TO_AAVE, // D4 > 0\\n    WITHDRAW_USDC_FROM_AAVE, // D4 < 0\\n\\n    BORROW_WMATIC_FROM_AAVE, // D5 > 0\\n    REPAY_WMATIC_TO_AAVE, // D5 < 0\\n\\n    SWAP_WMATIC_TO_USDC, // D3 < 0\\n    SWAP_USDC_TO_WMATIC     // D3 > 0\\n}\\n\\nstruct SetupParams {\\n    // tokens\\n    address usdc;\\n    address aUsdc;\\n    address wmatic;\\n    address usdPlus;\\n    address penToken;\\n    address dyst;\\n    // common\\n    address exchanger;\\n    address dystRewards;\\n    address dystVault;\\n    address dystRouter;\\n    address penProxy;\\n    address penLens;\\n    uint256 wmaticUsdcSlippagePersent;\\n    // aave\\n    address aavePoolAddressesProvider;\\n    uint256 liquidationThreshold;\\n    uint256 healthFactor;\\n    uint256 balancingDelta;\\n}\\n\\n\\n// method 0--nothing, 1--stake, 2--unstake\\nstruct BalanceContext {\\n    uint256 caseNumber;\\n    uint256 aaveCollateralUsdDelta;\\n    uint256 aaveBorrowUsdDelta;\\n    uint256 poolUsdpUsdDelta;\\n    Method method;\\n    uint256 amount;\\n}\\n\\nenum Method {\\n    NOTHING,\\n    STAKE,\\n    UNSTAKE\\n}\\n\\n// liquidity in USD e6, all positive\\nstruct Liquidity {\\n    int256 collateralUsdc;\\n    int256 borrowWmatic;\\n    int256 poolWmatic;\\n    int256 poolUsdPlus;\\n    int256 freeUsdPlus;\\n    int256 freeUsdc;\\n    int256 freeWmatic;\\n}\\n\\n// liquidity deltas in USD e6, may contain zeroes and below zero\\nstruct Deltas {\\n    int256 d1;\\n    int256 d2;\\n    int256 d3;\\n    int256 d4;\\n    int256 d5;\\n    int256 d6;\\n    uint256 code;\\n}\\n\\nstruct Action {\\n    ActionType actionType;\\n    uint256 amount;\\n    uint256 slippagePersent;\\n}\\n\\nstruct Action2 {\\n    uint256 actionType;\\n    uint256 amount;\\n    uint256 slippagePersent;\\n}\\n\\nstruct CalcContext {\\n    int256 K1; // in e18\\n    int256 K2; // in e18\\n    int256 amount; // amount in USD, below zero if UNSTAKE\\n    Liquidity liq; // in USD e6\\n    uint256 wmaticUsdcSlippagePersent;\\n    Deltas deltas; // in USD e6\\n}\\n\\nstruct CalcContext2 {\\n    int256 K1; // in e18\\n    int256 K2; // in e18\\n    int256 amount; // amount in USD, below zero if UNSTAKE\\n    Liquidity liq; // in USD e6\\n    uint256 wmaticUsdcSlippagePersent;\\n}\",\"keccak256\":\"0x6f371715b6784465bffab82974edd7102f7063d827f520c36da32f32a3dfa724\",\"license\":\"MIT\"},\"contracts/StrategyUsdPlusWmatic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./connectors/dystopia/interfaces/IDystopiaRouter.sol\\\";\\nimport \\\"./connectors/dystopia/interfaces/IDystopiaLP.sol\\\";\\nimport \\\"./connectors/aave/interfaces/IPriceFeed.sol\\\";\\nimport \\\"./connectors/aave/interfaces/IPool.sol\\\";\\nimport \\\"./connectors/aave/interfaces/IPoolAddressesProvider.sol\\\";\\nimport \\\"./connectors/aave/interfaces/IAaveOracle.sol\\\";\\nimport \\\"./connectors/penrose/interface/IUserProxy.sol\\\";\\nimport \\\"./connectors/penrose/interface/IPenLens.sol\\\";\\nimport \\\"./libraries/WadRayMath.sol\\\";\\nimport \\\"./libraries/DystopiaLibrary.sol\\\";\\nimport \\\"./interfaces/IExchange.sol\\\";\\nimport \\\"./core/HedgeStrategy.sol\\\";\\nimport \\\"./EtsStructsAndEnums.sol\\\";\\n\\nimport {AaveBorrowLibrary} from \\\"./libraries/AaveBorrowLibrary.sol\\\";\\nimport {OvnMath} from \\\"./libraries/OvnMath.sol\\\";\\nimport {UsdPlusWmaticLibrary} from \\\"./libraries/UsdPlusWmaticLibrary.sol\\\";\\nimport {EtsCalculationLibrary} from \\\"./libraries/EtsCalculationLibrary.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract StrategyUsdPlusWmatic is HedgeStrategy {\\n    using WadRayMath for uint256;\\n    using UsdPlusWmaticLibrary for StrategyUsdPlusWmatic;\\n\\n    // --- constants\\n\\n    uint8 public constant E_MODE_CATEGORY_ID = 0;\\n    uint256 public constant INTEREST_RATE_MODE = 2; // InterestRateMode.VARIABLE\\n    uint16 public constant REFERRAL_CODE = 0;\\n    uint256 public constant BASIS_POINTS_FOR_STORAGE = 100; // 1%\\n    uint256 public constant BASIS_POINTS_FOR_SLIPPAGE = 400; // 4%\\n    uint256 public constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    // --- fields\\n\\n    IExchange public exchange;\\n\\n    IERC20 public usdPlus;\\n    IERC20 public usdc;\\n    IERC20 public aUsdc;\\n    IERC20 public wmatic;\\n    IERC20 public dyst;\\n\\n    uint256 public usdcDm;\\n    uint256 public wmaticDm;\\n\\n    IDystopiaRouter public dystRouter;\\n    IDystopiaLP public dystRewards;\\n    IDystopiaLP public dystVault;\\n\\n\\n    IERC20 public penToken;\\n    IUserProxy public penProxy;\\n    IPenLens public penLens;\\n\\n    uint256 wmaticUsdcSlippagePersent;\\n\\n\\n    // Aave\\n    IPoolAddressesProvider public aavePoolAddressesProvider;\\n    IPriceFeed public oracleUsdc;\\n    IPriceFeed public oracleWmatic;\\n\\n    uint256 public usdcStorage;\\n\\n    // in e18\\n    uint256 public liquidationThreshold;\\n    uint256 public healthFactor;\\n    uint256 public balancingDelta;\\n    uint256 public realHealthFactor;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() initializer public {\\n        __Strategy_init();\\n    }\\n\\n    // --- setters\\n\\n    function setParams(SetupParams calldata params) external onlyAdmin {\\n        require(params.usdc != address(0), \\\"ZERO_ADDRESS not allowed\\\");\\n        require(params.wmatic != address(0), \\\"ZERO_ADDRESS not allowed\\\");\\n\\n        // tokens\\n        usdc = IERC20(params.usdc);\\n        aUsdc = IERC20(params.aUsdc);\\n        wmatic = IERC20(params.wmatic);\\n        usdcDm = 10 ** IERC20Metadata(params.usdc).decimals();\\n        wmaticDm = 10 ** IERC20Metadata(params.wmatic).decimals();\\n\\n        usdPlus = IERC20(params.usdPlus);\\n        setAsset(params.usdPlus);\\n\\n        penToken = IERC20(params.penToken);\\n        dyst = IERC20(params.dyst);\\n\\n        // common\\n        dystRewards = IDystopiaLP(params.dystRewards);\\n        dystVault = IDystopiaLP(params.dystVault);\\n        dystRouter = IDystopiaRouter(params.dystRouter);\\n\\n        penProxy = IUserProxy(params.penProxy);\\n        penLens = IPenLens(params.penLens);\\n\\n        exchange = IExchange(params.exchanger);\\n\\n        wmaticUsdcSlippagePersent = params.wmaticUsdcSlippagePersent;\\n\\n        // aave\\n        aavePoolAddressesProvider = IPoolAddressesProvider(params.aavePoolAddressesProvider);\\n\\n        IAaveOracle priceOracleGetter = IAaveOracle(aavePoolAddressesProvider.getPriceOracle());\\n        oracleUsdc = IPriceFeed(priceOracleGetter.getSourceOfAsset(params.usdc));\\n        oracleWmatic = IPriceFeed(priceOracleGetter.getSourceOfAsset(params.wmatic));\\n\\n        liquidationThreshold = params.liquidationThreshold * 10 ** 15;\\n        healthFactor = params.healthFactor * 10 ** 15;\\n        realHealthFactor = 0;\\n        balancingDelta = params.balancingDelta * 10 ** 15;\\n\\n        // approve max\\n        //TODO: \\u0443\\u0431\\u0440\\u0430\\u0442\\u044c \\u0430\\u043f\\u043f\\u0440\\u0443\\u0432 \\u0443 \\u043f\\u0440\\u0435\\u0434\\u044b\\u0434\\u0443\\u0449\\u0435\\u0433\\u043e \\u0437\\u043d\\u0430\\u0447\\u0435\\u043d\\u0438\\u044f \\u0435\\u0441\\u043b\\u0438 \\u043c\\u0435\\u043d\\u044f\\u0435\\u0442\\u0441\\u044f\\n\\n        usdPlus.approve(address(dystRouter), type(uint256).max);\\n        wmatic.approve(address(dystRouter), type(uint256).max);\\n        dystVault.approve(address(dystRouter), type(uint256).max);\\n\\n        usdPlus.approve(address(exchange), type(uint256).max);\\n        usdc.approve(address(exchange), type(uint256).max);\\n    }\\n\\n    // --- logic\\n\\n    function _stake(uint256 _amount) internal override {\\n        _updateEMode();\\n\\n        calcDeltas(Method.STAKE, _amount);\\n\\n        //        BalanceContext memory ctx = makeContext(Method.STAKE, _amount);\\n        //\\n        //        console.log(\\\"stake case\\\", ctx.caseNumber);\\n        //\\n        //        _execBalance(ctx);\\n    }\\n\\n\\n    function _unstake(\\n        uint256 _amount\\n    ) internal override returns (uint256) {\\n        _updateEMode();\\n\\n        calcDeltas(Method.UNSTAKE, _amount);\\n\\n        //        BalanceContext memory ctx = makeContext(Method.UNSTAKE, _amount);\\n        //\\n        //        console.log(\\\"unstake case\\\", ctx.caseNumber);\\n        //\\n        //        _execBalance(ctx);\\n\\n        return _amount;\\n    }\\n\\n    function _execBalance(BalanceContext memory ctx) internal {\\n        //TODO: call balance code?\\n\\n        (,,,,, realHealthFactor) = aavePool().getUserAccountData(address(this));\\n\\n        console.log(\\\"realHealthFactor\\\", realHealthFactor);\\n\\n    }\\n\\n    function aavePool() public view returns (IPool){\\n        return IPool(AaveBorrowLibrary.getAavePool(address(aavePoolAddressesProvider)));\\n    }\\n\\n    function _updateEMode() internal {\\n        AaveBorrowLibrary.getAavePool(address(aavePoolAddressesProvider), E_MODE_CATEGORY_ID);\\n    }\\n\\n\\n    function balances() external view override returns (BalanceItem[] memory){\\n\\n        Liquidity memory liq = currentLiquidity();\\n\\n        BalanceItem[] memory items = new BalanceItem[](7);\\n        items[0] = BalanceItem(\\\"borrowWmatic\\\", toUint256(liq.borrowWmatic), 0, true);\\n        items[1] = BalanceItem(\\\"collateralUsdc\\\", toUint256(liq.collateralUsdc), 0, false);\\n        items[2] = BalanceItem(\\\"poolWmatic\\\", toUint256(liq.poolWmatic), 0, false);\\n        items[3] = BalanceItem(\\\"poolUsdPlus\\\", toUint256(liq.poolUsdPlus), 0, false);\\n        items[4] = BalanceItem(\\\"freeUsdPlus\\\", toUint256(liq.freeUsdPlus), 0, false);\\n        items[5] = BalanceItem(\\\"freeUsdc\\\", toUint256(liq.freeUsdc), 0, false);\\n        items[6] = BalanceItem(\\\"freeWmatic\\\", toUint256(liq.freeWmatic), 0, false);\\n        return items;\\n    }\\n\\n\\n    /**\\n     * NAV = sum of all tokens liquidity minus borrows.\\n     * @return NAV in USDC\\n     */\\n    function netAssetValue() external view override returns (uint256){\\n        Liquidity memory liq = currentLiquidity();\\n        int256 navUsd = _netAssetValue(liq);\\n        return usdToUsdc(toUint256(navUsd));\\n    }\\n\\n    /**\\n     * NAV = sum of all tokens liquidity minus borrows.\\n     * @return NAV in USD\\n     */\\n    function _netAssetValue(Liquidity memory liq) internal pure returns (int256){\\n\\n        // add liquidity in free tokens\\n        int256 navUsd = liq.freeUsdPlus + liq.freeUsdc + liq.freeWmatic;\\n        // add liquidity in pool\\n        navUsd = navUsd + liq.poolWmatic + liq.poolUsdPlus;\\n        // add liquidity in aave collateral minus borrow\\n        navUsd = navUsd + liq.collateralUsdc - liq.borrowWmatic;\\n\\n        return navUsd;\\n    }\\n\\n    function _claimRewards(address _to) internal override returns (uint256){\\n\\n        // claim rewards\\n        penProxy.claimStakingRewards();\\n\\n        // sell rewards\\n        uint256 totalUsdc = 0;\\n\\n        uint256 dystBalance = dyst.balanceOf(address(this));\\n        if (dystBalance > 0) {\\n            uint256 dystUsdc = DystopiaLibrary._swapExactTokensForTokens(\\n                dystRouter,\\n                address(dyst),\\n                address(wmatic),\\n                address(usdPlus),\\n                false,\\n                false,\\n                dystBalance,\\n                address(this)\\n            );\\n            totalUsdc += dystUsdc;\\n        }\\n\\n        uint256 penBalance = penToken.balanceOf(address(this));\\n        if (penBalance > 0) {\\n            uint256 penUsdc = DystopiaLibrary._swapExactTokensForTokens(\\n                dystRouter,\\n                address(penToken),\\n                address(wmatic),\\n                address(usdPlus),\\n                false,\\n                false,\\n                penBalance,\\n                address(this)\\n            );\\n            totalUsdc += penUsdc;\\n        }\\n\\n        return totalUsdc;\\n    }\\n\\n\\n    function _balance() internal override returns (uint256) {\\n        _updateEMode();\\n        calcDeltas(Method.NOTHING, 0);\\n        return realHealthFactor;\\n    }\\n\\n\\n    function currentHealthFactor() external view override returns (uint256){\\n        return realHealthFactor;\\n    }\\n\\n    /**\\n     * Current price Usd+/Wmatic in dyst pool in USD/USD in e+2\\n     */\\n    function priceInDystUsdpMaticPool() internal view returns (uint256){\\n        // on another pools tokens order may be another and calc price in pool should changed\\n        // token 0 - wmatic\\n        // token 1 - usdPlus\\n        (uint256 reserveWmatic, uint256 reserveUsdPlus,) = dystVault.getReserves();\\n        uint256 reserveWmaticUsd = wmaticToUsd(reserveWmatic);\\n        uint256 reserveUsdPlusUsd = usdcToUsd(reserveUsdPlus);\\n\\n        // console.log(\\\"----------------- priceInDystUsdpMaticPool()\\\");\\n        // console.log(\\\"reserveWmatic       \\\", reserveWmatic);\\n        // console.log(\\\"reserveWmaticUsd    \\\", reserveWmaticUsd);\\n        // console.log(\\\"reserveUsdPlus      \\\", reserveUsdPlus);\\n        // console.log(\\\"reserveUsdPlusUsd   \\\", reserveUsdPlusUsd);\\n        // console.log(\\\"-----------------\\\");\\n        // 10^8 because of 10^6 plus additional 2 digits to be comparable to USD price from oracles\\n        return reserveUsdPlusUsd * 10 ** 8 / reserveWmaticUsd;\\n\\n    }\\n\\n    /**\\n     * Get USD equivalent in e6\\n     * @param amount WMATIC tokens amount\\n     */\\n    function wmaticToUsd(uint256 amount) public view returns (uint256){\\n        // X / 100 because converting return e6+2 as oracle price but need to remove additional +2\\n        return AaveBorrowLibrary.convertTokenAmountToUsd(\\n            amount,\\n            wmaticDm,\\n            uint256(oracleWmatic.latestAnswer())\\n        ) / 100;\\n    }\\n\\n    /**\\n     * Get WMATIC equivalent from USD liquidity\\n     * @param liquidity USD liquidity in e6\\n     */\\n    function usdToWmatic(uint256 liquidity) public view returns (uint256){\\n        // liquidity * 100 => because need e6+2 for converting but liq in e6\\n        return AaveBorrowLibrary.convertUsdToTokenAmount(\\n            liquidity * 100,\\n            wmaticDm,\\n            uint256(oracleWmatic.latestAnswer())\\n        );\\n    }\\n\\n    /**\\n     * Get USD equivalent in e6\\n     * @param amount USDC tokens amount\\n     */\\n    function usdcToUsd(uint256 amount) public view returns (uint256){\\n        // X / 100 because converting return e6+2 as oracle price but need to remove additional +2\\n        return AaveBorrowLibrary.convertTokenAmountToUsd(\\n            amount,\\n            usdcDm,\\n            uint256(oracleUsdc.latestAnswer())\\n        ) / 100;\\n    }\\n\\n    /**\\n     * Get USDC equivalent from USD liquidity\\n     * @param liquidity USD liquidity in e6\\n     */\\n    function usdToUsdc(uint256 liquidity) public view returns (uint256){\\n        // liquidity * 100 => because need e6+2 for converting but liq in e6\\n        return AaveBorrowLibrary.convertUsdToTokenAmount(\\n            liquidity * 100,\\n            usdcDm,\\n            uint256(oracleUsdc.latestAnswer())\\n        );\\n    }\\n\\n    /**\\n     * Get current liquidity in USD e6\\n     */\\n    function currentLiquidity() public view returns (Liquidity memory){\\n\\n        // in pool liquidity\\n        (uint256 poolWmatic,  uint256 poolUsdPlus) = this._getLiquidity();\\n        uint256 poolWmaticUsd = wmaticToUsd(poolWmatic);\\n        uint256 poolUsdPlusUsd = usdcToUsd(poolUsdPlus);\\n\\n        // liquidity from AAVE E6+2\\n        (uint256 aaveCollateralUsd, uint256 aaveBorrowUsd,,,,) = aavePool().getUserAccountData(address(this));\\n        // convert to e6\\n        aaveCollateralUsd = aaveCollateralUsd / 100;\\n        aaveBorrowUsd = aaveBorrowUsd / 100;\\n\\n        // free tokens on contract\\n        uint256 usdPlusBalanceUsd = usdcToUsd(usdPlus.balanceOf(address(this)));\\n        uint256 usdcBalanceUsd = usdcToUsd(usdc.balanceOf(address(this)));\\n        uint256 wmaticBalanceUsd = wmaticToUsd(wmatic.balanceOf(address(this)));\\n\\n\\n        console.log(\\\"----------------- currentLiquidity()\\\");\\n        console.log(\\\"poolWmatic        \\\", poolWmatic);\\n        console.log(\\\"poolWmaticUsd     \\\", poolWmaticUsd);\\n        console.log(\\\"poolUsdPlus       \\\", poolUsdPlus);\\n        console.log(\\\"poolUsdPlusUsd    \\\", poolUsdPlusUsd);\\n        console.log(\\\"aaveCollateralUsd \\\", aaveCollateralUsd);\\n        console.log(\\\"aaveBorrowUsd     \\\", aaveBorrowUsd);\\n        console.log(\\\"wmaticBalanceUsd  \\\", wmaticBalanceUsd);\\n        console.log(\\\"usdPlusBalanceUsd \\\", usdPlusBalanceUsd);\\n        console.log(\\\"usdcBalanceUsd    \\\", usdcBalanceUsd);\\n        console.log(\\\"-----------------\\\");\\n\\n        //TODO: rename vars\\n        return Liquidity(\\n            toInt256(aaveCollateralUsd),\\n            toInt256(aaveBorrowUsd),\\n            toInt256(poolWmaticUsd),\\n            toInt256(poolUsdPlusUsd),\\n            toInt256(usdPlusBalanceUsd),\\n            toInt256(usdcBalanceUsd),\\n            toInt256(wmaticBalanceUsd)\\n        );\\n    }\\n\\n    function liquidityToActions(CalcContext2 memory calcContext2) view public returns (Action2[] memory, uint256){\\n        (Action[] memory actions, uint256 code) = EtsCalculationLibrary.liquidityToActions(calcContext2);\\n        Action2[] memory actions2 = new Action2[](actions.length);\\n        for(uint256 i=0; i < actions.length; i++) {\\n            actions2[i].amount = actions[i].amount;\\n            actions2[i].actionType = uint(actions[i].actionType);\\n        }\\n        return (actions2, code);\\n    }\\n\\n    /**\\n     * @param amount  - USDC amount in e6\\n     */\\n    function calcDeltas(Method method, uint256 amount) internal returns (uint256){\\n\\n        Liquidity memory liq = currentLiquidity();\\n        int256 K1 = toInt256(1e18 * healthFactor / liquidationThreshold);\\n        // price in e8 K2 should be in e18 so up by 1e10\\n        int256 K2 = toInt256(1e10 * priceInDystUsdpMaticPool());\\n        int256 retAmount;\\n        if (method == Method.UNSTAKE) {\\n            int256 navUsd = _netAssetValue(liq);\\n            int256 amountUsd = toInt256(usdcToUsd(amount));\\n            require(navUsd >= amountUsd, \\\"Not enough NAV for UNSTAKE\\\");\\n            // for unstake make deficit as amount\\n            retAmount = - amountUsd;\\n        }\\n\\n        (Action[] memory actions, uint256 code) = EtsCalculationLibrary.liquidityToActions(CalcContext2(K1, K2, retAmount, liq, wmaticUsdcSlippagePersent));\\n\\n        runActions(actions);\\n\\n        (,,,,, realHealthFactor) = aavePool().getUserAccountData(address(this));\\n\\n        return 0;\\n    }\\n\\n    function runActions(Action[] memory actions) internal returns (uint256) {\\n        \\n        console.log(\\\"--------- execute actions\\\");\\n        for (uint j; j < actions.length; j++) {\\n            console.log(j, uint(actions[j].actionType), actions[j].amount);\\n            executeAction(actions[j]);\\n        }\\n        console.log(\\\"---------\\\");\\n\\n        return 0;\\n    }\\n\\n    function executeAction(Action memory action) internal {\\n        if (action.actionType == ActionType.ADD_LIQUIDITY_TO_DYSTOPIA) {\\n            console.log(\\\"execute action ADD_LIQUIDITY_TO_DYSTOPIA\\\");\\n            UsdPlusWmaticLibrary._addLiquidityToDystopia(this, action.amount);\\n        } else if (action.actionType == ActionType.REMOVE_LIQUIDITY_FROM_DYSTOPIA) {\\n            console.log(\\\"execute action REMOVE_LIQUIDITY_FROM_DYSTOPIA\\\");\\n            UsdPlusWmaticLibrary._removeLiquidityFromDystopia(this, action.amount);\\n        } else if (action.actionType == ActionType.SWAP_USDPLUS_TO_USDC) {\\n            console.log(\\\"execute action SWAP_USDPLUS_TO_USDC\\\");\\n            UsdPlusWmaticLibrary._swapUspPlusToUsdc(this, action.amount);\\n        } else if (action.actionType == ActionType.SWAP_USDC_TO_USDPLUS) {\\n            console.log(\\\"execute action SWAP_USDC_TO_USDPLUS\\\");\\n            UsdPlusWmaticLibrary._swapUsdcToUsdPlus(this, action.amount);\\n        } else if (action.actionType == ActionType.SUPPLY_USDC_TO_AAVE) {\\n            console.log(\\\"execute action SUPPLY_USDC_TO_AAVE\\\");\\n            UsdPlusWmaticLibrary._supplyUsdcToAave(this, action.amount);\\n        } else if (action.actionType == ActionType.WITHDRAW_USDC_FROM_AAVE) {\\n            console.log(\\\"execute action WITHDRAW_USDC_FROM_AAVE\\\");\\n            UsdPlusWmaticLibrary._withdrawUsdcFromAave(this, action.amount);\\n        } else if (action.actionType == ActionType.BORROW_WMATIC_FROM_AAVE) {\\n            console.log(\\\"execute action BORROW_WMATIC_FROM_AAVE\\\");\\n            UsdPlusWmaticLibrary._borrowWmaticFromAave(this, action.amount);\\n        } else if (action.actionType == ActionType.REPAY_WMATIC_TO_AAVE) {\\n            console.log(\\\"execute action REPAY_WMATIC_TO_AAVE\\\");\\n            UsdPlusWmaticLibrary._repayWmaticToAave(this, action.amount);\\n        } else if (action.actionType == ActionType.SWAP_WMATIC_TO_USDC) {\\n            console.log(\\\"execute action SWAP_WMATIC_TO_USDC\\\");\\n            UsdPlusWmaticLibrary._swapWmaticToUsdc(this, action.amount, action.slippagePersent);\\n        } else if (action.actionType == ActionType.SWAP_USDC_TO_WMATIC) {\\n            console.log(\\\"execute action SWAP_USDC_TO_WMATIC\\\");\\n            UsdPlusWmaticLibrary._swapUsdcToWmatic(this, action.amount, action.slippagePersent);\\n        }\\n    }\\n\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x33bb13524a3320eeb71a7ec7036a631ac3d18c0dfab5f06ac0b7a770c275db69\",\"license\":\"MIT\"},\"contracts/connectors/aave/interfaces/IAaveOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IPriceOracleGetter} from './IPriceOracleGetter.sol';\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\n\\n/**\\n * @title IAaveOracle\\n * @author Aave\\n * @notice Defines the basic interface for the Aave Oracle\\n */\\ninterface IAaveOracle is IPriceOracleGetter {\\n  /**\\n   * @dev Emitted after the base currency is set\\n   * @param baseCurrency The base currency of used for price quotes\\n   * @param baseCurrencyUnit The unit of the base currency\\n   */\\n  event BaseCurrencySet(address indexed baseCurrency, uint256 baseCurrencyUnit);\\n\\n  /**\\n   * @dev Emitted after the price source of an asset is updated\\n   * @param asset The address of the asset\\n   * @param source The price source of the asset\\n   */\\n  event AssetSourceUpdated(address indexed asset, address indexed source);\\n\\n  /**\\n   * @dev Emitted after the address of fallback oracle is updated\\n   * @param fallbackOracle The address of the fallback oracle\\n   */\\n  event FallbackOracleUpdated(address indexed fallbackOracle);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider\\n   * @return The address of the PoolAddressesProvider contract\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Sets or replaces price sources of assets\\n   * @param assets The addresses of the assets\\n   * @param sources The addresses of the price sources\\n   */\\n  function setAssetSources(address[] calldata assets, address[] calldata sources) external;\\n\\n  /**\\n   * @notice Sets the fallback oracle\\n   * @param fallbackOracle The address of the fallback oracle\\n   */\\n  function setFallbackOracle(address fallbackOracle) external;\\n\\n  /**\\n   * @notice Returns a list of prices from a list of assets addresses\\n   * @param assets The list of assets addresses\\n   * @return The prices of the given assets\\n   */\\n  function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Returns the address of the source for an asset address\\n   * @param asset The address of the asset\\n   * @return The address of the source\\n   */\\n  function getSourceOfAsset(address asset) external view returns (address);\\n\\n  /**\\n   * @notice Returns the address of the fallback oracle\\n   * @return The address of the fallback oracle\\n   */\\n  function getFallbackOracle() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd291196e177e0d434ec1ecb2f22ad5502ffc831401e828d624b3326460ae7c92\",\"license\":\"AGPL-3.0\"},\"contracts/connectors/aave/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n **/\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   **/\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   **/\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   **/\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   **/\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   **/\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   **/\\n  function backUnbacked(\\n    address asset,\\n    uint256 amount,\\n    uint256 fee\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   **/\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   **/\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   **/\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n  external\\n  view\\n  returns (\\n    uint256 totalCollateralBase,\\n    uint256 totalDebtBase,\\n    uint256 availableBorrowsBase,\\n    uint256 currentLiquidationThreshold,\\n    uint256 ltv,\\n    uint256 healthFactor\\n  );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\\n  external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   **/\\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\\n  external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n  external\\n  view\\n  returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n  external\\n  view\\n  returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   **/\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   **/\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   **/\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   **/\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n}\",\"keccak256\":\"0xdbc4714cbdcc3c2ecf8b02da22c9944d8ff428a54a1f9b06b32c75b23832e06b\",\"license\":\"AGPL-3.0\"},\"contracts/connectors/aave/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n **/\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   **/\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   **/\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   **/\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   **/\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   **/\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   **/\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   **/\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   **/\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\",\"keccak256\":\"0xe6854802245d8dd7765db265dd5045242fea39705bebf0de658852bfbe61e002\",\"license\":\"AGPL-3.0\"},\"contracts/connectors/aave/interfaces/IPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPriceFeed {\\n  // price in USD with 2 additional digits\\n  function latestAnswer() external view returns (int256);\\n}\\n\",\"keccak256\":\"0x7065831b3b01d23502aec554e7c7102f027ccc0224551e8ab2e612949fd8621c\",\"license\":\"AGPL-3.0\"},\"contracts/connectors/aave/interfaces/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IPriceOracleGetter\\n * @author Aave\\n * @notice Interface for the Aave price oracle.\\n **/\\ninterface IPriceOracleGetter {\\n  /**\\n   * @notice Returns the base currency address\\n   * @dev Address 0x0 is reserved for USD as base currency.\\n   * @return Returns the base currency address.\\n   **/\\n  function BASE_CURRENCY() external view returns (address);\\n\\n  /**\\n   * @notice Returns the base currency unit\\n   * @dev 1 ether for ETH, 1e8 for USD.\\n   * @return Returns the base currency unit.\\n   **/\\n  function BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the asset price in the base currency\\n   * @param asset The address of the asset\\n   * @return The price of the asset\\n   **/\\n  function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1d4ef4e5adf3aae82818abfdb61d18a00a761d10bd44035b97a40ed94dd1199c\",\"license\":\"AGPL-3.0\"},\"contracts/connectors/aave/protocol/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\",\"keccak256\":\"0x2385594db59af5c2e15a906f936b3e29fd5bca450a4832b1985377e311e6aeb6\",\"license\":\"BUSL-1.1\"},\"contracts/connectors/dystopia/interfaces/IDystopiaLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5 <0.9.0;\\n\\nimport \\\"../../uniswap/v2/interfaces/IUniswapV2Pair.sol\\\";\\n\\nabstract contract IDystopiaLP is IUniswapV2Pair {\\n\\n    function deposit(uint amount, uint tokenId) external virtual;\\n\\n    function withdraw(uint amount) external virtual;\\n\\n    function withdrawAll() external virtual;\\n\\n    function getReward(address account, address[] memory tokens) external virtual;\\n\\n}\\n\",\"keccak256\":\"0xab02cb9f53b038708bd8cb507ea125bfb303183da63bae3c50614bb77bcd93e4\",\"license\":\"MIT\"},\"contracts/connectors/dystopia/interfaces/IDystopiaRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IDystopiaRouter {\\n    \\n    struct Route {\\n        address from;\\n        address to;\\n        bool stable;\\n    }\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function getAmountOut(uint amountIn, address tokenIn, address tokenOut) external view returns (uint amount, bool stable);\\n    function getAmountsOut(uint amountIn, Route[] memory routes) external view returns (uint[] memory amounts);\\n    function getReserves(address tokenA, address tokenB, bool stable) external view returns (uint reserveA, uint reserveB);\\n}\",\"keccak256\":\"0x87a434ab9664b57c728fada91322e54df37524e213a617ed10f4113c2a4dd34f\",\"license\":\"MIT\"},\"contracts/connectors/penrose/interface/IPenLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPenLens {\\n\\n    /* ========== PUBLIC VARS ========== */\\n\\n    function penPoolFactoryAddress() external view returns (address);\\n\\n    function rewardsDistributorAddress() external view returns (address);\\n\\n    function userProxyFactoryAddress() external view returns (address);\\n\\n    function dystopiaLensAddress() external view returns (address);\\n\\n    function penAddress() external view returns (address);\\n\\n    function vlPenAddress() external view returns (address);\\n\\n    function penDystAddress() external view returns (address);\\n\\n    function voterProxyAddress() external view returns (address);\\n\\n    function veAddress() external view returns (address);\\n\\n    function dystAddress() external view returns (address);\\n\\n    function penDystRewardsPoolAddress() external view returns (address);\\n\\n    function partnersRewardsPoolAddress() external view returns (address);\\n\\n    function treasuryAddress() external view returns (address);\\n\\n    function cvlPenAddress() external view returns (address);\\n\\n    function penV1RewardsAddress() external view returns (address);\\n\\n    function penV1RedeemAddress() external view returns (address);\\n\\n    function penV1Address() external view returns (address);\\n\\n    function tokensAllowlistAddress() external view returns (address);\\n\\n    /* ========== PUBLIC VIEW FUNCTIONS ========== */\\n\\n    function voterAddress() external view returns (address);\\n\\n    function poolsFactoryAddress() external view returns (address);\\n\\n    function gaugesFactoryAddress() external view returns (address);\\n\\n    function minterAddress() external view returns (address);\\n\\n    function penPoolsLength() external view returns (uint256);\\n\\n    function userProxiesLength() external view returns (uint256);\\n\\n    function userProxyByAccount(address accountAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function userProxyByIndex(uint256 index) external view returns (address);\\n\\n    function gaugeByDystPool(address) external view returns (address);\\n\\n    function dystPoolByPenPool(address penPoolAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function penPoolByDystPool(address dystPoolAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function stakingRewardsByDystPool(address dystPoolAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function stakingRewardsByPenPool(address dystPoolAddress)\\n    external\\n    view\\n    returns (address);\\n\\n    function isPenPool(address penPoolAddress) external view returns (bool);\\n\\n    function penPoolsAddresses() external view returns (address[] memory);\\n\\n    function isPartner(address userProxyAddress) external view returns (bool);\\n\\n    function stakedPenDystBalanceOf(address accountAddress)\\n    external\\n    view\\n    returns (uint256 stakedBalance);\\n\\n    function dystInflationSinceInception() external view returns (uint256);\\n}\",\"keccak256\":\"0x1c54499bf3980bf46f6f64bfc6a756a9f2757b0d50bd77152d7cb64ce741ce98\",\"license\":\"MIT\"},\"contracts/connectors/penrose/interface/IUserProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IUserProxy {\\n    struct PositionStakingPool {\\n        address stakingPoolAddress;\\n        address penPoolAddress;\\n        address dystPoolAddress;\\n        uint256 balanceOf;\\n        RewardToken[] rewardTokens;\\n    }\\n\\n    struct RewardToken {\\n        address rewardTokenAddress;\\n        uint256 rewardRate;\\n        uint256 rewardPerToken;\\n        uint256 getRewardForDuration;\\n        uint256 earned;\\n    }\\n\\n    struct Vote {\\n        address poolAddress;\\n        int256 weight;\\n    }\\n\\n    function convertNftToPenDyst(uint256) external;\\n\\n    function convertDystToPenDyst(uint256) external;\\n\\n    function depositLpAndStake(address, uint256) external;\\n\\n    function depositLp(address, uint256) external;\\n\\n    function stakingAddresses() external view returns (address[] memory);\\n\\n    function initialize(address, address) external;\\n\\n    function stakingPoolsLength() external view returns (uint256);\\n\\n    function unstakeLpAndWithdraw(\\n        address,\\n        uint256,\\n        bool\\n    ) external;\\n\\n    function unstakeLpAndWithdraw(address, uint256) external;\\n\\n    function unstakeLpWithdrawAndClaim(address) external;\\n\\n    function unstakeLpWithdrawAndClaim(address, uint256) external;\\n\\n    function withdrawLp(address, uint256) external;\\n\\n    function stakePenLp(address, uint256) external;\\n\\n    function unstakePenLp(address, uint256) external;\\n\\n    function ownerAddress() external view returns (address);\\n\\n    function stakingPoolsPositions()\\n    external\\n    view\\n    returns (PositionStakingPool[] memory);\\n\\n    function stakePenDyst(uint256) external;\\n\\n    function unstakePenDyst(uint256) external;\\n\\n    function unstakePenDyst(address, uint256) external;\\n\\n    function convertDystToPenDystAndStake(uint256) external;\\n\\n    function convertNftToPenDystAndStake(uint256) external;\\n\\n    function claimPenDystStakingRewards() external;\\n\\n    function claimPartnerStakingRewards() external;\\n\\n    function claimStakingRewards(address) external;\\n\\n    function claimStakingRewards(address[] memory) external;\\n\\n    function claimStakingRewards() external;\\n\\n    function claimVlPenRewards() external;\\n\\n    function depositPen(uint256, uint256) external;\\n\\n    function withdrawPen(bool, uint256) external;\\n\\n    function voteLockPen(uint256, uint256) external;\\n\\n    function withdrawVoteLockedPen(uint256, bool) external;\\n\\n    function relockVoteLockedPen(uint256) external;\\n\\n    function removeVote(address) external;\\n\\n    function registerStake(address) external;\\n\\n    function registerUnstake(address) external;\\n\\n    function resetVotes() external;\\n\\n    function setVoteDelegate(address) external;\\n\\n    function clearVoteDelegate() external;\\n\\n    function vote(address, int256) external;\\n\\n    function vote(Vote[] memory) external;\\n\\n    function votesByAccount(address) external view returns (Vote[] memory);\\n\\n    function migratePenDystToPartner() external;\\n\\n    function stakePenDystInPenV1(uint256) external;\\n\\n    function unstakePenDystInPenV1(uint256) external;\\n\\n    function redeemPenV1(uint256) external;\\n\\n    function redeemAndStakePenV1(uint256) external;\\n\\n    function whitelist(address) external;\\n\\n    function implementationsAddresses()\\n    external\\n    view\\n    returns (address[] memory);\\n}\",\"keccak256\":\"0x1a02c16a2616bd7e7ee4d8137ea5b57daf1a1ec75a875fcb551b3fa14a55d6cf\",\"license\":\"MIT\"},\"contracts/connectors/uniswap/v2/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x5046381702b4601ffc562ffbbe0d55cc982ddc32028b3ba2ae023b69fa2aca50\",\"license\":\"GNU-3\"},\"contracts/connectors/uniswap/v3/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaa9d8894cfc7826e4d1abacb026b022ef4ff07569037b8796474d43257fb1f19\",\"license\":\"MIT\"},\"contracts/core/HedgeStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./IHedgeStrategy.sol\\\";\\n\\n\\nabstract contract HedgeStrategy is IHedgeStrategy, Initializable, AccessControlUpgradeable, UUPSUpgradeable {\\n    bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n    bytes32 public constant EXCHANGER = keccak256(\\\"EXCHANGER\\\");\\n\\n    IERC20 public asset;\\n    address public exchanger;\\n\\n\\n    function __Strategy_init() internal initializer {\\n        __AccessControl_init();\\n        __UUPSUpgradeable_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(UPGRADER_ROLE, msg.sender);\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n    internal\\n    onlyRole(UPGRADER_ROLE)\\n    override\\n    {}\\n\\n    // ---  modifiers\\n\\n    modifier onlyExchanger() {\\n        require(hasRole(EXCHANGER, msg.sender), \\\"Restricted to EXCHANGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Restricted to admins\\\");\\n        _;\\n    }\\n\\n    // --- setters\\n\\n    function setExchanger(address _value) public onlyAdmin {\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\n\\n        revokeRole(EXCHANGER, exchanger);\\n        grantRole(EXCHANGER, _value);\\n\\n        exchanger = _value;\\n    }\\n\\n    function setAsset(address _value) internal {\\n        require(_value != address(0), \\\"Zero address not allowed\\\");\\n        asset = IERC20(_value);\\n    }\\n\\n\\n    // --- logic\\n\\n\\n    function stake(\\n        uint256 _amount // value for staking in USDC\\n    ) external override onlyExchanger {\\n        emit Stake(_amount);\\n        _stake(asset.balanceOf(address(this)));\\n    }\\n\\n    function unstake(\\n        uint256 _amount,\\n        address _to\\n    ) external override onlyExchanger returns (uint256) {\\n        uint256   withdrawAmount = _unstake(_amount );\\n        require(withdrawAmount >= _amount, 'Returned value less than requested amount');\\n\\n        asset.transfer(_to, withdrawAmount);\\n        emit Unstake(_amount, withdrawAmount);\\n\\n        return withdrawAmount;\\n    }\\n\\n    function claimRewards(address _to) external override onlyExchanger returns (uint256) {\\n        uint256 totalUsdc = _claimRewards(_to);\\n        emit Reward(totalUsdc);\\n        return totalUsdc;\\n    }\\n\\n    function balance() external override {\\n        _balance();\\n    }\\n\\n\\n\\n    function _stake(\\n        uint256 _amount\\n    ) internal virtual {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _unstake(\\n        uint256 _amount\\n    ) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _claimRewards(address _to) internal virtual returns (uint256){\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function _balance() internal virtual returns (uint256) {\\n\\n    }\\n\\n\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x06f31d8903af3645a045efd898ff7a393cdbfc812f7ada0309ea3040ac6df888\",\"license\":\"MIT\"},\"contracts/core/IHedgeStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IHedgeStrategy {\\n\\n    event Reward(uint256 amount);\\n\\n    event Stake(uint256 amount);\\n    event Unstake(uint256 amount, uint256 amountReceived);\\n\\n    event SetHealthFactor(uint256 healthFactor);\\n\\n    struct BalanceItem {\\n        string name;\\n        uint256 amountUSD;\\n        uint256 amount;\\n        bool    borrowed;\\n    }\\n\\n    function stake(\\n        uint256 _amount // value for staking in asset\\n    ) external;\\n\\n    function unstake(\\n        uint256 _amount, // minimum expected value for unstaking in asset\\n        address _to      // PortfolioManager\\n    ) external returns (uint256); // Real unstake value\\n\\n    function netAssetValue() external view returns (uint256); // Return value in USDC - denominator 6\\n\\n    function claimRewards(address _to) external returns (uint256); // Return received amount in USDC - denominator 6\\n\\n    function balance() external ; // Balancing aave health factor\\n\\n    function currentHealthFactor() external returns (uint256);      // Aave healthFactor\\n\\n    function balances() external view returns (BalanceItem[] memory ); // Balancing aave health factor\\n\\n}\\n\",\"keccak256\":\"0x9cf81bf3de3e2c2fd7672cbec5c8f011b983569fa01887642f1a669a092cfb91\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IExchange {\\n\\n    function buyFee() external view returns (uint256);\\n\\n    function buyFeeDenominator() external view returns (uint256);\\n\\n    function redeemFee() external view returns (uint256);\\n\\n    function redeemFeeDenominator() external view returns (uint256);\\n\\n    function balance() external view returns (uint256);\\n\\n    /**\\n     * @param _addrTok Token to withdraw\\n     * @param _amount Amount of USD+ tokens to burn\\n     * @return Amount of minted to caller tokens\\n     */\\n    function buy(address _addrTok, uint256 _amount) external returns (uint256);\\n\\n    /**\\n     * @param _addrTok Token to withdraw\\n     * @param _amount Amount of USD+ tokens to burn\\n     * @return Amount of unstacked and transferred to caller tokens\\n     */\\n    function redeem(address _addrTok, uint256 _amount) external returns (uint256);\\n\\n    function payout() external;\\n\\n}\\n\",\"keccak256\":\"0x6dea6accb46212bd12eccecbdf5ea8019649f5c29504d7dc73fb3b8db7631e0b\",\"license\":\"MIT\"},\"contracts/libraries/AaveBorrowLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../connectors/aave/interfaces/IPoolAddressesProvider.sol\\\";\\nimport \\\"../connectors/aave/interfaces/IPriceFeed.sol\\\";\\nimport \\\"../connectors/aave/interfaces/IPool.sol\\\";\\nimport '../connectors/uniswap/v3/libraries/FullMath.sol';\\n\\n\\nlibrary AaveBorrowLibrary {\\n\\n    function getAavePool(\\n        address aavePoolAddressesProvider,\\n        uint8 eModeCategoryId\\n    ) internal returns (address aavePool) {\\n        aavePool = IPoolAddressesProvider(aavePoolAddressesProvider).getPool();\\n        IPool(aavePool).setUserEMode(eModeCategoryId);\\n    }\\n\\n    function getAavePool(\\n        address aavePoolAddressesProvider\\n    ) internal view returns (address aavePool) {\\n        aavePool = IPoolAddressesProvider(aavePoolAddressesProvider).getPool();\\n    }\\n\\n    function getCollateralAndBorrowForSupplyAndBorrow(\\n        uint256 amount0,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 LT,\\n        uint256 HF,\\n        uint256 token0Denominator,\\n        uint256 token1Denominator,\\n        uint256 price0,\\n        uint256 price1\\n    ) internal pure returns (uint256 collateral0, uint256 borrow1) {\\n        uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0);\\n        collateral0 = amount0 * HF / (HF + LT * reserve0 / reserve1InToken0);\\n        uint256 collateral1 = convertTokenAmountToTokenAmount(collateral0, token0Denominator, token1Denominator, price0, price1);\\n        borrow1 = collateral1 * LT / HF;\\n    }\\n\\n    function getBorrowForWithdraw(\\n        uint256 collateral0,\\n        uint256 reserve0,\\n        uint256 reserve1,\\n        uint256 LT,\\n        uint256 HF,\\n        uint256 token0Denominator,\\n        uint256 token1Denominator,\\n        uint256 price0,\\n        uint256 price1\\n    ) internal pure returns (uint256 borrow1) {\\n        uint256 collateral1 = convertTokenAmountToTokenAmount(collateral0, token0Denominator, token1Denominator, price0, price1);\\n        //usdc to usdt\\n        uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0);\\n        //usdt to usdc\\n        borrow1 = (collateral1 * LT * reserve1InToken0) / (HF * reserve1InToken0 + LT * reserve0);\\n    }\\n\\n    // function getBorrowForWithdraw(\\n    //     uint256 collateral0,\\n    //     uint256 totalCollateralUsd,\\n    //     uint256 totalBorrowUsd,\\n    //     uint256 reserve0,\\n    //     uint256 reserve1,\\n    //     uint256 LT,\\n    //     uint256 HF,\\n    //     uint256 token0Denominator,\\n    //     uint256 token1Denominator,\\n    //     uint256 price0,\\n    //     uint256 price1\\n    // ) internal pure returns (uint256 borrow1) {\\n    //     uint256 totalBorrowUsd1 = convertUsdToTokenAmount(totalBorrowUsd, token1Denominator, price1);   //usd to usdt\\n    //     uint256 totalCollateralUsd1 = convertUsdToTokenAmount(totalCollateralUsd, token1Denominator, price1); //usd to usdt\\n    //     uint256 collateral1 = convertTokenAmountToTokenAmount(collateral0, token0Denominator, token1Denominator, price0, price1); //usdc to usdt\\n    //     uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0); //usdt to usdc\\n    //     borrow1 = (totalBorrowUsd1 * HF + collateral1 * LT - totalCollateralUsd1 * LT) / (HF + LT * reserve0 / reserve1InToken0);\\n    // }\\n\\n    // function getLpTokensForWithdraw(\\n    //     uint256 totalLpBalance,\\n    //     uint256 borrow1,\\n    //     uint256 reserve0,\\n    //     uint256 reserve1,\\n    //     uint256 token0Denominator,\\n    //     uint256 token1Denominator,\\n    //     uint256 price0,\\n    //     uint256 price1\\n    // ) internal pure returns (uint256 lpTokensToWithdraw) {\\n    //     uint256 borrow0 = convertTokenAmountToTokenAmount(borrow1, token1Denominator, token0Denominator, price1, price0);\\n    //     uint256 reserve1InToken0 = convertTokenAmountToTokenAmount(reserve1, token1Denominator, token0Denominator, price1, price0);\\n    //     lpTokensToWithdraw = totalLpBalance * (borrow0 + borrow1 * reserve0 / reserve1) / (reserve0 + reserve1InToken0);\\n    // }\\n\\n    struct GetWithdrawAmountForBalanceParams {\\n        uint256 totalCollateralUsd;\\n        uint256 totalBorrowUsd;\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 LT;\\n        uint256 HF;\\n        uint256 token0Denominator;\\n        uint256 token1Denominator;\\n        uint256 price0;\\n        uint256 price1;\\n    }\\n\\n    function getWithdrawAmountForBalance(\\n        GetWithdrawAmountForBalanceParams memory params\\n    ) internal pure returns (uint256 withdrawAmount) {\\n        uint256 reserve1InUsd = convertTokenAmountToUsd(params.reserve1, params.token1Denominator, params.price1);\\n        uint256 reserve0InUsd = convertTokenAmountToUsd(params.reserve0, params.token0Denominator, params.price0);\\n        withdrawAmount = FullMath.mulDivRoundingUp(\\n            params.reserve0, \\n            params.totalCollateralUsd * params.LT - params.totalBorrowUsd * params.HF, \\n            reserve1InUsd * params.HF + reserve0InUsd * params.LT\\n        );\\n    }\\n\\n    function getBorrowIfZeroAmountForBalance(\\n        GetWithdrawAmountForBalanceParams memory params\\n    ) internal pure returns (uint256 withdrawAmount) {\\n        withdrawAmount = (params.totalCollateralUsd * params.LT - params.totalBorrowUsd * params.HF) / (params.HF);\\n        withdrawAmount = convertUsdToTokenAmount(withdrawAmount, params.token1Denominator, params.price1);\\n    }\\n\\n    struct GetLpTokensForBalanceParams {\\n        uint256 totalCollateralUsd;\\n        uint256 totalBorrowUsd;\\n        uint256 reserve0;\\n        uint256 reserve1;\\n        uint256 LT;\\n        uint256 HF;\\n        uint256 token0Denominator;\\n        uint256 token1Denominator;\\n        uint256 price0;\\n        uint256 price1;\\n        uint256 totalSuply;\\n    }\\n\\n    function getLpTokensForBalance(\\n        GetLpTokensForBalanceParams memory params\\n    ) internal pure returns (uint256 lpTokens) {\\n        uint256 reserve1InUsd = convertTokenAmountToUsd(params.reserve1, params.token1Denominator, params.price1);\\n        uint256 reserve0InUsd = convertTokenAmountToUsd(params.reserve0, params.token0Denominator, params.price0);\\n        lpTokens = FullMath.mulDivRoundingUp(\\n            params.totalSuply, \\n            params.totalBorrowUsd * params.HF - params.totalCollateralUsd * params.LT, \\n            reserve1InUsd * params.HF + reserve0InUsd * params.LT\\n        );\\n    }\\n\\n    function convertTokenAmountToTokenAmount(\\n        uint256 amount0,\\n        uint256 token0Denominator,\\n        uint256 token1Denominator,\\n        uint256 price0,\\n        uint256 price1\\n    ) internal pure returns (uint256 amount1) {\\n        amount1 = (amount0 * token1Denominator * price0) / (token0Denominator * price1);\\n    }\\n\\n    function convertTokenAmountToUsd(\\n        uint256 amount,\\n        uint256 tokenDenominator,\\n        uint256 price\\n    ) internal pure returns (uint256 amountUsd) {\\n        amountUsd = amount * price / tokenDenominator;\\n    }\\n\\n    function convertUsdToTokenAmount(\\n        uint256 amountUsd,\\n        uint256 tokenDenominator,\\n        uint256 price\\n    ) internal pure returns (uint256 amount) {\\n        amount = amountUsd * tokenDenominator / price;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7978106c150a54a787d2fa85cf9dffbfd69181172a0179155d777dab150ed45f\",\"license\":\"MIT\"},\"contracts/libraries/DystopiaLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../connectors/dystopia/interfaces/IDystopiaRouter.sol\\\";\\nimport \\\"../libraries/OvnMath.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary DystopiaLibrary {\\n\\n\\n    function _swapExactTokensForTokens(\\n        IDystopiaRouter dystRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        bool isStablePair1,\\n        uint256 amountInput,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(dystRouter), amountInput);\\n\\n        uint256 amountOutMin = _getAmountsOut(dystRouter, address(inputToken), address(middleToken), address(outputToken), isStablePair0, isStablePair1, amountInput);\\n        if (amountOutMin == 0) {\\n            return 0;\\n        }\\n\\n        IDystopiaRouter.Route[] memory route = new IDystopiaRouter.Route[](2);\\n        route[0].from = inputToken;\\n        route[0].to = middleToken;\\n        route[0].stable = isStablePair0;\\n        route[1].from = middleToken;\\n        route[1].to = outputToken;\\n        route[1].stable = isStablePair1;\\n\\n        uint[] memory amounts = dystRouter.swapExactTokensForTokens(\\n            amountInput,\\n            0,\\n            route,\\n            recipient,\\n            block.timestamp + 600\\n        );\\n\\n        return amounts[2];\\n    }\\n\\n    function _swap(\\n        IDystopiaRouter dystRouter,\\n        address inputToken,\\n        address outputToken,\\n        bool isStablePair,\\n        uint256 amountInput,\\n        uint256 slippagePersent,\\n        address recipient\\n    ) internal returns (uint256) {\\n\\n        IERC20(inputToken).approve(address(dystRouter), type(uint256).max);\\n\\n        uint256 amountOutMin = _getAmountOut(dystRouter, address(inputToken), address(outputToken), isStablePair,  amountInput);\\n        amountOutMin = amountOutMin / 10000 * (10000 - slippagePersent);\\n\\n        IDystopiaRouter.Route[] memory route = new IDystopiaRouter.Route[](1);\\n        route[0].from = inputToken;\\n        route[0].to = outputToken;\\n        route[0].stable = isStablePair;\\n\\n        uint[] memory amounts = dystRouter.swapExactTokensForTokens(\\n            amountInput,\\n            amountOutMin,\\n            route,\\n            recipient,\\n            block.timestamp + 600\\n        );\\n\\n        return amounts[1];\\n    }\\n\\n    function _getAmountOut(\\n        IDystopiaRouter dystRouter,\\n        address inputToken,\\n        address outputToken,\\n        bool isStablePair,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        IDystopiaRouter.Route[] memory route = new IDystopiaRouter.Route[](1);\\n        route[0].from = inputToken;\\n        route[0].to = outputToken;\\n        route[0].stable = isStablePair;\\n\\n        uint[] memory amounts = dystRouter.getAmountsOut(amountInput, route);\\n\\n        return amounts[1];\\n    }\\n\\n    function _getAmountsOut(\\n        IDystopiaRouter dystRouter,\\n        address inputToken,\\n        address middleToken,\\n        address outputToken,\\n        bool isStablePair0,\\n        bool isStablePair1,\\n        uint256 amountInput\\n    ) internal view returns (uint256) {\\n\\n        IDystopiaRouter.Route[] memory route = new IDystopiaRouter.Route[](2);\\n        route[0].from = inputToken;\\n        route[0].to = middleToken;\\n        route[0].stable = isStablePair0;\\n        route[1].from = middleToken;\\n        route[1].to = outputToken;\\n        route[1].stable = isStablePair1;\\n\\n        uint[] memory amounts = dystRouter.getAmountsOut(amountInput, route);\\n\\n        return amounts[2];\\n    }\\n\\n    function _addLiquidity(\\n        IDystopiaRouter dystRouter,\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) internal returns (uint amountA, uint amountB, uint liquidity) {\\n\\n        IERC20(tokenA).approve(address(dystRouter), amountADesired);\\n        IERC20(tokenB).approve(address(dystRouter), amountBDesired);\\n\\n        return dystRouter.addLiquidity(\\n            tokenA,\\n            tokenB,\\n            true,\\n            amountADesired,\\n            amountBDesired,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            block.timestamp + 600\\n        );\\n\\n    }\\n\\n    function _removeLiquidity(\\n        IDystopiaRouter dystRouter,\\n        address tokenA,\\n        address tokenB,\\n        address lpToken,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n    ) internal returns (uint amountA, uint amountB) {\\n\\n        IERC20(lpToken).approve(address(dystRouter), liquidity);\\n\\n        return dystRouter.removeLiquidity(\\n            tokenA,\\n            tokenB,\\n            true,\\n            liquidity,\\n            amountAMin,\\n            amountBMin,\\n            to,\\n            block.timestamp + 600\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xa97fa44c5aabe1e63940c1e066b5292bc510df7119cbd0ecabef1ebd9ef291f2\",\"license\":\"MIT\"},\"contracts/libraries/EtsCalculationLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../EtsStructsAndEnums.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary EtsCalculationLibrary{\\n\\n    uint256 public constant MAX_UINT_VALUE = type(uint256).max;\\n\\n    /**\\n      * d1 = -d2 - Lam - LFu;\\n      */\\n    function calcD1(CalcContext memory ctx) internal pure {\\n        ctx.deltas.d1 = - ctx.deltas.d2 - ctx.amount - ctx.liq.freeUsdPlus;\\n    }\\n\\n    /**\\n      * d2 = d6 * K2;\\n      */\\n    function calcD2(CalcContext memory ctx) internal pure {\\n        ctx.deltas.d2 = ctx.deltas.d6 * ctx.K2 / 1e18;\\n    }\\n\\n    /**\\n      * d3 = -LFw - d5 - d6;\\n      */\\n    function calcD3(CalcContext memory ctx) internal pure {\\n        ctx.deltas.d3 = - ctx.liq.freeWmatic - ctx.deltas.d5 - ctx.deltas.d6;\\n    }\\n\\n    /**\\n      * d4 = K1 * (LBw + d5) - LCu;\\n      */\\n    function calcD4(CalcContext memory ctx) internal pure {\\n        ctx.deltas.d4 = (ctx.liq.borrowWmatic + ctx.deltas.d5) * ctx.K1 / 1e18 - ctx.liq.collateralUsdc;\\n    }\\n\\n    /**\\n      * d5 = LPw - LBw - d6;\\n      */\\n    function calcD5(CalcContext memory ctx) internal pure {\\n        ctx.deltas.d5 = ctx.liq.poolWmatic - ctx.liq.borrowWmatic - ctx.deltas.d6;\\n    }\\n\\n    /**\\n     * d6 = ((K1 - 1) * LPw + LBw - LCu - LFu - LFuc - LFw - Lam) / (K1 + K2);\\n     */\\n    function calcD6(CalcContext memory ctx) internal view {\\n\\n        logSign(\\\"K1:\\\", ctx.K1);\\n        logSign(\\\"K2:\\\", ctx.K2);\\n\\n\\n        int256 a = (ctx.K1 - 1e18) * ctx.liq.poolWmatic / 1e18;\\n        logSign(\\\"a:\\\", a);\\n        a = a + ctx.liq.borrowWmatic;\\n        logSign(\\\"a:\\\", a);\\n        a = a - ctx.liq.collateralUsdc;\\n        logSign(\\\"a:\\\", a);\\n        a = a - ctx.liq.freeUsdPlus;\\n        logSign(\\\"a:\\\", a);\\n        a = a - ctx.liq.freeUsdc;\\n        logSign(\\\"a:\\\", a);\\n        a = a - ctx.liq.freeWmatic;\\n        logSign(\\\"a:\\\", a);\\n        a = a - ctx.amount;\\n        logSign(\\\"a:\\\", a);\\n\\n        int256 b = ctx.K1 + ctx.K2;\\n        logSign(\\\"b:\\\", b);\\n        int256 d6 = 1e18 * a / b;\\n\\n        ctx.deltas.d6 = d6;\\n    }\\n\\n    function logSign(string memory msg, int256 value) internal view {\\n        if (value < 0) {\\n            console.log(msg, \\\"-\\\", toUint256(- value));\\n        } else {\\n            console.log(msg, toUint256(value));\\n        }\\n    }\\n\\n    function abs(int256 value) internal pure returns (uint256){\\n        if (value < 0) {\\n            return toUint256(- value);\\n        } else {\\n            return toUint256(value);\\n        }\\n    }\\n\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n\\n    function liquidityToActions(CalcContext2 memory ctx2) public view returns (Action[] memory, uint256) {\\n\\n        Deltas memory deltas = Deltas(0, 0, 0, 0, 0, 0, 0);\\n        CalcContext memory ctx = CalcContext(ctx2.K1, ctx2.K2, ctx2.amount, ctx2.liq, ctx2.wmaticUsdcSlippagePersent, deltas);\\n\\n        //if it is unstake then increase unstake amount to awoid slippages on swap\\n        if (ctx.amount < 0) {\\n            //if decrease on wmaticUsdcSlippagePersent then newAmount became oldAmount\\n            ctx.amount = ctx.amount * 10000 / (10000 - toInt256(ctx.wmaticUsdcSlippagePersent));\\n        }\\n\\n        // order specified, don't change\\n        calcD6(ctx);\\n        calcD2(ctx);\\n        calcD1(ctx);\\n        calcD5(ctx);\\n        calcD4(ctx);\\n        calcD3(ctx);\\n        ctx.deltas.code = (ctx.deltas.d1 >= 0 ? 1 : 0) + 2 * (ctx.deltas.d2 >= 0 ? 1 : 0) + 4 * (ctx.deltas.d3 >= 0 ? 1 : 0) + 8 * (ctx.deltas.d4 >= 0 ? 1 : 0) + 16 * (ctx.deltas.d5 >= 0 ? 1 : 0);\\n\\n\\n        console.log(\\\"-------- Deltas\\\");\\n        logSign(\\\"d1:\\\", ctx.deltas.d1);\\n        logSign(\\\"d2:\\\", ctx.deltas.d2);\\n        logSign(\\\"d3:\\\", ctx.deltas.d3);\\n        logSign(\\\"d4:\\\", ctx.deltas.d4);\\n        logSign(\\\"d5:\\\", ctx.deltas.d5);\\n        logSign(\\\"d6:\\\", ctx.deltas.d6);\\n        console.log(\\\"code:\\\", ctx.deltas.code);\\n        console.log(\\\"--------\\\");\\n\\n\\n        Action[] memory actions = new Action[](6);\\n        uint index;\\n\\n        deltas = ctx.deltas;\\n\\n\\n        if (deltas.d1 < 0 && deltas.d3 < 0 && deltas.d4 < 0\\n            || deltas.d1 > 0 && deltas.d3 > 0 && deltas.d4 > 0\\n        ) {\\n            revert(\\\"D1-D3-D4 have same sign\\\");\\n        }\\n\\n        if (deltas.d3 < 0 && deltas.d5 < 0 && deltas.d6 < 0\\n            || deltas.d3 > 0 && deltas.d5 > 0 && deltas.d6 > 0\\n        ) {\\n            revert(\\\"D3-D5-D6 have same sign\\\");\\n        }\\n\\n        if (deltas.d3 >= 0 && deltas.d4 < 0 && deltas.d5 < 0) {\\n            // first circle cases (4 cases)\\n            actions[index++] = Action(ActionType.REMOVE_LIQUIDITY_FROM_DYSTOPIA, abs(deltas.d5), 0);\\n            actions[index++] = Action(ActionType.REPAY_WMATIC_TO_AAVE, abs(deltas.d5), 0);\\n            actions[index++] = Action(ActionType.WITHDRAW_USDC_FROM_AAVE, abs(deltas.d4), 0);\\n            actions[index++] = Action((deltas.d1 < 0) ? ActionType.SWAP_USDPLUS_TO_USDC : ActionType.SWAP_USDC_TO_USDPLUS, abs(deltas.d1), 0);\\n            actions[index++] = Action(ActionType.SWAP_USDC_TO_WMATIC, MAX_UINT_VALUE, ctx.wmaticUsdcSlippagePersent);\\n            actions[index++] = Action(ActionType.ADD_LIQUIDITY_TO_DYSTOPIA, (ctx2.amount < 0) ? uint(-ctx2.amount) : MAX_UINT_VALUE, 0);\\n        } else if (deltas.d3 < 0 && deltas.d4 >= 0 && deltas.d5 >= 0) {\\n            // second circle cases (4 cases)\\n            actions[index++] = Action(ActionType.REMOVE_LIQUIDITY_FROM_DYSTOPIA, abs(deltas.d3), 0);\\n            actions[index++] = Action(ActionType.SWAP_WMATIC_TO_USDC, MAX_UINT_VALUE, ctx.wmaticUsdcSlippagePersent);\\n            actions[index++] = Action((deltas.d1 < 0) ? ActionType.SWAP_USDPLUS_TO_USDC : ActionType.SWAP_USDC_TO_USDPLUS, abs(deltas.d1), 0);\\n            actions[index++] = Action(ActionType.SUPPLY_USDC_TO_AAVE, MAX_UINT_VALUE, 0);\\n            actions[index++] = Action(ActionType.BORROW_WMATIC_FROM_AAVE, abs(deltas.d5), 0);\\n            actions[index++] = Action(ActionType.ADD_LIQUIDITY_TO_DYSTOPIA, (ctx2.amount < 0) ? uint(-ctx2.amount) : MAX_UINT_VALUE, 0);\\n        } else if (deltas.d1 >= 0 && deltas.d2 >= 0 && deltas.d3 < 0) {\\n            // unstake without circle (3 cases: 00011,01011,10011)\\n            actions[index++] = Action(ActionType.REMOVE_LIQUIDITY_FROM_DYSTOPIA, abs(deltas.d6), 0);\\n            actions[index++] = Action((deltas.d5 < 0) ? ActionType.REPAY_WMATIC_TO_AAVE : ActionType.BORROW_WMATIC_FROM_AAVE, abs(deltas.d5), 0);\\n            actions[index++] = Action(ActionType.SWAP_WMATIC_TO_USDC, MAX_UINT_VALUE, ctx.wmaticUsdcSlippagePersent);\\n            actions[index++] = Action((deltas.d4 < 0) ? ActionType.WITHDRAW_USDC_FROM_AAVE : ActionType.SUPPLY_USDC_TO_AAVE, abs(deltas.d4), 0);\\n            actions[index++] = Action(ActionType.SWAP_USDC_TO_USDPLUS , MAX_UINT_VALUE, 0);\\n        } else if (deltas.d1 < 0 && deltas.d2 < 0 && deltas.d3 >= 0) {\\n            // stake without circle (3 cases: 01100,10100,11100)\\n            actions[index++] = Action(ActionType.SWAP_USDPLUS_TO_USDC, abs(deltas.d1), 0);\\n            actions[index++] = Action((deltas.d4 < 0) ? ActionType.WITHDRAW_USDC_FROM_AAVE : ActionType.SUPPLY_USDC_TO_AAVE, abs(deltas.d4), 0);\\n            actions[index++] = Action(ActionType.SWAP_USDC_TO_WMATIC, MAX_UINT_VALUE, ctx.wmaticUsdcSlippagePersent);\\n            actions[index++] = Action((deltas.d5 < 0) ? ActionType.REPAY_WMATIC_TO_AAVE : ActionType.BORROW_WMATIC_FROM_AAVE, abs(deltas.d5), 0);\\n            actions[index++] = Action(ActionType.ADD_LIQUIDITY_TO_DYSTOPIA, MAX_UINT_VALUE, 0);\\n        } else if (deltas.d1 < 0 && deltas.d2 >= 0 && deltas.d4 >= 0 && deltas.d5 < 0) {\\n            // balance without circle (2 cases: 01010,01110)\\n            actions[index++] = Action(ActionType.REMOVE_LIQUIDITY_FROM_DYSTOPIA, abs(deltas.d6), 0);\\n            actions[index++] = Action(ActionType.SWAP_USDPLUS_TO_USDC, abs(deltas.d1), 0);\\n            actions[index++] = Action((deltas.d3 < 0) ? ActionType.SWAP_WMATIC_TO_USDC : ActionType.SWAP_USDC_TO_WMATIC, abs(deltas.d3), ctx.wmaticUsdcSlippagePersent);\\n            actions[index++] = Action(ActionType.SUPPLY_USDC_TO_AAVE, MAX_UINT_VALUE, 0);\\n            actions[index++] = Action(ActionType.REPAY_WMATIC_TO_AAVE, MAX_UINT_VALUE, 0);\\n        } else if (deltas.d1 >= 0 && deltas.d2 < 0 && deltas.d4 < 0 && deltas.d5 >= 0) {\\n            // balance without circle (2 cases: 10001,10101)\\n            actions[index++] = Action(ActionType.WITHDRAW_USDC_FROM_AAVE, abs(deltas.d4), 0);\\n            actions[index++] = Action(ActionType.BORROW_WMATIC_FROM_AAVE, abs(deltas.d5), 0);\\n            actions[index++] = Action((deltas.d3 < 0) ? ActionType.SWAP_WMATIC_TO_USDC : ActionType.SWAP_USDC_TO_WMATIC, abs(deltas.d3), ctx.wmaticUsdcSlippagePersent);\\n            actions[index++] = Action(ActionType.SWAP_USDC_TO_USDPLUS, MAX_UINT_VALUE, 0);\\n            actions[index++] = Action(ActionType.ADD_LIQUIDITY_TO_DYSTOPIA, (ctx2.amount < 0) ? uint(-ctx2.amount) : MAX_UINT_VALUE, 0);\\n        } else {\\n            revert(\\\"non-existent case\\\");\\n        }\\n\\n        // reassemble array\\n        Action[] memory tmp = new Action[](index);\\n        for (uint j; j < index; j++) {\\n            tmp[j] = actions[j];\\n        }\\n        actions = tmp;\\n\\n        console.log(\\\"--------- actions\\\");\\n        for (uint j; j < actions.length; j++) {\\n            console.log(j, uint(actions[j].actionType), actions[j].amount);\\n        }\\n        console.log(\\\"---------\\\");\\n        return (actions, ctx.deltas.code);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2567a8c4126d313a1d1b70087ce4c64d00a80030a137c92bcc7a49ef20ad67df\",\"license\":\"MIT\"},\"contracts/libraries/OvnMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary OvnMath {\\n\\n    uint256 constant BASIS_DENOMINATOR = 10 ** 4;\\n\\n    function abs(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y) ? (x - y) : (y - x);\\n    }\\n\\n    function addBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR + basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseAddBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR + basisPoints);\\n    }\\n\\n    function subBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * (BASIS_DENOMINATOR - basisPoints) / BASIS_DENOMINATOR;\\n    }\\n\\n    function reverseSubBasisPoints(uint256 amount, uint256 basisPoints) internal pure returns (uint256) {\\n        return amount * BASIS_DENOMINATOR / (BASIS_DENOMINATOR - basisPoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb72198ec96f2754e9bf20531b1b8744f06ff2cc1c720e0ecc07196087cbe9657\",\"license\":\"MIT\"},\"contracts/libraries/UsdPlusWmaticLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StrategyUsdPlusWmatic.sol\\\";\\nimport \\\"./AaveBorrowLibrary.sol\\\";\\nimport \\\"../connectors/dystopia/interfaces/IDystopiaLP.sol\\\";\\nimport \\\"../connectors/dystopia/interfaces/IDystopiaRouter.sol\\\";\\nimport {OvnMath} from \\\"./OvnMath.sol\\\";\\nimport {DystopiaLibrary} from \\\"./DystopiaLibrary.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary UsdPlusWmaticLibrary {\\n\\n\\n    /**\\n     * ActionType: ADD_LIQUIDITY_TO_DYSTOPIA\\n     * Add liquidity to dyst pool:\\n     * [wmatic, usdPlus] -> dyst lpToken\\n     * + stake lpToken to Penrose\\n     */\\n    function _addLiquidityToDystopia(StrategyUsdPlusWmatic self, uint256 delta) public {\\n\\n        console.log(\\\"lol\\\", (delta == self.MAX_UINT_VALUE() ? 0 : delta));\\n        console.log(\\\"kek\\\", self.usdPlus().balanceOf(address(self)));\\n\\n        self.dystRouter().addLiquidity(\\n            address(self.wmatic()),\\n            address(self.usdPlus()),\\n            false,\\n            self.wmatic().balanceOf(address(self)),\\n            self.usdPlus().balanceOf(address(self)) - (delta == self.MAX_UINT_VALUE() ? 0 : delta),\\n            0,\\n            0,\\n            address(self),\\n            block.timestamp + 600\\n        );\\n\\n\\n        uint256 lpTokenBalance = self.dystVault().balanceOf(address(self));\\n        self.dystVault().approve(address(self.penProxy()), lpTokenBalance);\\n        self.penProxy().depositLpAndStake(address(self.dystVault()), lpTokenBalance);\\n    }\\n\\n    /**\\n     * ActionType: REMOVE_LIQUIDITY_FROM_DYSTOPIA\\n     * Remove liquidity from dyst pool:\\n     * dyst lpToken -> [wmatic, usdPlus]\\n     * @param delta - Wmatic amount in USD e6\\n     */\\n    function _removeLiquidityFromDystopia(StrategyUsdPlusWmatic self, uint256 delta) public returns (uint256 amountWmatic, uint256 amountUsdPlus) {\\n\\n        // calc wmatic tokens amount\\n        uint256 poolWmaticDelta = self.usdToWmatic(delta);\\n\\n        uint256 lpForUnstake;\\n        {\\n            address userProxyThis = self.penLens().userProxyByAccount(address(self));\\n            address stakingAddress = self.penLens().stakingRewardsByDystPool(address(self.dystVault()));\\n            uint256 balanceLp = IERC20(stakingAddress).balanceOf(userProxyThis);\\n            (uint256 poolWmatic,) = _getLiquidityByLp(self, balanceLp);\\n            lpForUnstake = poolWmaticDelta * balanceLp / poolWmatic + 1;\\n        }\\n\\n        self.penProxy().unstakeLpAndWithdraw(address(self.dystVault()), lpForUnstake);\\n\\n        (amountWmatic, amountUsdPlus) = self.dystRouter().removeLiquidity(\\n            address(self.wmatic()),\\n            address(self.usdPlus()),\\n            false,\\n            lpForUnstake,\\n            0,\\n            0,\\n            address(self),\\n            block.timestamp + 600\\n        );\\n\\n    }\\n\\n\\n    /**\\n     * ActionType: SWAP_USDPLUS_TO_USDC\\n     * Swap on exchange\\n     * usdPlus -> usdc\\n     * @param delta - UsdPlus in USD e6\\n     */\\n    function _swapUspPlusToUsdc(StrategyUsdPlusWmatic self, uint256 delta) public {\\n        uint256 redeemUsdPlusAmount = (delta == self.MAX_UINT_VALUE()) ? self.usdPlus().balanceOf(address(self)) : self.usdToUsdc(delta);\\n        if (redeemUsdPlusAmount == 0) return;\\n        self.exchange().redeem(address(self.usdc()), redeemUsdPlusAmount);\\n    }\\n\\n\\n    /**\\n     * ActionType: SWAP_USDC_TO_USDPLUS\\n     * Swap on exchange\\n     * usdc -> usdPlus\\n     * @param delta - Usdc in USD e6\\n     */\\n    function _swapUsdcToUsdPlus(StrategyUsdPlusWmatic self, uint256 delta) public {\\n        uint256 buyUsdcAmount = (delta == self.MAX_UINT_VALUE()) ? self.usdc().balanceOf(address(self)) : self.usdToUsdc(delta);\\n        if (buyUsdcAmount == 0) return;\\n        self.exchange().buy(address(self.usdc()), buyUsdcAmount);\\n    }\\n\\n\\n    /**\\n     * ActionType: SUPPLY_USDC_TO_AAVE\\n     * usdc -> (supply aave)\\n     * @param delta - Usdc in USD e6\\n     */\\n    function _supplyUsdcToAave(StrategyUsdPlusWmatic self, uint256 delta) public {\\n        uint256 supplyUsdcAmount = (delta == self.MAX_UINT_VALUE()) ? self.usdc().balanceOf(address(self)) : self.usdToUsdc(delta);\\n        if (supplyUsdcAmount == 0) return;\\n        // aave pool may be changed, so we need always approve\\n        self.usdc().approve(address(self.aavePool()), supplyUsdcAmount);\\n\\n        //TODO: check balance ??\\n        self.aavePool().supply(address(self.usdc()), supplyUsdcAmount, address(this), self.REFERRAL_CODE());\\n    }\\n\\n\\n    /**\\n     * ActionType: WITHDRAW_USDC_FROM_AAVE\\n     * (aave) -> usdc\\n     * @param delta - Usdc in USD e6\\n     */\\n    function _withdrawUsdcFromAave(StrategyUsdPlusWmatic self, uint256 delta) public {\\n        uint256 withdrawUsdcAmount = self.usdToUsdc(delta);\\n        self.aavePool().withdraw(address(self.usdc()), withdrawUsdcAmount, address(self));\\n    }\\n\\n\\n    /**\\n     * ActionType: BORROW_WMATIC_FROM_AAVE\\n     * (borrow from aave) -> wmatic\\n     * @param delta - Wmatic in USD e6\\n     */\\n    function _borrowWmaticFromAave(StrategyUsdPlusWmatic self, uint256 delta) public {\\n        uint256 borrowWmaticAmount = self.usdToWmatic(delta);\\n        self.aavePool().borrow(\\n            address(self.wmatic()),\\n            borrowWmaticAmount,\\n            self.INTEREST_RATE_MODE(),\\n            self.REFERRAL_CODE(),\\n            address(self)\\n        );\\n    }\\n\\n\\n    /**\\n     * ActionType: REPAY_WMATIC_TO_AAVE\\n     * wmatic -> (back to aave)\\n     * @param delta - Wmatic in USD e6\\n     */\\n    function _repayWmaticToAave(StrategyUsdPlusWmatic self, uint256 delta) public {\\n        uint256 repayWmaticAmount = (delta == self.MAX_UINT_VALUE()) ? self.wmatic().balanceOf(address(self)) : self.usdToWmatic(delta);\\n        if (repayWmaticAmount == 0) return;\\n        // aave pool may be changed, so we need always approve\\n        self.wmatic().approve(address(self.aavePool()), repayWmaticAmount);\\n\\n        self.aavePool().repay(\\n            address(self.wmatic()),\\n            repayWmaticAmount,\\n            self.INTEREST_RATE_MODE(),\\n            address(self)\\n        );\\n    }\\n\\n\\n    /**\\n     * ActionType: SWAP_WMATIC_TO_USDC\\n     * Swap on dystopia\\n     * usdPlus -> wmatic\\n     * @param delta - Wmatic in USD e6\\n     */\\n    function _swapWmaticToUsdc(StrategyUsdPlusWmatic self, uint256 delta, uint256 slippagePersent) public {\\n        uint256 swapWmaticAmount = (delta == self.MAX_UINT_VALUE()) ? self.wmatic().balanceOf(address(self)) : self.usdToWmatic(delta);\\n        if (swapWmaticAmount == 0) return;\\n        //TODO: replace by UniV3\\n        uint256 result = DystopiaLibrary._swap(\\n            self.dystRouter(),\\n            address(self.wmatic()),\\n            address(self.usdc()),\\n            false,\\n            swapWmaticAmount,\\n            slippagePersent,\\n            address(self)\\n        );\\n    }\\n\\n\\n    /**\\n     * ActionType: SWAP_USDC_TO_WMATIC\\n     * Swap on dystopia\\n     * usdPlus -> wmatic\\n     * @param delta - Usdc in USD e6\\n     */\\n    function _swapUsdcToWmatic(StrategyUsdPlusWmatic self, uint256 delta, uint256 slippagePersent) public {\\n        uint256 swapUsdcAmount = (delta == self.MAX_UINT_VALUE()) ? self.usdc().balanceOf(address(self)) : self.usdToUsdc(delta);\\n        if (swapUsdcAmount == 0) return;\\n        //TODO: replace by UniV3\\n        uint256 result = DystopiaLibrary._swap(\\n            self.dystRouter(),\\n            address(self.usdc()),\\n            address(self.wmatic()),\\n            false,\\n            swapUsdcAmount,\\n            slippagePersent,\\n            address(self)\\n        );\\n        console.log(\\\"swapUsdcAmount\\\", swapUsdcAmount);\\n        console.log(\\\"result\\\", result);\\n    }\\n\\n\\n    /**\\n     * Own liquidity in pool in their native digits. Used in strategy.\\n     */\\n    function _getLiquidity(StrategyUsdPlusWmatic self) public view returns (uint256, uint256){\\n\\n        address userProxyThis = self.penLens().userProxyByAccount(address(self));\\n        address stakingAddress = self.penLens().stakingRewardsByDystPool(address(self.dystVault()));\\n        uint256 balanceLp = IERC20(stakingAddress).balanceOf(userProxyThis);\\n\\n        return _getLiquidityByLp(self, balanceLp);\\n    }\\n\\n    function _getLiquidityByLp(StrategyUsdPlusWmatic self, uint256 balanceLp) internal view returns (uint256, uint256){\\n\\n        (uint256 reserve0Current, uint256 reserve1Current,) = self.dystVault().getReserves();\\n\\n        uint256 amountLiq0 = reserve0Current * balanceLp / self.dystVault().totalSupply();\\n        uint256 amountLiq1 = reserve1Current * balanceLp / self.dystVault().totalSupply();\\n        return (amountLiq0, amountLiq1);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4df52de5ed2657d3b9cdde9ca87cae7bc18b6bc1fcc7fc225f7adfa063d3b813\",\"license\":\"MIT\"},\"contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.6.12;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\nlibrary WadRayMath {\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant halfWAD = WAD / 2;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant halfRAY = RAY / 2;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @return One ray, 1e27\\n     **/\\n    function ray() internal pure returns (uint256) {\\n        return RAY;\\n    }\\n\\n    /**\\n     * @return One wad, 1e18\\n     **/\\n\\n    function wad() internal pure returns (uint256) {\\n        return WAD;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e27/2\\n     **/\\n    function halfRay() internal pure returns (uint256) {\\n        return halfRAY;\\n    }\\n\\n    /**\\n     * @return Half ray, 1e18/2\\n     **/\\n    function halfWad() internal pure returns (uint256) {\\n        return halfWAD;\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        require(a <= (type(uint256).max - halfWAD) / b, \\\"Errors.MATH_MULTIPLICATION_OVERFLOW\\\");\\n        return (a * b + halfWAD) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"Errors.MATH_DIVISION_BY_ZERO\\\");\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 halfB = b / 2;\\n        require(a <= (type(uint256).max - halfB) / WAD, \\\"Errors.MATH_MULTIPLICATION_OVERFLOW\\\");\\n        return (a * WAD + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        require(a <= (type(uint256).max - halfRAY) / b, \\\"Errors.MATH_MULTIPLICATION_OVERFLOW\\\");\\n        return (a * b + halfRAY) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"Errors.MATH_DIVISION_BY_ZERO\\\");\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 halfB = b / 2;\\n        require(a <= (type(uint256).max - halfB) / RAY, \\\"Errors.MATH_MULTIPLICATION_OVERFLOW\\\");\\n        return (a * RAY + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @param a Ray\\n     * @return a casted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\\n        uint256 result = halfRatio + a;\\n        require(result >= halfRatio, \\\"Errors.MATH_ADDITION_OVERFLOW\\\");\\n        return result / WAD_RAY_RATIO;\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @param a Wad\\n     * @return a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO;\\n        require(result / WAD_RAY_RATIO == a, \\\"Errors.MATH_MULTIPLICATION_OVERFLOW\\\");\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half down to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        require(a <= (type(uint256).max / b), \\\"Errors.MATH_MULTIPLICATION_OVERFLOW\\\");\\n        return (a * b) / WAD;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half down to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDivDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"Errors.MATH_DIVISION_BY_ZERO\\\");\\n        if (a == 0) {\\n            return 0;\\n        }\\n        require(a <= (type(uint256).max / WAD), \\\"Errors.MATH_MULTIPLICATION_OVERFLOW\\\");\\n        return (a * WAD) / b;\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half down to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        require(a <= (type(uint256).max / b), \\\"Errors.MATH_MULTIPLICATION_OVERFLOW\\\");\\n        return (a * b) / RAY;\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half down to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDivDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"Errors.MATH_DIVISION_BY_ZERO\\\");\\n        if (a == 0) {\\n            return 0;\\n        }\\n        require(a <= (type(uint256).max / RAY), \\\"Errors.MATH_MULTIPLICATION_OVERFLOW\\\");\\n        return (a * RAY) / b;\\n    }\\n}\\n\",\"keccak256\":\"0xa0c3dfe88d7abaf4feb6aa3f4b1d4ed372b600c422da6516a06afa1b96e8e208\",\"license\":\"agpl-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060601b6080523480156200001857600080fd5b50600054610100900460ff16158080156200003a5750600054600160ff909116105b806200006a575062000057306200014460201b620029bc1760201c565b1580156200006a575060005460ff166001145b620000d25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff191660011790558015620000f6576000805461ff0019166101001790555b80156200013d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000153565b6001600160a01b03163b151590565b60805160601c6155a16200018e6000396000818161160b0152818161164b01528181611c5801528181611c980152611d2701526155a16000f3fe60806040526004361061038c5760003560e01c806379bc8b67116101dc578063cfab8eda11610102578063e8ced75c116100a0578063f72c0d8b1161006f578063f72c0d8b14610a37578063f933296314610a6b578063fb24974a14610a8b578063fb41be1614610aa157600080fd5b8063e8ced75c146109d3578063ef5cfb8c146109ea578063f52d4a6514610a0a578063f664b3d914610a2157600080fd5b8063da909b09116100dc578063da909b091461095a578063ddca95f31461097a578063e109e0341461099b578063e54bef75146109b257600080fd5b8063cfab8eda146108f8578063d2f7265a14610919578063d547741f1461093a57600080fd5b80639994e71b1161017a578063a694fc3a11610149578063a694fc3a14610873578063b69ef8a814610893578063bd0f1053146108a8578063cf13f249146108ca57600080fd5b80639994e71b14610813578063a03e4bc314610834578063a217fddf14610849578063a3673b381461085e57600080fd5b806383008bd9116101b657806383008bd91461079d5780638381e182146107b25780638b2ddd14146107d257806391d14854146107f357600080fd5b806379bc8b67146107465780637bb98a68146107665780638129fc1c1461078857600080fd5b80633e413bee116102c157806352d1902d1161025f57806365196e1e1161022e57806365196e1e146106cf57806369e4e005146106f057806371adbbd314610711578063799ef2241461073157600080fd5b806352d1902d146106625780635a01f33d146106775780635d85786d1461068d5780635fea9cbb146106ae57600080fd5b806346caf2ae1161029b57806346caf2ae146105ec5780634d12fca41461060e5780634f1ef2861461062e578063514e460a1461064157600080fd5b80633e413bee146105935780634031234c146105b4578063457482a0146105cb57600080fd5b80632a8b096f1161032e57806335faba331161030857806335faba331461050c57806336568abe146105335780633659cfe61461055357806338d52e0f1461057357600080fd5b80632a8b096f146104ad5780632f2ff15d146104c45780633583849a146104e457600080fd5b80631b1e7ddc1161036a5780631b1e7ddc1461042d5780631b74a9341461044457806322841f0114610466578063248a9ca31461047d57600080fd5b806301ffc9a714610391578063097cb6c1146103c657806310e4a7dd146103ff575b600080fd5b34801561039d57600080fd5b506103b16103ac3660046149c8565b610ac2565b60405190151581526020015b60405180910390f35b3480156103d257600080fd5b50610138546103e7906001600160a01b031681565b6040516001600160a01b0390911681526020016103bd565b34801561040b57600080fd5b5061041f61041a366004614966565b610af9565b6040519081526020016103bd565b34801561043957600080fd5b5061041f6101345481565b34801561045057600080fd5b5061046461045f366004614aa3565b610b99565b005b34801561047257600080fd5b5061041f6101425481565b34801561048957600080fd5b5061041f610498366004614966565b60009081526065602052604090206001015490565b3480156104b957600080fd5b5061041f6101445481565b3480156104d057600080fd5b506104646104df366004614998565b61155d565b3480156104f057600080fd5b506104f9600081565b60405161ffff90911681526020016103bd565b34801561051857600080fd5b50610521600081565b60405160ff90911681526020016103bd565b34801561053f57600080fd5b5061046461054e366004614998565b611582565b34801561055f57600080fd5b5061046461056e3660046146eb565b611600565b34801561057f57600080fd5b5060fb546103e7906001600160a01b031681565b34801561059f57600080fd5b50610130546103e7906001600160a01b031681565b3480156105c057600080fd5b5061041f6101415481565b3480156105d757600080fd5b50610137546103e7906001600160a01b031681565b3480156105f857600080fd5b506106016116e0565b6040516103bd9190614f9a565b34801561061a57600080fd5b5060fc546103e7906001600160a01b031681565b61046461063c366004614725565b611c4d565b34801561064d57600080fd5b5061012f546103e7906001600160a01b031681565b34801561066e57600080fd5b5061041f611d1a565b34801561068357600080fd5b506101445461041f565b34801561069957600080fd5b50610136546103e7906001600160a01b031681565b3480156106ba57600080fd5b5061013e546103e7906001600160a01b031681565b3480156106db57600080fd5b50610131546103e7906001600160a01b031681565b3480156106fc57600080fd5b5061013d546103e7906001600160a01b031681565b34801561071d57600080fd5b5061041f61072c366004614966565b611dcd565b34801561073d57600080fd5b5061041f606481565b34801561075257600080fd5b5061041f610761366004614966565b611e6f565b34801561077257600080fd5b5061077b611eca565b6040516103bd9190614d76565b34801561079457600080fd5b50610464612258565b3480156107a957600080fd5b5061041f600281565b3480156107be57600080fd5b5061041f6107cd366004614998565b612321565b3480156107de57600080fd5b5061013b546103e7906001600160a01b031681565b3480156107ff57600080fd5b506103b161080e366004614998565b61248b565b34801561081f57600080fd5b50610133546103e7906001600160a01b031681565b34801561084057600080fd5b506103e76124b6565b34801561085557600080fd5b5061041f600081565b34801561086a57600080fd5b5061041f6124d4565b34801561087f57600080fd5b5061046461088e366004614966565b612501565b34801561089f57600080fd5b506104646125ea565b3480156108b457600080fd5b5061041f60008051602061540e83398151915281565b3480156108d657600080fd5b506108ea6108e53660046149f2565b6125f2565b6040516103bd929190614d16565b34801561090457600080fd5b5061013a546103e7906001600160a01b031681565b34801561092557600080fd5b5061012e546103e7906001600160a01b031681565b34801561094657600080fd5b50610464610955366004614998565b6127b2565b34801561096657600080fd5b506104646109753660046146eb565b6127d7565b34801561098657600080fd5b5061013f546103e7906001600160a01b031681565b3480156109a757600080fd5b5061041f6101355481565b3480156109be57600080fd5b50610139546103e7906001600160a01b031681565b3480156109df57600080fd5b5061041f6101405481565b3480156109f657600080fd5b5061041f610a053660046146eb565b6128d5565b348015610a1657600080fd5b5061041f6101435481565b348015610a2d57600080fd5b5061041f61019081565b348015610a4357600080fd5b5061041f7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b348015610a7757600080fd5b5061041f610a86366004614966565b612959565b348015610a9757600080fd5b5061041f60001981565b348015610aad57600080fd5b50610132546103e7906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b1480610af357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610af3610b0983606461522a565b6101345461013e60009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5c57600080fd5b505afa158015610b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b94919061497f565b6129cb565b610ba460003361248b565b610bec5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b60448201526064015b60405180910390fd5b6000610bfb60208301836146eb565b6001600160a01b03161415610c4d5760405162461bcd60e51b815260206004820152601860248201527716915493d7d05111149154d4c81b9bdd08185b1b1bddd95960421b6044820152606401610be3565b6000610c5f60608301604084016146eb565b6001600160a01b03161415610cb15760405162461bcd60e51b815260206004820152601860248201527716915493d7d05111149154d4c81b9bdd08185b1b1bddd95960421b6044820152606401610be3565b610cbe60208201826146eb565b61013080546001600160a01b0319166001600160a01b0392909216919091179055610cef60408201602083016146eb565b61013180546001600160a01b0319166001600160a01b0392909216919091179055610d2060608201604083016146eb565b61013280546001600160a01b0319166001600160a01b0392909216919091179055610d4e60208201826146eb565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8657600080fd5b505afa158015610d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbe9190614b7a565b610dc990600a61517f565b61013455610ddd60608201604083016146eb565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1557600080fd5b505afa158015610e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4d9190614b7a565b610e5890600a61517f565b61013555610e6c60808201606083016146eb565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055610ea5610ea060808301606084016146eb565b6129ea565b610eb560a08201608083016146eb565b61013980546001600160a01b0319166001600160a01b0392909216919091179055610ee660c0820160a083016146eb565b61013380546001600160a01b0319166001600160a01b0392909216919091179055610f18610100820160e083016146eb565b61013780546001600160a01b0319166001600160a01b0392909216919091179055610f4b610120820161010083016146eb565b61013880546001600160a01b0319166001600160a01b0392909216919091179055610f7e610140820161012083016146eb565b61013680546001600160a01b0319166001600160a01b0392909216919091179055610fb1610160820161014083016146eb565b61013a80546001600160a01b0319166001600160a01b0392909216919091179055610fe4610180820161016083016146eb565b61013b80546001600160a01b0319166001600160a01b039290921691909117905561101560e0820160c083016146eb565b61012e80546001600160a01b0319166001600160a01b039290921691909117905561018081013561013c556110526101c082016101a083016146eb565b61013d80546001600160a01b0319166001600160a01b0392909216918217905560408051631f94a27560e31b815290516000929163fca513a8916004808301926020929190829003018186803b1580156110ab57600080fd5b505afa1580156110bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e39190614708565b90506001600160a01b0381166392bf2be061110160208501856146eb565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561114057600080fd5b505afa158015611154573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111789190614708565b61013e80546001600160a01b0319166001600160a01b0392831617905581166392bf2be06111ac60608501604086016146eb565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156111eb57600080fd5b505afa1580156111ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112239190614708565b61013f80546001600160a01b0319166001600160a01b039290921691909117905561125a6101c083013566038d7ea4c6800061522a565b610141556112746101e083013566038d7ea4c6800061522a565b6101425560006101445561129461020083013566038d7ea4c6800061522a565b6101435561012f546101365460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926112d29291169060001990600401614cfd565b602060405180830381600087803b1580156112ec57600080fd5b505af1158015611300573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113249190614944565b50610132546101365460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261135f9291169060001990600401614cfd565b602060405180830381600087803b15801561137957600080fd5b505af115801561138d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b19190614944565b50610138546101365460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926113ec9291169060001990600401614cfd565b602060405180830381600087803b15801561140657600080fd5b505af115801561141a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143e9190614944565b5061012f5461012e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926114799291169060001990600401614cfd565b602060405180830381600087803b15801561149357600080fd5b505af11580156114a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cb9190614944565b506101305461012e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926115069291169060001990600401614cfd565b602060405180830381600087803b15801561152057600080fd5b505af1158015611534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115589190614944565b505050565b60008281526065602052604090206001015461157881612a5d565b6115588383612a67565b6001600160a01b03811633146115f25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610be3565b6115fc8282612aed565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156116495760405162461bcd60e51b8152600401610be390614e6f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611692600080516020615451833981519152546001600160a01b031690565b6001600160a01b0316146116b85760405162461bcd60e51b8152600401610be390614ebb565b6116c181612b54565b604080516000808252602082019092526116dd91839190612b7e565b50565b6117206040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051635a982ebb60e11b8152306004820152600090819073__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__9063b5305d7690602401604080518083038186803b15801561176e57600080fd5b505af4158015611782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a69190614b0c565b9150915060006117b583611dcd565b905060006117c283611e6f565b90506000806117cf6124b6565b604051632fe4a15f60e21b81523060048201526001600160a01b03919091169063bf92857c9060240160c06040518083038186803b15801561181057600080fd5b505afa158015611824573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118489190614b30565b505050509150915060648261185d919061511a565b915061186a60648261511a565b61012f546040516370a0823160e01b81523060048201529192506000916118ef916001600160a01b0316906370a08231906024015b60206040518083038186803b1580156118b757600080fd5b505afa1580156118cb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610761919061497f565b610130546040516370a0823160e01b8152306004820152919250600091611928916001600160a01b0316906370a082319060240161189f565b610132546040516370a0823160e01b81523060048201529192506000916119ac916001600160a01b0316906370a082319060240160206040518083038186803b15801561197457600080fd5b505afa158015611988573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072c919061497f565b90506119cf60405180606001604052806024815260200161550360249139612cf8565b611a036040518060400160405280601281526020017103837b7b62bb6b0ba34b190101010101010160751b8152508a612d3b565b611a376040518060400160405280601281526020017103837b7b62bb6b0ba34b1aab9b210101010160751b81525088612d3b565b611a6b6040518060400160405280601281526020017103837b7b62ab9b228363ab9901010101010160751b81525089612d3b565b611a9f6040518060400160405280601281526020017103837b7b62ab9b228363ab9aab9b2101010160751b81525087612d3b565b611ad360405180604001604052806012815260200171030b0bb32a1b7b63630ba32b930b62ab9b2160751b81525086612d3b565b611b0760405180604001604052806012815260200171030b0bb32a137b93937bbaab9b210101010160751b81525085612d3b565b611b3b6040518060400160405280601281526020017103bb6b0ba34b1a130b630b731b2aab9b210160751b81525082612d3b565b611b6f6040518060400160405280601281526020017103ab9b228363ab9a130b630b731b2aab9b2160751b81525084612d3b565b611ba36040518060400160405280601281526020017103ab9b231a130b630b731b2aab9b2101010160751b81525083612d3b565b611bd5604051806040016040528060118152602001702d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d60781b815250612cf8565b6040518060e00160405280611be987612d80565b8152602001611bf786612d80565b8152602001611c0589612d80565b8152602001611c1388612d80565b8152602001611c2185612d80565b8152602001611c2f84612d80565b8152602001611c3d83612d80565b90529a9950505050505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415611c965760405162461bcd60e51b8152600401610be390614e6f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cdf600080516020615451833981519152546001600160a01b031690565b6001600160a01b031614611d055760405162461bcd60e51b8152600401610be390614ebb565b611d0e82612b54565b6115fc82826001612b7e565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611dba5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610be3565b5060008051602061545183398151915290565b60006064611e65836101355461013f60009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e2857600080fd5b505afa158015611e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e60919061497f565b612dee565b610af3919061511a565b60006064611e65836101345461013e60009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e2857600080fd5b60606000611ed66116e0565b604080516007808252610100820190925291925060009190816020015b611f2060405180608001604052806060815260200160008152602001600081526020016000151581525090565b815260200190600190039081611ef357905050905060405180608001604052806040518060400160405280600c81526020016b626f72726f77576d6174696360a01b8152508152602001611f778460200151612dfb565b8152602001600081526020016001151581525081600081518110611f9d57611f9d61532f565b602002602001018190525060405180608001604052806040518060400160405280600e81526020016d636f6c6c61746572616c5573646360901b8152508152602001611fec8460000151612dfb565b81526020016000815260200160001515815250816001815181106120125761201261532f565b602002602001018190525060405180608001604052806040518060400160405280600a815260200169706f6f6c576d6174696360b01b815250815260200161205d8460400151612dfb565b81526020016000815260200160001515815250816002815181106120835761208361532f565b602002602001018190525060405180608001604052806040518060400160405280600b81526020016a706f6f6c557364506c757360a81b81525081526020016120cf8460600151612dfb565b81526020016000815260200160001515815250816003815181106120f5576120f561532f565b602002602001018190525060405180608001604052806040518060400160405280600b81526020016a66726565557364506c757360a81b81525081526020016121418460800151612dfb565b81526020016000815260200160001515815250816004815181106121675761216761532f565b6020026020010181905250604051806080016040528060405180604001604052806008815260200167667265655573646360c01b81525081526020016121b08460a00151612dfb565b81526020016000815260200160001515815250816005815181106121d6576121d661532f565b602002602001018190525060405180608001604052806040518060400160405280600a81526020016966726565576d6174696360b01b81525081526020016122218460c00151612dfb565b81526020016000815260200160001515815250816006815181106122475761224761532f565b602090810291909101015292915050565b600054610100900460ff16158080156122785750600054600160ff909116105b806122925750303b158015612292575060005460ff166001145b6122ae5760405162461bcd60e51b8152600401610be390614f07565b6000805460ff1916600117905580156122d1576000805461ff0019166101001790555b6122d9612e4d565b80156116dd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b600061233b60008051602061540e8339815191523361248b565b6123575760405162461bcd60e51b8152600401610be390614e38565b600061236284612f0b565b9050838110156123c65760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610be3565b60fb5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906123f89086908590600401614cfd565b602060405180830381600087803b15801561241257600080fd5b505af1158015612426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244a9190614944565b5060408051858152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a19392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61013d546000906124cf906001600160a01b0316612f27565b905090565b6000806124df6116e0565b905060006124ec82612f9a565b90506124fa61041a82612dfb565b9250505090565b61251960008051602061540e8339815191523361248b565b6125355760405162461bcd60e51b8152600401610be390614e38565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a160fb546040516370a0823160e01b81523060048201526116dd916001600160a01b0316906370a082319060240160206040518083038186803b1580156125ad57600080fd5b505afa1580156125c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e5919061497f565b613007565b6116dd61301a565b6060600080600073__$b81542ba4bbecae0b335024aea21ab4102$__63437559f9866040518263ffffffff1660e01b81526004016126309190614f55565b60006040518083038186803b15801561264857600080fd5b505af415801561265c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261268491908101906147cd565b915091506000825167ffffffffffffffff8111156126a4576126a4615345565b6040519080825280602002602001820160405280156126f957816020015b6126e660405180606001604052806000815260200160008152602001600081525090565b8152602001906001900390816126c25790505b50905060005b83518110156127a75783818151811061271a5761271a61532f565b6020026020010151602001518282815181106127385761273861532f565b6020026020010151602001818152505083818151811061275a5761275a61532f565b602002602001015160000151600981111561277757612777615319565b8282815181106127895761278961532f565b6020908102919091010151528061279f816152cb565b9150506126ff565b509590945092505050565b6000828152606560205260409020600101546127cd81612a5d565b6115588383612aed565b6127e260003361248b565b6128255760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610be3565b6001600160a01b0381166128765760405162461bcd60e51b815260206004820152601860248201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b6044820152606401610be3565b60fc5461289b9060008051602061540e833981519152906001600160a01b03166127b2565b6128b360008051602061540e8339815191528261155d565b60fc80546001600160a01b0319166001600160a01b0392909216919091179055565b60006128ef60008051602061540e8339815191523361248b565b61290b5760405162461bcd60e51b8152600401610be390614e38565b600061291683613038565b90507f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1348160405161294991815260200190565b60405180910390a190505b919050565b6000610af361296983606461522a565b6101355461013f60009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5c57600080fd5b6001600160a01b03163b151590565b6000816129d8848661522a565b6129e2919061511a565b949350505050565b6001600160a01b038116612a3b5760405162461bcd60e51b815260206004820152601860248201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b6044820152606401610be3565b60fb80546001600160a01b0319166001600160a01b0392909216919091179055565b6116dd8133613237565b612a71828261248b565b6115fc5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612aa93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612af7828261248b565b156115fc5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e36115fc81612a5d565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612bb1576115588361329b565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015612bea57600080fd5b505afa925050508015612c1a575060408051601f3d908101601f19168201909252612c179181019061497f565b60015b612c7d5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610be3565b6000805160206154518339815191528114612cec5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610be3565b50611558838383613337565b6116dd81604051602401612d0c9190614e03565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052613362565b6115fc8282604051602401612d51929190614e16565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052613362565b60006001600160ff1b03821115612dea5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610be3565b5090565b6000826129d8838661522a565b600080821215612dea5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610be3565b600054610100900460ff1615808015612e6d5750600054600160ff909116105b80612e875750303b158015612e87575060005460ff166001145b612ea35760405162461bcd60e51b8152600401610be390614f07565b6000805460ff191660011790558015612ec6576000805461ff0019166101001790555b612ece613383565b612ed6613383565b612ee1600033612a67565b6122d97f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333612a67565b6000612f156133f0565b612f20600283613408565b5090919050565b6000816001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f6257600080fd5b505afa158015612f76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af39190614708565b6000808260c001518360a001518460800151612fb691906150c1565b612fc091906150c1565b90508260600151836040015182612fd791906150c1565b612fe191906150c1565b6020840151845191925090612ff690836150c1565b6130009190615249565b9392505050565b61300f6133f0565b6115fc600182613408565b60006130246133f0565b61302f600080613408565b50506101445490565b61013a5460408051636b69e05b60e01b815290516000926001600160a01b031691636b69e05b916004808301928692919082900301818387803b15801561307e57600080fd5b505af1158015613092573d6000803e3d6000fd5b5050610133546040516370a0823160e01b8152306004820152600093508392506001600160a01b03909116906370a082319060240160206040518083038186803b1580156130df57600080fd5b505afa1580156130f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613117919061497f565b905080156131645761013654610133546101325461012f54600093613154936001600160a01b039182169390821692908216911685808830613659565b90506131608184615102565b9250505b610139546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156131a957600080fd5b505afa1580156131bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131e1919061497f565b9050801561322e5761013654610139546101325461012f5460009361321e936001600160a01b039182169390821692908216911685808830613659565b905061322a8185615102565b9350505b50909392505050565b613241828261248b565b6115fc57613259816001600160a01b0316601461393e565b61326483602061393e565b604051602001613275929190614c88565b60408051601f198184030181529082905262461bcd60e51b8252610be391600401614e03565b6001600160a01b0381163b6133085760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610be3565b60008051602061545183398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61334083613ada565b60008251118061334d5750805b156115585761335c8383613b1a565b50505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600054610100900460ff166133ee5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610be3565b565b61013d546116dd906001600160a01b03166000613c0e565b6000806134136116e0565b905060006134446101415461014254670de0b6b3a7640000613435919061522a565b61343f919061511a565b612d80565b90506000613462613453613ce6565b61343f906402540be40061522a565b90506000600287600281111561347a5761347a615319565b14156134fb57600061348b85612f9a565b9050600061349b61343f89611e6f565b9050808212156134ed5760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f756768204e415620666f7220554e5354414b450000000000006044820152606401610be3565b6134f6816152e6565b925050505b60008073__$b81542ba4bbecae0b335024aea21ab4102$__63437559f96040518060a0016040528088815260200187815260200186815260200189815260200161013c548152506040518263ffffffff1660e01b815260040161355e9190614f55565b60006040518083038186803b15801561357657600080fd5b505af415801561358a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135b291908101906147cd565b915091506135bf82613dc5565b506135c86124b6565b604051632fe4a15f60e21b81523060048201526001600160a01b03919091169063bf92857c9060240160c06040518083038186803b15801561360957600080fd5b505afa15801561361d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136419190614b30565b610144555060009d9c50505050505050505050505050565b60405163095ea7b360e01b81526000906001600160a01b0389169063095ea7b39061368a908c908790600401614cfd565b602060405180830381600087803b1580156136a457600080fd5b505af11580156136b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136dc9190614944565b5060006136ee8a8a8a8a8a8a8a613ece565b9050806136ff576000915050613932565b60408051600280825260608201909252600091816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181613717579050509050898160008151811061375a5761375a61532f565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505088816000815181106137925761379261532f565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505086816000815181106137ca576137ca61532f565b6020026020010151604001901515908115158152505088816001815181106137f4576137f461532f565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050878160018151811061382c5761382c61532f565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505085816001815181106138645761386461532f565b602090810291909101015190151560409091015260006001600160a01b038c1663f41766d88783858961389942610258615102565b6040518663ffffffff1660e01b81526004016138b9959493929190614fc1565b600060405180830381600087803b1580156138d357600080fd5b505af11580156138e7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261390f91908101906148ac565b9050806002815181106139245761392461532f565b602002602001015193505050505b98975050505050505050565b6060600061394d83600261522a565b613958906002615102565b67ffffffffffffffff81111561397057613970615345565b6040519080825280601f01601f19166020018201604052801561399a576020820181803683370190505b509050600360fc1b816000815181106139b5576139b561532f565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106139e4576139e461532f565b60200101906001600160f81b031916908160001a9053506000613a0884600261522a565b613a13906001615102565b90505b6001811115613a8b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613a4757613a4761532f565b1a60f81b828281518110613a5d57613a5d61532f565b60200101906001600160f81b031916908160001a90535060049490941c93613a84816152b4565b9050613a16565b5083156130005760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610be3565b613ae38161329b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b613b825760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610be3565b600080846001600160a01b031684604051613b9d9190614c6c565b600060405180830381855af49150503d8060008114613bd8576040519150601f19603f3d011682016040523d82523d6000602084013e613bdd565b606091505b5091509150613c058282604051806060016040528060278152602001615471602791396140f9565b95945050505050565b6000826001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c4957600080fd5b505afa158015613c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c819190614708565b6040516328530a4760e01b815260ff841660048201529091506001600160a01b038216906328530a4790602401600060405180830381600087803b158015613cc857600080fd5b505af1158015613cdc573d6000803e3d6000fd5b5050505092915050565b600080600061013860009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015613d3a57600080fd5b505afa158015613d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d729190614abc565b506001600160701b031691506001600160701b031691506000613d9483611dcd565b90506000613da183611e6f565b905081613db2826305f5e10061522a565b613dbc919061511a565b94505050505090565b6000613e056040518060400160405280601981526020017f2d2d2d2d2d2d2d2d2d206578656375746520616374696f6e7300000000000000815250612cf8565b60005b8251811015613e9b57613e6781848381518110613e2757613e2761532f565b6020026020010151600001516009811115613e4457613e44615319565b858481518110613e5657613e5661532f565b602002602001015160200151614132565b613e89838281518110613e7c57613e7c61532f565b6020026020010151614180565b80613e93816152cb565b915050613e08565b50613ec6604051806040016040528060098152602001682d2d2d2d2d2d2d2d2d60b81b815250612cf8565b506000919050565b60408051600280825260608201909252600091829190816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181613ee95790505090508781600081518110613f2c57613f2c61532f565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508681600081518110613f6457613f6461532f565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508481600081518110613f9c57613f9c61532f565b602002602001015160400190151590811515815250508681600181518110613fc657613fc661532f565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508581600181518110613ffe57613ffe61532f565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505083816001815181106140365761403661532f565b6020908102919091010151901515604091820152516326207f2d60e21b81526000906001600160a01b038b1690639881fcb4906140799087908690600401614fa8565b60006040518083038186803b15801561409157600080fd5b505afa1580156140a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526140cd91908101906148ac565b9050806002815181106140e2576140e261532f565b602002602001015192505050979650505050505050565b60608315614108575081613000565b8251156141185782518084602001fd5b8160405162461bcd60e51b8152600401610be39190614e03565b6040516024810184905260448101839052606481018290526115589060840160408051601f198184030181529190526020810180516001600160e01b03166339e0829d60e21b179052613362565b60008151600981111561419557614195615319565b141561422b576141bc6040518060600160405280602881526020016153e660289139612cf8565b6020810151604051635e744b9560e11b815273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__9163bce8972a916141f8913091600401614cfd565b60006040518083038186803b15801561421057600080fd5b505af4158015614224573d6000803e3d6000fd5b5050505050565b60018151600981111561424057614240615319565b14156142f2576142676040518060600160405280602d81526020016153b9602d9139612cf8565b602081015160405163328a72d560e01b815273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__9163328a72d5916142a3913091600401614cfd565b604080518083038186803b1580156142ba57600080fd5b505af41580156142ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115589190614b0c565b60028151600981111561430757614307615319565b141561436a5761432e60405180606001604052806023815260200161542e60239139612cf8565b602081015160405163b84404c560e01b815273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__9163b84404c5916141f8913091600401614cfd565b60038151600981111561437f5761437f615319565b14156143e2576143a660405180606001604052806023815260200161554960239139612cf8565b602081015160405163d21c011960e01b815273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__9163d21c0119916141f8913091600401614cfd565b6004815160098111156143f7576143f7615319565b141561445a5761441e60405180606001604052806022815260200161539760229139612cf8565b60208101516040516306daf03560e11b815273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__91630db5e06a916141f8913091600401614cfd565b60058151600981111561446f5761446f615319565b14156144d05761449660405180606001604052806026815260200161537160269139612cf8565b6020810151604051620c940d60e41b815273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__9162c940d0916141f8913091600401614cfd565b6006815160098111156144e5576144e5615319565b14156145485761450c6040518060600160405280602681526020016154bb60269139612cf8565b60208101516040516308dc27fd60e41b815273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__91638dc27fd0916141f8913091600401614cfd565b60078151600981111561455d5761455d615319565b14156145c05761458460405180606001604052806023815260200161549860239139612cf8565b6020810151604051630780027b60e01b815273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__91630780027b916141f8913091600401614cfd565b6008815160098111156145d5576145d5615319565b141561464a576145fc60405180606001604052806022815260200161552760229139612cf8565b6020810151604080830151905163708597b360e11b81523060048201526024810192909252604482015273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__9063e10b2f66906064016141f8565b60098151600981111561465f5761465f615319565b14156116dd576146866040518060600160405280602281526020016154e160229139612cf8565b6020810151604080830151905163ac4a406d60e01b81523060048201526024810192909252604482015273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__9063ac4a406d906064016141f8565b80516001600160701b038116811461295457600080fd5b6000602082840312156146fd57600080fd5b81356130008161535b565b60006020828403121561471a57600080fd5b81516130008161535b565b6000806040838503121561473857600080fd5b82356147438161535b565b915060208381013567ffffffffffffffff8082111561476157600080fd5b818601915086601f83011261477557600080fd5b81358181111561478757614787615345565b614799601f8201601f1916850161506c565b915080825287848285010111156147af57600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060408084860312156147e157600080fd5b835167ffffffffffffffff8111156147f857600080fd5b8401601f8101861361480957600080fd5b8051602061481e6148198361509d565b61506c565b828152818101908483016060808602870185018c101561483d57600080fd5b600096505b858710156148985780828d03121561485957600080fd5b614861614ffd565b8251600a811061487057600080fd5b8152828601518682015288830151898201528452600196909601959284019290810190614842565b505097909101519698969750505050505050565b600060208083850312156148bf57600080fd5b825167ffffffffffffffff8111156148d657600080fd5b8301601f810185136148e757600080fd5b80516148f56148198261509d565b80828252848201915084840188868560051b870101111561491557600080fd5b600094505b8385101561493857805183526001949094019391850191850161491a565b50979650505050505050565b60006020828403121561495657600080fd5b8151801515811461300057600080fd5b60006020828403121561497857600080fd5b5035919050565b60006020828403121561499157600080fd5b5051919050565b600080604083850312156149ab57600080fd5b8235915060208301356149bd8161535b565b809150509250929050565b6000602082840312156149da57600080fd5b81356001600160e01b03198116811461300057600080fd5b6000818303610160811215614a0657600080fd5b614a0e615026565b83358152602084013560208201526040840135604082015260e0605f1983011215614a3857600080fd5b614a40615049565b9150606084013582526080840135602083015260a0840135604083015260c0840135606083015260e0840135608083015261010084013560a083015261012084013560c08301528160608201526101408401356080820152809250505092915050565b60006102208284031215614ab657600080fd5b50919050565b600080600060608486031215614ad157600080fd5b614ada846146d4565b9250614ae8602085016146d4565b9150604084015163ffffffff81168114614b0157600080fd5b809150509250925092565b60008060408385031215614b1f57600080fd5b505080516020909101519092909150565b60008060008060008060c08789031215614b4957600080fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b600060208284031215614b8c57600080fd5b815160ff8116811461300057600080fd5b600081518084526020808501945080840160005b83811015614bf157815180516001600160a01b03908116895284820151168489015260409081015115159088015260609096019590820190600101614bb1565b509495945050505050565b60008151808452614c14816020860160208601615288565b601f01601f19169290920160200192915050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c08301525050565b60008251614c7e818460208701615288565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614cc0816017850160208801615288565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614cf1816028840160208801615288565b01602801949350505050565b6001600160a01b03929092168252602082015260400190565b6040808252835182820181905260009190606090818501906020808901865b83811015614d62578151805186528381015184870152870151878601529385019390820190600101614d35565b505095909501959095525092949350505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015614df557603f19898403018552815160808151818652614dc382870182614bfc565b838b0151878c0152898401518a8801526060938401511515939096019290925250509386019390860190600101614d9d565b509098975050505050505050565b6020815260006130006020830184614bfc565b604081526000614e296040830185614bfc565b90508260208301529392505050565b60208082526017908201527f5265737472696374656420746f2045584348414e474552000000000000000000604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000610160820190508251825260208301516020830152604083015160408301526060830151614f886060840182614c28565b50608083015161014083015292915050565b60e08101610af38284614c28565b8281526040602082015260006129e26040830184614b9d565b85815284602082015260a060408201526000614fe060a0830186614b9d565b6001600160a01b0394909416606083015250608001529392505050565b6040516060810167ffffffffffffffff8111828210171561502057615020615345565b60405290565b60405160a0810167ffffffffffffffff8111828210171561502057615020615345565b60405160e0810167ffffffffffffffff8111828210171561502057615020615345565b604051601f8201601f1916810167ffffffffffffffff8111828210171561509557615095615345565b604052919050565b600067ffffffffffffffff8211156150b7576150b7615345565b5060051b60200190565b600080821280156001600160ff1b03849003851316156150e3576150e3615303565b600160ff1b83900384128116156150fc576150fc615303565b50500190565b6000821982111561511557615115615303565b500190565b60008261513757634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561517757816000190482111561515d5761515d615303565b8085161561516a57918102915b93841c9390800290615141565b509250929050565b600061300060ff84168360008261519857506001610af3565b816151a557506000610af3565b81600181146151bb57600281146151c5576151e1565b6001915050610af3565b60ff8411156151d6576151d6615303565b50506001821b610af3565b5060208310610133831016604e8410600b8410161715615204575081810a610af3565b61520e838361513c565b806000190482111561522257615222615303565b029392505050565b600081600019048311821515161561524457615244615303565b500290565b60008083128015600160ff1b85018412161561526757615267615303565b6001600160ff1b038401831381161561528257615282615303565b50500390565b60005b838110156152a357818101518382015260200161528b565b8381111561335c5750506000910152565b6000816152c3576152c3615303565b506000190190565b60006000198214156152df576152df615303565b5060010190565b6000600160ff1b8214156152fc576152fc615303565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146116dd57600080fdfe6578656375746520616374696f6e2057495448445241575f555344435f46524f4d5f414156456578656375746520616374696f6e20535550504c595f555344435f544f5f414156456578656375746520616374696f6e2052454d4f56455f4c49515549444954595f46524f4d5f445953544f5049416578656375746520616374696f6e204144445f4c49515549444954595f544f5f445953544f5049413eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2d6578656375746520616374696f6e20535741505f555344504c55535f544f5f55534443360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65646578656375746520616374696f6e2052455041595f574d415449435f544f5f414156456578656375746520616374696f6e20424f52524f575f574d415449435f46524f4d5f414156456578656375746520616374696f6e20535741505f555344435f544f5f574d415449432d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2063757272656e744c697175696469747928296578656375746520616374696f6e20535741505f574d415449435f544f5f555344436578656375746520616374696f6e20535741505f555344435f544f5f555344504c5553a2646970667358221220c6c9421965eccd76717fc1be10f572e8ea437508aa12c7af1cf78e76ff5bde7a64736f6c63430008060033",
  "deployedBytecode": "0x60806040526004361061038c5760003560e01c806379bc8b67116101dc578063cfab8eda11610102578063e8ced75c116100a0578063f72c0d8b1161006f578063f72c0d8b14610a37578063f933296314610a6b578063fb24974a14610a8b578063fb41be1614610aa157600080fd5b8063e8ced75c146109d3578063ef5cfb8c146109ea578063f52d4a6514610a0a578063f664b3d914610a2157600080fd5b8063da909b09116100dc578063da909b091461095a578063ddca95f31461097a578063e109e0341461099b578063e54bef75146109b257600080fd5b8063cfab8eda146108f8578063d2f7265a14610919578063d547741f1461093a57600080fd5b80639994e71b1161017a578063a694fc3a11610149578063a694fc3a14610873578063b69ef8a814610893578063bd0f1053146108a8578063cf13f249146108ca57600080fd5b80639994e71b14610813578063a03e4bc314610834578063a217fddf14610849578063a3673b381461085e57600080fd5b806383008bd9116101b657806383008bd91461079d5780638381e182146107b25780638b2ddd14146107d257806391d14854146107f357600080fd5b806379bc8b67146107465780637bb98a68146107665780638129fc1c1461078857600080fd5b80633e413bee116102c157806352d1902d1161025f57806365196e1e1161022e57806365196e1e146106cf57806369e4e005146106f057806371adbbd314610711578063799ef2241461073157600080fd5b806352d1902d146106625780635a01f33d146106775780635d85786d1461068d5780635fea9cbb146106ae57600080fd5b806346caf2ae1161029b57806346caf2ae146105ec5780634d12fca41461060e5780634f1ef2861461062e578063514e460a1461064157600080fd5b80633e413bee146105935780634031234c146105b4578063457482a0146105cb57600080fd5b80632a8b096f1161032e57806335faba331161030857806335faba331461050c57806336568abe146105335780633659cfe61461055357806338d52e0f1461057357600080fd5b80632a8b096f146104ad5780632f2ff15d146104c45780633583849a146104e457600080fd5b80631b1e7ddc1161036a5780631b1e7ddc1461042d5780631b74a9341461044457806322841f0114610466578063248a9ca31461047d57600080fd5b806301ffc9a714610391578063097cb6c1146103c657806310e4a7dd146103ff575b600080fd5b34801561039d57600080fd5b506103b16103ac3660046149c8565b610ac2565b60405190151581526020015b60405180910390f35b3480156103d257600080fd5b50610138546103e7906001600160a01b031681565b6040516001600160a01b0390911681526020016103bd565b34801561040b57600080fd5b5061041f61041a366004614966565b610af9565b6040519081526020016103bd565b34801561043957600080fd5b5061041f6101345481565b34801561045057600080fd5b5061046461045f366004614aa3565b610b99565b005b34801561047257600080fd5b5061041f6101425481565b34801561048957600080fd5b5061041f610498366004614966565b60009081526065602052604090206001015490565b3480156104b957600080fd5b5061041f6101445481565b3480156104d057600080fd5b506104646104df366004614998565b61155d565b3480156104f057600080fd5b506104f9600081565b60405161ffff90911681526020016103bd565b34801561051857600080fd5b50610521600081565b60405160ff90911681526020016103bd565b34801561053f57600080fd5b5061046461054e366004614998565b611582565b34801561055f57600080fd5b5061046461056e3660046146eb565b611600565b34801561057f57600080fd5b5060fb546103e7906001600160a01b031681565b34801561059f57600080fd5b50610130546103e7906001600160a01b031681565b3480156105c057600080fd5b5061041f6101415481565b3480156105d757600080fd5b50610137546103e7906001600160a01b031681565b3480156105f857600080fd5b506106016116e0565b6040516103bd9190614f9a565b34801561061a57600080fd5b5060fc546103e7906001600160a01b031681565b61046461063c366004614725565b611c4d565b34801561064d57600080fd5b5061012f546103e7906001600160a01b031681565b34801561066e57600080fd5b5061041f611d1a565b34801561068357600080fd5b506101445461041f565b34801561069957600080fd5b50610136546103e7906001600160a01b031681565b3480156106ba57600080fd5b5061013e546103e7906001600160a01b031681565b3480156106db57600080fd5b50610131546103e7906001600160a01b031681565b3480156106fc57600080fd5b5061013d546103e7906001600160a01b031681565b34801561071d57600080fd5b5061041f61072c366004614966565b611dcd565b34801561073d57600080fd5b5061041f606481565b34801561075257600080fd5b5061041f610761366004614966565b611e6f565b34801561077257600080fd5b5061077b611eca565b6040516103bd9190614d76565b34801561079457600080fd5b50610464612258565b3480156107a957600080fd5b5061041f600281565b3480156107be57600080fd5b5061041f6107cd366004614998565b612321565b3480156107de57600080fd5b5061013b546103e7906001600160a01b031681565b3480156107ff57600080fd5b506103b161080e366004614998565b61248b565b34801561081f57600080fd5b50610133546103e7906001600160a01b031681565b34801561084057600080fd5b506103e76124b6565b34801561085557600080fd5b5061041f600081565b34801561086a57600080fd5b5061041f6124d4565b34801561087f57600080fd5b5061046461088e366004614966565b612501565b34801561089f57600080fd5b506104646125ea565b3480156108b457600080fd5b5061041f60008051602061540e83398151915281565b3480156108d657600080fd5b506108ea6108e53660046149f2565b6125f2565b6040516103bd929190614d16565b34801561090457600080fd5b5061013a546103e7906001600160a01b031681565b34801561092557600080fd5b5061012e546103e7906001600160a01b031681565b34801561094657600080fd5b50610464610955366004614998565b6127b2565b34801561096657600080fd5b506104646109753660046146eb565b6127d7565b34801561098657600080fd5b5061013f546103e7906001600160a01b031681565b3480156109a757600080fd5b5061041f6101355481565b3480156109be57600080fd5b50610139546103e7906001600160a01b031681565b3480156109df57600080fd5b5061041f6101405481565b3480156109f657600080fd5b5061041f610a053660046146eb565b6128d5565b348015610a1657600080fd5b5061041f6101435481565b348015610a2d57600080fd5b5061041f61019081565b348015610a4357600080fd5b5061041f7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e381565b348015610a7757600080fd5b5061041f610a86366004614966565b612959565b348015610a9757600080fd5b5061041f60001981565b348015610aad57600080fd5b50610132546103e7906001600160a01b031681565b60006001600160e01b03198216637965db0b60e01b1480610af357506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610af3610b0983606461522a565b6101345461013e60009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5c57600080fd5b505afa158015610b70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b94919061497f565b6129cb565b610ba460003361248b565b610bec5760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b60448201526064015b60405180910390fd5b6000610bfb60208301836146eb565b6001600160a01b03161415610c4d5760405162461bcd60e51b815260206004820152601860248201527716915493d7d05111149154d4c81b9bdd08185b1b1bddd95960421b6044820152606401610be3565b6000610c5f60608301604084016146eb565b6001600160a01b03161415610cb15760405162461bcd60e51b815260206004820152601860248201527716915493d7d05111149154d4c81b9bdd08185b1b1bddd95960421b6044820152606401610be3565b610cbe60208201826146eb565b61013080546001600160a01b0319166001600160a01b0392909216919091179055610cef60408201602083016146eb565b61013180546001600160a01b0319166001600160a01b0392909216919091179055610d2060608201604083016146eb565b61013280546001600160a01b0319166001600160a01b0392909216919091179055610d4e60208201826146eb565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8657600080fd5b505afa158015610d9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbe9190614b7a565b610dc990600a61517f565b61013455610ddd60608201604083016146eb565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610e1557600080fd5b505afa158015610e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4d9190614b7a565b610e5890600a61517f565b61013555610e6c60808201606083016146eb565b61012f80546001600160a01b0319166001600160a01b0392909216919091179055610ea5610ea060808301606084016146eb565b6129ea565b610eb560a08201608083016146eb565b61013980546001600160a01b0319166001600160a01b0392909216919091179055610ee660c0820160a083016146eb565b61013380546001600160a01b0319166001600160a01b0392909216919091179055610f18610100820160e083016146eb565b61013780546001600160a01b0319166001600160a01b0392909216919091179055610f4b610120820161010083016146eb565b61013880546001600160a01b0319166001600160a01b0392909216919091179055610f7e610140820161012083016146eb565b61013680546001600160a01b0319166001600160a01b0392909216919091179055610fb1610160820161014083016146eb565b61013a80546001600160a01b0319166001600160a01b0392909216919091179055610fe4610180820161016083016146eb565b61013b80546001600160a01b0319166001600160a01b039290921691909117905561101560e0820160c083016146eb565b61012e80546001600160a01b0319166001600160a01b039290921691909117905561018081013561013c556110526101c082016101a083016146eb565b61013d80546001600160a01b0319166001600160a01b0392909216918217905560408051631f94a27560e31b815290516000929163fca513a8916004808301926020929190829003018186803b1580156110ab57600080fd5b505afa1580156110bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e39190614708565b90506001600160a01b0381166392bf2be061110160208501856146eb565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561114057600080fd5b505afa158015611154573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111789190614708565b61013e80546001600160a01b0319166001600160a01b0392831617905581166392bf2be06111ac60608501604086016146eb565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b1580156111eb57600080fd5b505afa1580156111ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112239190614708565b61013f80546001600160a01b0319166001600160a01b039290921691909117905561125a6101c083013566038d7ea4c6800061522a565b610141556112746101e083013566038d7ea4c6800061522a565b6101425560006101445561129461020083013566038d7ea4c6800061522a565b6101435561012f546101365460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926112d29291169060001990600401614cfd565b602060405180830381600087803b1580156112ec57600080fd5b505af1158015611300573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113249190614944565b50610132546101365460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261135f9291169060001990600401614cfd565b602060405180830381600087803b15801561137957600080fd5b505af115801561138d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b19190614944565b50610138546101365460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926113ec9291169060001990600401614cfd565b602060405180830381600087803b15801561140657600080fd5b505af115801561141a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143e9190614944565b5061012f5461012e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926114799291169060001990600401614cfd565b602060405180830381600087803b15801561149357600080fd5b505af11580156114a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cb9190614944565b506101305461012e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926115069291169060001990600401614cfd565b602060405180830381600087803b15801561152057600080fd5b505af1158015611534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115589190614944565b505050565b60008281526065602052604090206001015461157881612a5d565b6115588383612a67565b6001600160a01b03811633146115f25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610be3565b6115fc8282612aed565b5050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156116495760405162461bcd60e51b8152600401610be390614e6f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611692600080516020615451833981519152546001600160a01b031690565b6001600160a01b0316146116b85760405162461bcd60e51b8152600401610be390614ebb565b6116c181612b54565b604080516000808252602082019092526116dd91839190612b7e565b50565b6117206040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051635a982ebb60e11b8152306004820152600090819073__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__9063b5305d7690602401604080518083038186803b15801561176e57600080fd5b505af4158015611782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a69190614b0c565b9150915060006117b583611dcd565b905060006117c283611e6f565b90506000806117cf6124b6565b604051632fe4a15f60e21b81523060048201526001600160a01b03919091169063bf92857c9060240160c06040518083038186803b15801561181057600080fd5b505afa158015611824573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118489190614b30565b505050509150915060648261185d919061511a565b915061186a60648261511a565b61012f546040516370a0823160e01b81523060048201529192506000916118ef916001600160a01b0316906370a08231906024015b60206040518083038186803b1580156118b757600080fd5b505afa1580156118cb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610761919061497f565b610130546040516370a0823160e01b8152306004820152919250600091611928916001600160a01b0316906370a082319060240161189f565b610132546040516370a0823160e01b81523060048201529192506000916119ac916001600160a01b0316906370a082319060240160206040518083038186803b15801561197457600080fd5b505afa158015611988573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072c919061497f565b90506119cf60405180606001604052806024815260200161550360249139612cf8565b611a036040518060400160405280601281526020017103837b7b62bb6b0ba34b190101010101010160751b8152508a612d3b565b611a376040518060400160405280601281526020017103837b7b62bb6b0ba34b1aab9b210101010160751b81525088612d3b565b611a6b6040518060400160405280601281526020017103837b7b62ab9b228363ab9901010101010160751b81525089612d3b565b611a9f6040518060400160405280601281526020017103837b7b62ab9b228363ab9aab9b2101010160751b81525087612d3b565b611ad360405180604001604052806012815260200171030b0bb32a1b7b63630ba32b930b62ab9b2160751b81525086612d3b565b611b0760405180604001604052806012815260200171030b0bb32a137b93937bbaab9b210101010160751b81525085612d3b565b611b3b6040518060400160405280601281526020017103bb6b0ba34b1a130b630b731b2aab9b210160751b81525082612d3b565b611b6f6040518060400160405280601281526020017103ab9b228363ab9a130b630b731b2aab9b2160751b81525084612d3b565b611ba36040518060400160405280601281526020017103ab9b231a130b630b731b2aab9b2101010160751b81525083612d3b565b611bd5604051806040016040528060118152602001702d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d60781b815250612cf8565b6040518060e00160405280611be987612d80565b8152602001611bf786612d80565b8152602001611c0589612d80565b8152602001611c1388612d80565b8152602001611c2185612d80565b8152602001611c2f84612d80565b8152602001611c3d83612d80565b90529a9950505050505050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415611c965760405162461bcd60e51b8152600401610be390614e6f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cdf600080516020615451833981519152546001600160a01b031690565b6001600160a01b031614611d055760405162461bcd60e51b8152600401610be390614ebb565b611d0e82612b54565b6115fc82826001612b7e565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611dba5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610be3565b5060008051602061545183398151915290565b60006064611e65836101355461013f60009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e2857600080fd5b505afa158015611e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e60919061497f565b612dee565b610af3919061511a565b60006064611e65836101345461013e60009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e2857600080fd5b60606000611ed66116e0565b604080516007808252610100820190925291925060009190816020015b611f2060405180608001604052806060815260200160008152602001600081526020016000151581525090565b815260200190600190039081611ef357905050905060405180608001604052806040518060400160405280600c81526020016b626f72726f77576d6174696360a01b8152508152602001611f778460200151612dfb565b8152602001600081526020016001151581525081600081518110611f9d57611f9d61532f565b602002602001018190525060405180608001604052806040518060400160405280600e81526020016d636f6c6c61746572616c5573646360901b8152508152602001611fec8460000151612dfb565b81526020016000815260200160001515815250816001815181106120125761201261532f565b602002602001018190525060405180608001604052806040518060400160405280600a815260200169706f6f6c576d6174696360b01b815250815260200161205d8460400151612dfb565b81526020016000815260200160001515815250816002815181106120835761208361532f565b602002602001018190525060405180608001604052806040518060400160405280600b81526020016a706f6f6c557364506c757360a81b81525081526020016120cf8460600151612dfb565b81526020016000815260200160001515815250816003815181106120f5576120f561532f565b602002602001018190525060405180608001604052806040518060400160405280600b81526020016a66726565557364506c757360a81b81525081526020016121418460800151612dfb565b81526020016000815260200160001515815250816004815181106121675761216761532f565b6020026020010181905250604051806080016040528060405180604001604052806008815260200167667265655573646360c01b81525081526020016121b08460a00151612dfb565b81526020016000815260200160001515815250816005815181106121d6576121d661532f565b602002602001018190525060405180608001604052806040518060400160405280600a81526020016966726565576d6174696360b01b81525081526020016122218460c00151612dfb565b81526020016000815260200160001515815250816006815181106122475761224761532f565b602090810291909101015292915050565b600054610100900460ff16158080156122785750600054600160ff909116105b806122925750303b158015612292575060005460ff166001145b6122ae5760405162461bcd60e51b8152600401610be390614f07565b6000805460ff1916600117905580156122d1576000805461ff0019166101001790555b6122d9612e4d565b80156116dd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b600061233b60008051602061540e8339815191523361248b565b6123575760405162461bcd60e51b8152600401610be390614e38565b600061236284612f0b565b9050838110156123c65760405162461bcd60e51b815260206004820152602960248201527f52657475726e65642076616c7565206c657373207468616e2072657175657374604482015268195908185b5bdd5b9d60ba1b6064820152608401610be3565b60fb5460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906123f89086908590600401614cfd565b602060405180830381600087803b15801561241257600080fd5b505af1158015612426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244a9190614944565b5060408051858152602081018390527f9045c2ac9b2026de8075f2701bbdde882cd5e830b3b1ead9a15b22f2b5b93742910160405180910390a19392505050565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61013d546000906124cf906001600160a01b0316612f27565b905090565b6000806124df6116e0565b905060006124ec82612f9a565b90506124fa61041a82612dfb565b9250505090565b61251960008051602061540e8339815191523361248b565b6125355760405162461bcd60e51b8152600401610be390614e38565b6040518181527f227a473b70d2f893cc7659219575c030a63b5743024fe1e0c1a680e708b1525a9060200160405180910390a160fb546040516370a0823160e01b81523060048201526116dd916001600160a01b0316906370a082319060240160206040518083038186803b1580156125ad57600080fd5b505afa1580156125c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e5919061497f565b613007565b6116dd61301a565b6060600080600073__$b81542ba4bbecae0b335024aea21ab4102$__63437559f9866040518263ffffffff1660e01b81526004016126309190614f55565b60006040518083038186803b15801561264857600080fd5b505af415801561265c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261268491908101906147cd565b915091506000825167ffffffffffffffff8111156126a4576126a4615345565b6040519080825280602002602001820160405280156126f957816020015b6126e660405180606001604052806000815260200160008152602001600081525090565b8152602001906001900390816126c25790505b50905060005b83518110156127a75783818151811061271a5761271a61532f565b6020026020010151602001518282815181106127385761273861532f565b6020026020010151602001818152505083818151811061275a5761275a61532f565b602002602001015160000151600981111561277757612777615319565b8282815181106127895761278961532f565b6020908102919091010151528061279f816152cb565b9150506126ff565b509590945092505050565b6000828152606560205260409020600101546127cd81612a5d565b6115588383612aed565b6127e260003361248b565b6128255760405162461bcd60e51b81526020600482015260146024820152735265737472696374656420746f2061646d696e7360601b6044820152606401610be3565b6001600160a01b0381166128765760405162461bcd60e51b815260206004820152601860248201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b6044820152606401610be3565b60fc5461289b9060008051602061540e833981519152906001600160a01b03166127b2565b6128b360008051602061540e8339815191528261155d565b60fc80546001600160a01b0319166001600160a01b0392909216919091179055565b60006128ef60008051602061540e8339815191523361248b565b61290b5760405162461bcd60e51b8152600401610be390614e38565b600061291683613038565b90507f3ac0594a85a20354f9dc74f33728416d19ce00d04a406c108cc2dcf2cecea1348160405161294991815260200190565b60405180910390a190505b919050565b6000610af361296983606461522a565b6101355461013f60009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b5c57600080fd5b6001600160a01b03163b151590565b6000816129d8848661522a565b6129e2919061511a565b949350505050565b6001600160a01b038116612a3b5760405162461bcd60e51b815260206004820152601860248201527716995c9bc81859191c995cdcc81b9bdd08185b1b1bddd95960421b6044820152606401610be3565b60fb80546001600160a01b0319166001600160a01b0392909216919091179055565b6116dd8133613237565b612a71828261248b565b6115fc5760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612aa93390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b612af7828261248b565b156115fc5760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e36115fc81612a5d565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615612bb1576115588361329b565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015612bea57600080fd5b505afa925050508015612c1a575060408051601f3d908101601f19168201909252612c179181019061497f565b60015b612c7d5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610be3565b6000805160206154518339815191528114612cec5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610be3565b50611558838383613337565b6116dd81604051602401612d0c9190614e03565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052613362565b6115fc8282604051602401612d51929190614e16565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052613362565b60006001600160ff1b03821115612dea5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608401610be3565b5090565b6000826129d8838661522a565b600080821215612dea5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610be3565b600054610100900460ff1615808015612e6d5750600054600160ff909116105b80612e875750303b158015612e87575060005460ff166001145b612ea35760405162461bcd60e51b8152600401610be390614f07565b6000805460ff191660011790558015612ec6576000805461ff0019166101001790555b612ece613383565b612ed6613383565b612ee1600033612a67565b6122d97f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e333612a67565b6000612f156133f0565b612f20600283613408565b5090919050565b6000816001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612f6257600080fd5b505afa158015612f76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af39190614708565b6000808260c001518360a001518460800151612fb691906150c1565b612fc091906150c1565b90508260600151836040015182612fd791906150c1565b612fe191906150c1565b6020840151845191925090612ff690836150c1565b6130009190615249565b9392505050565b61300f6133f0565b6115fc600182613408565b60006130246133f0565b61302f600080613408565b50506101445490565b61013a5460408051636b69e05b60e01b815290516000926001600160a01b031691636b69e05b916004808301928692919082900301818387803b15801561307e57600080fd5b505af1158015613092573d6000803e3d6000fd5b5050610133546040516370a0823160e01b8152306004820152600093508392506001600160a01b03909116906370a082319060240160206040518083038186803b1580156130df57600080fd5b505afa1580156130f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613117919061497f565b905080156131645761013654610133546101325461012f54600093613154936001600160a01b039182169390821692908216911685808830613659565b90506131608184615102565b9250505b610139546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156131a957600080fd5b505afa1580156131bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131e1919061497f565b9050801561322e5761013654610139546101325461012f5460009361321e936001600160a01b039182169390821692908216911685808830613659565b905061322a8185615102565b9350505b50909392505050565b613241828261248b565b6115fc57613259816001600160a01b0316601461393e565b61326483602061393e565b604051602001613275929190614c88565b60408051601f198184030181529082905262461bcd60e51b8252610be391600401614e03565b6001600160a01b0381163b6133085760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610be3565b60008051602061545183398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61334083613ada565b60008251118061334d5750805b156115585761335c8383613b1a565b50505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600054610100900460ff166133ee5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610be3565b565b61013d546116dd906001600160a01b03166000613c0e565b6000806134136116e0565b905060006134446101415461014254670de0b6b3a7640000613435919061522a565b61343f919061511a565b612d80565b90506000613462613453613ce6565b61343f906402540be40061522a565b90506000600287600281111561347a5761347a615319565b14156134fb57600061348b85612f9a565b9050600061349b61343f89611e6f565b9050808212156134ed5760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f756768204e415620666f7220554e5354414b450000000000006044820152606401610be3565b6134f6816152e6565b925050505b60008073__$b81542ba4bbecae0b335024aea21ab4102$__63437559f96040518060a0016040528088815260200187815260200186815260200189815260200161013c548152506040518263ffffffff1660e01b815260040161355e9190614f55565b60006040518083038186803b15801561357657600080fd5b505af415801561358a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135b291908101906147cd565b915091506135bf82613dc5565b506135c86124b6565b604051632fe4a15f60e21b81523060048201526001600160a01b03919091169063bf92857c9060240160c06040518083038186803b15801561360957600080fd5b505afa15801561361d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136419190614b30565b610144555060009d9c50505050505050505050505050565b60405163095ea7b360e01b81526000906001600160a01b0389169063095ea7b39061368a908c908790600401614cfd565b602060405180830381600087803b1580156136a457600080fd5b505af11580156136b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136dc9190614944565b5060006136ee8a8a8a8a8a8a8a613ece565b9050806136ff576000915050613932565b60408051600280825260608201909252600091816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181613717579050509050898160008151811061375a5761375a61532f565b6020026020010151600001906001600160a01b031690816001600160a01b03168152505088816000815181106137925761379261532f565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505086816000815181106137ca576137ca61532f565b6020026020010151604001901515908115158152505088816001815181106137f4576137f461532f565b6020026020010151600001906001600160a01b031690816001600160a01b031681525050878160018151811061382c5761382c61532f565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505085816001815181106138645761386461532f565b602090810291909101015190151560409091015260006001600160a01b038c1663f41766d88783858961389942610258615102565b6040518663ffffffff1660e01b81526004016138b9959493929190614fc1565b600060405180830381600087803b1580156138d357600080fd5b505af11580156138e7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261390f91908101906148ac565b9050806002815181106139245761392461532f565b602002602001015193505050505b98975050505050505050565b6060600061394d83600261522a565b613958906002615102565b67ffffffffffffffff81111561397057613970615345565b6040519080825280601f01601f19166020018201604052801561399a576020820181803683370190505b509050600360fc1b816000815181106139b5576139b561532f565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106139e4576139e461532f565b60200101906001600160f81b031916908160001a9053506000613a0884600261522a565b613a13906001615102565b90505b6001811115613a8b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613a4757613a4761532f565b1a60f81b828281518110613a5d57613a5d61532f565b60200101906001600160f81b031916908160001a90535060049490941c93613a84816152b4565b9050613a16565b5083156130005760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610be3565b613ae38161329b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b613b825760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610be3565b600080846001600160a01b031684604051613b9d9190614c6c565b600060405180830381855af49150503d8060008114613bd8576040519150601f19603f3d011682016040523d82523d6000602084013e613bdd565b606091505b5091509150613c058282604051806060016040528060278152602001615471602791396140f9565b95945050505050565b6000826001600160a01b031663026b1d5f6040518163ffffffff1660e01b815260040160206040518083038186803b158015613c4957600080fd5b505afa158015613c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c819190614708565b6040516328530a4760e01b815260ff841660048201529091506001600160a01b038216906328530a4790602401600060405180830381600087803b158015613cc857600080fd5b505af1158015613cdc573d6000803e3d6000fd5b5050505092915050565b600080600061013860009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015613d3a57600080fd5b505afa158015613d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d729190614abc565b506001600160701b031691506001600160701b031691506000613d9483611dcd565b90506000613da183611e6f565b905081613db2826305f5e10061522a565b613dbc919061511a565b94505050505090565b6000613e056040518060400160405280601981526020017f2d2d2d2d2d2d2d2d2d206578656375746520616374696f6e7300000000000000815250612cf8565b60005b8251811015613e9b57613e6781848381518110613e2757613e2761532f565b6020026020010151600001516009811115613e4457613e44615319565b858481518110613e5657613e5661532f565b602002602001015160200151614132565b613e89838281518110613e7c57613e7c61532f565b6020026020010151614180565b80613e93816152cb565b915050613e08565b50613ec6604051806040016040528060098152602001682d2d2d2d2d2d2d2d2d60b81b815250612cf8565b506000919050565b60408051600280825260608201909252600091829190816020015b6040805160608101825260008082526020808301829052928201528252600019909201910181613ee95790505090508781600081518110613f2c57613f2c61532f565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508681600081518110613f6457613f6461532f565b6020026020010151602001906001600160a01b031690816001600160a01b0316815250508481600081518110613f9c57613f9c61532f565b602002602001015160400190151590811515815250508681600181518110613fc657613fc661532f565b6020026020010151600001906001600160a01b031690816001600160a01b0316815250508581600181518110613ffe57613ffe61532f565b6020026020010151602001906001600160a01b031690816001600160a01b03168152505083816001815181106140365761403661532f565b6020908102919091010151901515604091820152516326207f2d60e21b81526000906001600160a01b038b1690639881fcb4906140799087908690600401614fa8565b60006040518083038186803b15801561409157600080fd5b505afa1580156140a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526140cd91908101906148ac565b9050806002815181106140e2576140e261532f565b602002602001015192505050979650505050505050565b60608315614108575081613000565b8251156141185782518084602001fd5b8160405162461bcd60e51b8152600401610be39190614e03565b6040516024810184905260448101839052606481018290526115589060840160408051601f198184030181529190526020810180516001600160e01b03166339e0829d60e21b179052613362565b60008151600981111561419557614195615319565b141561422b576141bc6040518060600160405280602881526020016153e660289139612cf8565b6020810151604051635e744b9560e11b815273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__9163bce8972a916141f8913091600401614cfd565b60006040518083038186803b15801561421057600080fd5b505af4158015614224573d6000803e3d6000fd5b5050505050565b60018151600981111561424057614240615319565b14156142f2576142676040518060600160405280602d81526020016153b9602d9139612cf8565b602081015160405163328a72d560e01b815273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__9163328a72d5916142a3913091600401614cfd565b604080518083038186803b1580156142ba57600080fd5b505af41580156142ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115589190614b0c565b60028151600981111561430757614307615319565b141561436a5761432e60405180606001604052806023815260200161542e60239139612cf8565b602081015160405163b84404c560e01b815273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__9163b84404c5916141f8913091600401614cfd565b60038151600981111561437f5761437f615319565b14156143e2576143a660405180606001604052806023815260200161554960239139612cf8565b602081015160405163d21c011960e01b815273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__9163d21c0119916141f8913091600401614cfd565b6004815160098111156143f7576143f7615319565b141561445a5761441e60405180606001604052806022815260200161539760229139612cf8565b60208101516040516306daf03560e11b815273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__91630db5e06a916141f8913091600401614cfd565b60058151600981111561446f5761446f615319565b14156144d05761449660405180606001604052806026815260200161537160269139612cf8565b6020810151604051620c940d60e41b815273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__9162c940d0916141f8913091600401614cfd565b6006815160098111156144e5576144e5615319565b14156145485761450c6040518060600160405280602681526020016154bb60269139612cf8565b60208101516040516308dc27fd60e41b815273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__91638dc27fd0916141f8913091600401614cfd565b60078151600981111561455d5761455d615319565b14156145c05761458460405180606001604052806023815260200161549860239139612cf8565b6020810151604051630780027b60e01b815273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__91630780027b916141f8913091600401614cfd565b6008815160098111156145d5576145d5615319565b141561464a576145fc60405180606001604052806022815260200161552760229139612cf8565b6020810151604080830151905163708597b360e11b81523060048201526024810192909252604482015273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__9063e10b2f66906064016141f8565b60098151600981111561465f5761465f615319565b14156116dd576146866040518060600160405280602281526020016154e160229139612cf8565b6020810151604080830151905163ac4a406d60e01b81523060048201526024810192909252604482015273__$ee2b65a89f5477f4cf8b3b0e3f2f09962c$__9063ac4a406d906064016141f8565b80516001600160701b038116811461295457600080fd5b6000602082840312156146fd57600080fd5b81356130008161535b565b60006020828403121561471a57600080fd5b81516130008161535b565b6000806040838503121561473857600080fd5b82356147438161535b565b915060208381013567ffffffffffffffff8082111561476157600080fd5b818601915086601f83011261477557600080fd5b81358181111561478757614787615345565b614799601f8201601f1916850161506c565b915080825287848285010111156147af57600080fd5b80848401858401376000848284010152508093505050509250929050565b60008060408084860312156147e157600080fd5b835167ffffffffffffffff8111156147f857600080fd5b8401601f8101861361480957600080fd5b8051602061481e6148198361509d565b61506c565b828152818101908483016060808602870185018c101561483d57600080fd5b600096505b858710156148985780828d03121561485957600080fd5b614861614ffd565b8251600a811061487057600080fd5b8152828601518682015288830151898201528452600196909601959284019290810190614842565b505097909101519698969750505050505050565b600060208083850312156148bf57600080fd5b825167ffffffffffffffff8111156148d657600080fd5b8301601f810185136148e757600080fd5b80516148f56148198261509d565b80828252848201915084840188868560051b870101111561491557600080fd5b600094505b8385101561493857805183526001949094019391850191850161491a565b50979650505050505050565b60006020828403121561495657600080fd5b8151801515811461300057600080fd5b60006020828403121561497857600080fd5b5035919050565b60006020828403121561499157600080fd5b5051919050565b600080604083850312156149ab57600080fd5b8235915060208301356149bd8161535b565b809150509250929050565b6000602082840312156149da57600080fd5b81356001600160e01b03198116811461300057600080fd5b6000818303610160811215614a0657600080fd5b614a0e615026565b83358152602084013560208201526040840135604082015260e0605f1983011215614a3857600080fd5b614a40615049565b9150606084013582526080840135602083015260a0840135604083015260c0840135606083015260e0840135608083015261010084013560a083015261012084013560c08301528160608201526101408401356080820152809250505092915050565b60006102208284031215614ab657600080fd5b50919050565b600080600060608486031215614ad157600080fd5b614ada846146d4565b9250614ae8602085016146d4565b9150604084015163ffffffff81168114614b0157600080fd5b809150509250925092565b60008060408385031215614b1f57600080fd5b505080516020909101519092909150565b60008060008060008060c08789031215614b4957600080fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b600060208284031215614b8c57600080fd5b815160ff8116811461300057600080fd5b600081518084526020808501945080840160005b83811015614bf157815180516001600160a01b03908116895284820151168489015260409081015115159088015260609096019590820190600101614bb1565b509495945050505050565b60008151808452614c14816020860160208601615288565b601f01601f19169290920160200192915050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c08301525050565b60008251614c7e818460208701615288565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614cc0816017850160208801615288565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614cf1816028840160208801615288565b01602801949350505050565b6001600160a01b03929092168252602082015260400190565b6040808252835182820181905260009190606090818501906020808901865b83811015614d62578151805186528381015184870152870151878601529385019390820190600101614d35565b505095909501959095525092949350505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015614df557603f19898403018552815160808151818652614dc382870182614bfc565b838b0151878c0152898401518a8801526060938401511515939096019290925250509386019390860190600101614d9d565b509098975050505050505050565b6020815260006130006020830184614bfc565b604081526000614e296040830185614bfc565b90508260208301529392505050565b60208082526017908201527f5265737472696374656420746f2045584348414e474552000000000000000000604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000610160820190508251825260208301516020830152604083015160408301526060830151614f886060840182614c28565b50608083015161014083015292915050565b60e08101610af38284614c28565b8281526040602082015260006129e26040830184614b9d565b85815284602082015260a060408201526000614fe060a0830186614b9d565b6001600160a01b0394909416606083015250608001529392505050565b6040516060810167ffffffffffffffff8111828210171561502057615020615345565b60405290565b60405160a0810167ffffffffffffffff8111828210171561502057615020615345565b60405160e0810167ffffffffffffffff8111828210171561502057615020615345565b604051601f8201601f1916810167ffffffffffffffff8111828210171561509557615095615345565b604052919050565b600067ffffffffffffffff8211156150b7576150b7615345565b5060051b60200190565b600080821280156001600160ff1b03849003851316156150e3576150e3615303565b600160ff1b83900384128116156150fc576150fc615303565b50500190565b6000821982111561511557615115615303565b500190565b60008261513757634e487b7160e01b600052601260045260246000fd5b500490565b600181815b8085111561517757816000190482111561515d5761515d615303565b8085161561516a57918102915b93841c9390800290615141565b509250929050565b600061300060ff84168360008261519857506001610af3565b816151a557506000610af3565b81600181146151bb57600281146151c5576151e1565b6001915050610af3565b60ff8411156151d6576151d6615303565b50506001821b610af3565b5060208310610133831016604e8410600b8410161715615204575081810a610af3565b61520e838361513c565b806000190482111561522257615222615303565b029392505050565b600081600019048311821515161561524457615244615303565b500290565b60008083128015600160ff1b85018412161561526757615267615303565b6001600160ff1b038401831381161561528257615282615303565b50500390565b60005b838110156152a357818101518382015260200161528b565b8381111561335c5750506000910152565b6000816152c3576152c3615303565b506000190190565b60006000198214156152df576152df615303565b5060010190565b6000600160ff1b8214156152fc576152fc615303565b5060000390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146116dd57600080fdfe6578656375746520616374696f6e2057495448445241575f555344435f46524f4d5f414156456578656375746520616374696f6e20535550504c595f555344435f544f5f414156456578656375746520616374696f6e2052454d4f56455f4c49515549444954595f46524f4d5f445953544f5049416578656375746520616374696f6e204144445f4c49515549444954595f544f5f445953544f5049413eb675f159e6ca6cf5de6bfbbc8c4521cfd428f5e9166e51094d5898504caf2d6578656375746520616374696f6e20535741505f555344504c55535f544f5f55534443360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65646578656375746520616374696f6e2052455041595f574d415449435f544f5f414156456578656375746520616374696f6e20424f52524f575f574d415449435f46524f4d5f414156456578656375746520616374696f6e20535741505f555344435f544f5f574d415449432d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2063757272656e744c697175696469747928296578656375746520616374696f6e20535741505f574d415449435f544f5f555344436578656375746520616374696f6e20535741505f555344435f544f5f555344504c5553a2646970667358221220c6c9421965eccd76717fc1be10f572e8ea437508aa12c7af1cf78e76ff5bde7a64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "netAssetValue()": {
        "returns": {
          "_0": "NAV in USDC"
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "usdToUsdc(uint256)": {
        "params": {
          "liquidity": "USD liquidity in e6"
        }
      },
      "usdToWmatic(uint256)": {
        "params": {
          "liquidity": "USD liquidity in e6"
        }
      },
      "usdcToUsd(uint256)": {
        "params": {
          "amount": "USDC tokens amount"
        }
      },
      "wmaticToUsd(uint256)": {
        "params": {
          "amount": "WMATIC tokens amount"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "currentLiquidity()": {
        "notice": "Get current liquidity in USD e6"
      },
      "netAssetValue()": {
        "notice": "NAV = sum of all tokens liquidity minus borrows."
      },
      "usdToUsdc(uint256)": {
        "notice": "Get USDC equivalent from USD liquidity"
      },
      "usdToWmatic(uint256)": {
        "notice": "Get WMATIC equivalent from USD liquidity"
      },
      "usdcToUsd(uint256)": {
        "notice": "Get USD equivalent in e6"
      },
      "wmaticToUsd(uint256)": {
        "notice": "Get USD equivalent in e6"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 808,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 811,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2213,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2543,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 790,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1087,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12958,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "asset",
        "offset": 0,
        "slot": "251",
        "type": "t_contract(IERC20)2634"
      },
      {
        "astId": 12960,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "exchanger",
        "offset": 0,
        "slot": "252",
        "type": "t_address"
      },
      {
        "astId": 13212,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7930,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "exchange",
        "offset": 0,
        "slot": "302",
        "type": "t_contract(IExchange)13493"
      },
      {
        "astId": 7933,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "usdPlus",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IERC20)2634"
      },
      {
        "astId": 7936,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "usdc",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IERC20)2634"
      },
      {
        "astId": 7939,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "aUsdc",
        "offset": 0,
        "slot": "305",
        "type": "t_contract(IERC20)2634"
      },
      {
        "astId": 7942,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "wmatic",
        "offset": 0,
        "slot": "306",
        "type": "t_contract(IERC20)2634"
      },
      {
        "astId": 7945,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "dyst",
        "offset": 0,
        "slot": "307",
        "type": "t_contract(IERC20)2634"
      },
      {
        "astId": 7947,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "usdcDm",
        "offset": 0,
        "slot": "308",
        "type": "t_uint256"
      },
      {
        "astId": 7949,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "wmaticDm",
        "offset": 0,
        "slot": "309",
        "type": "t_uint256"
      },
      {
        "astId": 7952,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "dystRouter",
        "offset": 0,
        "slot": "310",
        "type": "t_contract(IDystopiaRouter)11662"
      },
      {
        "astId": 7955,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "dystRewards",
        "offset": 0,
        "slot": "311",
        "type": "t_contract(IDystopiaLP)11546"
      },
      {
        "astId": 7958,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "dystVault",
        "offset": 0,
        "slot": "312",
        "type": "t_contract(IDystopiaLP)11546"
      },
      {
        "astId": 7961,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "penToken",
        "offset": 0,
        "slot": "313",
        "type": "t_contract(IERC20)2634"
      },
      {
        "astId": 7964,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "penProxy",
        "offset": 0,
        "slot": "314",
        "type": "t_contract(IUserProxy)12167"
      },
      {
        "astId": 7967,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "penLens",
        "offset": 0,
        "slot": "315",
        "type": "t_contract(IPenLens)11866"
      },
      {
        "astId": 7969,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "wmaticUsdcSlippagePersent",
        "offset": 0,
        "slot": "316",
        "type": "t_uint256"
      },
      {
        "astId": 7972,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "aavePoolAddressesProvider",
        "offset": 0,
        "slot": "317",
        "type": "t_contract(IPoolAddressesProvider)11133"
      },
      {
        "astId": 7975,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "oracleUsdc",
        "offset": 0,
        "slot": "318",
        "type": "t_contract(IPriceFeed)11141"
      },
      {
        "astId": 7978,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "oracleWmatic",
        "offset": 0,
        "slot": "319",
        "type": "t_contract(IPriceFeed)11141"
      },
      {
        "astId": 7980,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "usdcStorage",
        "offset": 0,
        "slot": "320",
        "type": "t_uint256"
      },
      {
        "astId": 7982,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "liquidationThreshold",
        "offset": 0,
        "slot": "321",
        "type": "t_uint256"
      },
      {
        "astId": 7984,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "healthFactor",
        "offset": 0,
        "slot": "322",
        "type": "t_uint256"
      },
      {
        "astId": 7986,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "balancingDelta",
        "offset": 0,
        "slot": "323",
        "type": "t_uint256"
      },
      {
        "astId": 7988,
        "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
        "label": "realHealthFactor",
        "offset": 0,
        "slot": "324",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IDystopiaLP)11546": {
        "encoding": "inplace",
        "label": "contract IDystopiaLP",
        "numberOfBytes": "20"
      },
      "t_contract(IDystopiaRouter)11662": {
        "encoding": "inplace",
        "label": "contract IDystopiaRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2634": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IExchange)13493": {
        "encoding": "inplace",
        "label": "contract IExchange",
        "numberOfBytes": "20"
      },
      "t_contract(IPenLens)11866": {
        "encoding": "inplace",
        "label": "contract IPenLens",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolAddressesProvider)11133": {
        "encoding": "inplace",
        "label": "contract IPoolAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)11141": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IUserProxy)12167": {
        "encoding": "inplace",
        "label": "contract IUserProxy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/StrategyUsdPlusWmatic.sol:StrategyUsdPlusWmatic",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
